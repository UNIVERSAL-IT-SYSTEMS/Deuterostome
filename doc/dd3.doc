

ÇNewPage  /paragraphindent 0 def
Ç/captionindent -36 def  /captionadjust  1 def
ÇcÅ3.2 Operator lexiconÇ|

ÇhÅ[Ç| mÄ-- Å[Ä markÇ|

ÇpÄpushes  a  ÑmarkÄ object on the operand stack.  The typical  use  of  this 
Äoperator  is to mark the beginning of a sequence of objects that will  be 
Äpackaged into a new list object by the Å] Äoperator.Ç|

ÇxÄSEE ALSO:Å ]Ç| 1 ls

ÇhÅ]Ç| mÄmark obj†1Ä..obj†nÄ Å]Ä listÇ| n

ÇpÄcreates  a  new list of n elements,  where n is the  number  of  objects 
Äfollowing  the topmost mark on the operand stack,  stores those  elements 
Äinto  the list,  and returns the list on the operand  stack.  The  object 
Äfollowing  the  mark will become element 0 of the list,  and  the  object 
Äbefore Å]Ä, the (n-1)th element. The mark and the list elements are removed 
Äfrom the stack before the list object is pushed.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ[7 3 6.4 true] => Ña 4-element list, of elements 7, 3, 6.4, trueÇ|
ÇyÄ[8 9 add] => Ña 1-element list, containing 17Ç|
ÇyÄ[x y z] => Ña 3-element list, of objects associated with 'x',..Ç|

ÇpÄThe  second line illustrates that the D machine ÑexecutesÄ the objects  it 
Äencounters between '[ ]' (whereas enumerations of other composite objects 
Äare simply translated into their internal form and saved as the value  of 
Äthe object). Thus, the 'add' invokes the associated operator, whereas the 
Äexecution  of the numerals simply transfers these to the stack,  so  they 
Äpile up as typed.Ç|

ÇpÄThe last line of the example points out that the objects associated with 
ÑactiveÄ names,  rather than these names, will become elements of the list. 
ÄThus,  re-definition  of such names after forming the list will  not  re-
Ädefine the elements of the list.Ç| 1 ls

ÇhÅabortÇ| mÄ-- ÅabortÄ --Ç|

ÇpÄterminates  execution of the current context. ÑabortÄ clears the operand and Äexecution stacks and removes all but Ñsystemdict Ä and Ñuserdict Äfrom the Ädictionary stack.Ç|

ÇxÄSEE ALSO: Åhalt, continue, exit, stop, stoppedÇ| 1 ls

ÇhÅabsÇ| mÄnum ÅabsÄ numÇ| 1 ls
Ç      mÄarray ÅabsÄ arrayÇ|

ÇpÄreturns the absolute value of a numeral,  or replaces all elements of an 
Äarray by their absolute values returning the array object.  The numerical 
Ätype  of the result is that of the operand.  An ÑundefinedÄ  operand  value 
Äproduces an ÑundefinedÄ result value.Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄ99.9 abs => 99.9Ç|
ÇyÄ-1875 abs => 1875Ç|
ÇyÄ<w 7 -2 0> abs => <w 7 2 0>Ç| 1 ls

ÇhÅacosÇ| mÄnum ÅacosÄ numÇ| 1 ls
Ç       mÄarray ÅacosÄ arrayÇ|

ÇpÄreturns the arccosine of a numeral, or replaces all elements of an array by 
Ätheir arccosines returning the array object. The result is in radians. The Änumerical type of the result is that of the operand. An ÑundefinedÄ operand value Äproduces an ÑundefinedÄ result value, and operand values of absolute values Ägreater than 1 yield an ÑundefinedÄ result.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ0.5 acos => 1.047197551196598Ç| 1 ls

ÇxÄSEE ALSO: ÅcosÇ| 1 ls


ÇhÅactiveÇ| mÄany ÅactiveÄ boolÇ|

ÇpÄdetermines  whether  ÑanyÄ carries the ÑactiveÄ (as  opposed  to  the 
ÑpassiveÄ) attribute and returns ÑtrueÄ if the object is ÑactiveÄ, ÑfalseÄ if the 
Äobject is ÑpassiveÄ.Ç|

ÇxÄSEE ALSO: Åpassive, makeact, makepassÇ| 1 ls

ÇhÅaddÇ| mÄnum†1Ä num†2Ä ÅaddÄ sumÇ| 1 ls
Ç      mÄarray†1Ä array†2Ä ÅaddÄ array†1Ç| 1 ls
Ç      mÄarray num ÅaddÄ arrayÇ| 1 ls
Ç      mÄnum array ÅaddÄ numÇ|

ÇpÄadds two numerals returning their sum, or adds the elements of Ñarray§2Ñ Äto 
Äthe corresponding elements of Ñarray§1Ñ Äreturning Ñarray§1Ä,  or adds a numeral 
Äto all elements of ÑarrayÄ returning ÑarrayÄ, or adds the sum of all elements of ÑarrayÄ to ÑnumÄ returning the sum in ÑnumÄ.Ç|

ÇpÄAll types of numerical values are accepted in any combination. Operand values Äare converted to Ñdouble Ätype prior to the operation, and the result is returned Äin the type of the pivotal operand.Ç|

ÇpÑUndefinedÄ  operand values are propagated into a corresponding  ÑundefinedÄ 
Äresult,   and  arithmetical  overflow  produces  corresponding  ÑundefinedÄ 
Ävalues.Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄ17 4 add => 21Ç|
ÇyÄ1.5 2 add => 3.5Ç|
ÇyÄ1 2.5 add => 3Ç|
ÇyÄ<w 1 2 3> 10 add => <w 11 12 13Ç|
ÇyÄ<s 2.5 17.1 22.4> <1.0 * -2.0> add => <s 3.5 * 20.4>Ç|
ÇyÄ1.0 <w 17 3 5 6 > add => 32.0Ç|

ÇpÄNote  that  two array operands need to have identical lengths  (but  not 
Änumerical types).Ç|

ÇxÄSEE ALSO: ÅsubÇ| 1 ls

ÇhÅanchorsearchÇ| mÄstring seek ÅanchorsearchÇ| ! @Ñ if found:Ä post match trueÇ| 1 ls
Ç                                             @Ñ if not found:Ä string falseÇ|

ÇpÄdetermines  whether  the string ÑseekÄ matches the  initial  substring  of 
ÑstringÄ (that is, ÑstringÄ is at least as long as ÑseekÄ and the corresponding 
Ächaracters are equal). If so, ÑstringÄ is split into two substrings: ÑmatchÄ, 
Äthe  portion  of ÑstringÄ that matches ÑseekÄ,  and ÑpostÄ,  the  remainder  of 
ÑstringÄ;  and  ÑpostÄ,  ÑmatchÄ,  and  the boolean ÑtrueÄ are pushed  onto  the 
Äoperand stack. If not, the original ÑstringÄ and ÑfalseÄ are returned.Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄ(abcd) (ab) anchorsearch => (cd) (ab) trueÇ|
ÇyÄ(abcd) (bc) anchorsearch => (abcd) falseÇ|
ÇyÄ(abcd) (AB) anchorsearch => (abcd) falseÇ|
ÇyÄ(a b c d) (ab) anchorsearch => (a b c d) falseÇ|

ÇxÄSEE ALSO: ÅsearchÇ| 1 ls

ÇhÅandÇ| mÄbool†1Ä bool†2Ä ÅandÄ boolÇ| 1 ls
Ç      mÄnum†1Ä num†2Ä ÅandÄ numÇ|

ÇpÄreturns the logical conjunction of two booleans, or the bitwise 'and' of 
Äthe  binary  representations  of  two  numerals. The second numeral operand is Äextended by leading zeroes if necessary to match a pivotal numeral operand, and Äthe operation is performed over the length of the pivotal operand. Ñand Ä treats ÑundefinedÄ numeral values like any other value (the ÑundefinedÄ bit pattern of an Äinteger has a true sign bit and false in all other positions).Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄtrue true and => trueÇ|
ÇyÄtrue false and => falseÇ|
ÇyÄfalse true and => falseÇ|
ÇyÄfalse false and => falseÇ| 1 ls

ÇyÄ17 1 and => 1Ç|
ÇyÄ21 7 and => 5Ç|

ÇxÄSEE ALSO: Åor, xor, notÇ| 1 ls

ÇhÅarrayÇ| mÄn /type ÅarrayÄ arrayÇ|

ÇpÄcreates  an  array  of length ÑnÄ and numeral type ÑtypeÄ  (specified  by  a 
Äpassive name whose first letter is a type specifier,  b/B,  w/W,  l/L, or 
Äs/S).  The  array object is returned on the operand  stack.  The  maximal 
Äallowed array length is limited by the space available in the VM.Ç| 1 ls

ÇxÄSEE ALSO: Åearray, dict, listÇ| 1 ls

ÇhÅasinÇ| mÄnum ÅasinÄ numÇ| 1 ls
Ç       mÄarray ÅasinÄ arrayÇ|

ÇpÄreturns the arcsine of a numeral, or replaces all elements of an array by 
Ätheir arcsines returning the array object. The result is in radians. The Änumerical type of the result is that of the operand. An ÑundefinedÄ operand value Äproduces an ÑundefinedÄ result value, and operand values of absolute values Ägreater than 1 yield an ÑundefinedÄ result.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ0.5 asin => 0.5235987755982989e-1Ç| 1 ls

ÇxÄSEE ALSO: ÅsinÇ| 1 ls

ÇhÅatanÇ| mÄnum ÅatanÄ numÇ| 1 ls
Ç       mÄarray ÅatanÄ arrayÇ|

ÇpÄreturns the arctangent of a numeral, or replaces all elements of an array by 
Ätheir arctangents returning the array object. The result is in radians. The Änumerical type of the result is that of the operand. An ÑundefinedÄ operand value Äproduces an ÑundefinedÄ result valueÅ.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ0.5 atan => 0.4636476090008061Ç| 1 ls

ÇxÄSEE ALSO: ÅtanÇ| 1 ls

ÇhÅbeginÇ| mÄdict Åbegin Ä--Ç|

ÇpÄpushes  the  dictionary  ÑdictÄ on the dictionary  stack,  making  it  the 
Äcurrent  dictionary  and installing it as the first of  the  dictionaries 
Äthat define the current vocabulary.Ç|

ÇpÑbeginÄ uses only dictionaries whose values are stored in internal VM.Ç|

ÇxÄSEE ALSO: Åend, countdictstack, dictstackÇ| 1 ls

ÇhÅbindÇ| mÄproc ÅbindÄ procÇ|

ÇpÄreplaces active operator names in ÑprocÄ by their values. For each element 
Äin ÑprocÄ that is an active name,  ÑbindÄ looks up the name in the context of 
Äthe current dictionary stack. If the name is found and is associated with 
Äan operator object,  ÑbindÄ replaces the name by the operator in  ÑprocÄ.  If 
Äthe name is not found or does not resolve to an operator,  ÑbindÄ makes  no 
Ächange.Ç|

ÇpÄAdditionally, for each procedure object in ÑprocÄ that is not protected by 
Äthe  Ñread-onlyÄ  attribute,   ÑbindÄ  applies  itself  recursively  to  that 
Äprocedure, makes the procedure Ñread-onlyÄ, and stores it back into ÑprocÄ.Ç|

ÇpÄThere  are  two  benefits of  binding  a  procedure.  Firstly,  a  bound 
Äprocedure will always execute using the operators that were intended when 
Äthe  procedure  was defined,  even if some operator names have  been  re-
Ädefined  in  the meantime.  Secondly,  the procedure  will  run  somewhat 
Äfaster,  as  operators  are  executed immediately  rather  than  after  a 
Ädictionary search. In other words, binding has effects analogous to those 
Äof 'compilation': it finalizes references made through (operator) names.Ç|

ÇpÄProcedures submitted to ÑbindÄ have to reside in internal VM.Ç| 1 ls

ÇhÅbitshiftÇ| mÄnum shiftÅ bitshiftÄ numÇ|

ÇpÄshifts  the 
Äbinary  representation  of ÑnumÄ left by ÑshiftÄ bits.  If ÑshiftÄ is negative, a Äright shift by Ñ-shiftÄ bits is performed. 
ÑbitshiftÄ assigns zeroes to bits shifted into the value,  and discards the 
Äbits  shifted  out.   ÑbitshiftÄ  thus  performs  a  logical  (rather  than 
Äarithmetical) shift.Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄ5 4 bitshift => 80Ç|
ÇyÄ200 -1 bitshift => 100Ç| 1 ls

ÇhÅcapsaveÇ| mÄsavebox ÅcapsaveÄ --Ç| 1 ls

ÇpÄconcludes the range of discardable VM objects in ÑsaveboxÄ. ÑrestoreÄ 
Äapplied to that box will discard all internal VM objects created between the Äinstance of ÑsaveÄ that created the box and the instance of ÑcapsaveÄ. If Ñcapsave ÄisÄ applied more than once to the same box object, it expands the discardable VM Ärange to include also the objects created since the previous instance of ÑcapsaveÄ.Ç|

ÇxÄSEE ALSO: Åsave, restoreÇ| 1 ls


ÇhÅceilÇ| mÄnum ÅceilÄ numÇ| 1 ls
Ç       mÄarray ÅceilÄ arrayÇ|

ÇpÄreturns the ceiling (i.e. the nearest integer value greater than the operand)Å Äof a numeral, or replaces all elements of an array by their ceilings returning Äthe array object. The numerical type of the result is that of the operand. An ÑundefinedÄ operand value produces an ÑundefinedÄ result value.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ1.45 ceil =>2.0Ç| 1 ls

ÇxÄSEE ALSO: ÅfloorÇ| 1 ls

ÇhÅclassÇ| mÄany ÅclassÄ /nameÇ|

ÇpÄreturns a passive name that defines the ÑclassÄ of ÑanyÄ  object,  i.e.  one 
Äof:  /nullclass,  /markclass,  numclass, /opclass, /nameclass, /boolclass, 
Ä/arrayclass, /listclass, /dictclass, /boxclass.Ç|

ÇpÄThe  ÑclassÄ  operator  is useful in procedures that  tune  themselves  to 
Ädifferent classes of operand.  A method to implement such a procedure  is 
Äillustrated in the following example.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ/printclasses 10 dict dup beginÇ|
ÇyÄ  /nullclass { ... } defÇ|
ÇyÄ  ...Ç|
ÇyÄ  /boxclass { ... } defÇ|
ÇyÄend defÇ| 1 ls
ÇyÄ/printobject {Ç|
Çy Ä dup class makeact printclasses begin exec endÇ|
ÇyÄ} defÇ|

ÇpÄA  dictionary,Ñ  printclassesÄ,  is created to hold procedures  associated 
Äwith  the  class names.  Each of these procedures expects to  receive  an 
Äoperand  of  a  particular class on the operand stack  and  contains  the 
Äinstructions  to  print  the  value  of  that  operand.  The  ÑprintobjectÄ 
Äprocedure receives any object on the operand stack,  duplicates  it,  and 
Äuses one copy to determine the class of the object. The resulting name is 
Ägiven  the ÑactiveÄ attribute (ÑmakeactÄ) and submitted to  execution  (ÑexecÄ) 
Äafter making ÑprintclassesÄ the current dictionary.  This will invoke the Äprocedure  associated  with 
Äthe class name in ÑprintclassesÄ, which prints the first copy of the object 
Äpassed to it on the operand stack.Ç|

ÇpÄThis technique generally is the basis for using the existing D machinery 
Äin  interpreting keywords,  or,  at a larger scale,  secondary  (problem-
Äoriented) languages.  It provides two good things for free:  a clean  and 
Äopen program structure, and access to a very fast lookup machinery.Ç|

ÇxÄSEE ALSO: ÅtypeÇ| 1 ls

ÇhÅclearÇ| mÄ|- any†1Ä..any†nÄ ÅclearÄ |-Ç|

ÇpÄpops all objects from the operand stack and discards them.Ç| 1 ls

ÇhÅcleartomarkÇ| mÄmark obj†1Ä..obj†nÄ ÅcleartomarkÄ --Ç|

ÇpÄpops the operand stack repeatedly until it encounters a mark,  then pops 
Äthe mark as well.Ç| 1 ls

ÇhÅcloseportÇ| mÄ-- ÅcloseportÄ --Ç|

ÇpÄterminates the port session started by the latest instance of ÑportsessionÄ. 
ÑcloseportÄ pushes the boolean ÑfalseÄ on the operand stack and continues execution Äwith the object following the ÑportsessionÄ operator. Ñcloseport Ätypically is Äexecuted in the context of a port-serving procedure, but may be invoked in otherÄ ways, for instance, from the console. See ÑportsessionÄ for an example.Ç|

ÇxÄSEE ALSO: Åportsession, stop, abortÇ| 1 ls

ÇhÅcontinueÇ| mÄ-- ÅcontinueÄ --Ç|

ÇpÄdrops the execution stack to below the topmost Ñhalt Äoperator object, thus Äresuming execution of the context that was suspended by that instance of ÑhaltÄ.Ç|

ÇxÄSEE ALSO: Åhalt, abort, stopÇ| 1 ls
ÇhÅcopyÇ| mÄany†1Ä..any†nÄ n ÅcopyÄ any†1Ä..any†nÄ any†1Ä..any†nÇ| 1 ls
Ç       mÄarray†1Ä array†2Ä Åcopy Äsubarray†2Ç| 1 ls
Ç       mÄnum array†1Ä ÅcopyÄ array†1Ç| 1 ls
Ç       mÄlist1 list2 ÅcopyÄ sublist2Ç| 1 ls

ÇpÄIf the operand on top of the operand stack is a numeral,  ÑcopyÄ pops that 
Änumber  from  the  stack and then duplicates the top ÑnÄ  elements  of  the 
Ästack if ÑnÄ is greater than zero.Ç|

ÇpÄIn  the  second instance,  the first array is copied  into  the  initial 
Äsubarray  of the second array and the subarray is returned on the  stack; 
Äthe length of the second array has to be at least as great as that of the 
Äfirst array, and elements of the second array that are not matched by the 
Äfirst array are not affected.  If a numeral is used as the first operand, 
Äits  value  is copied into all elements of the array,  and the  array  is 
Äreturned.  The type of copied values is converted to the numeral type  of 
Äthe  target as necessary;  (old and new) ÑundefinedÄ values are passed  on.Ç|

ÇpÄWith list objects as operands,  ÑcopyÄ copies the values of the first list 
Äinto  the initial sublist of the second operand,  returning the  sublist. 
ÄThe length of the second list has to be at least as great as that of  the 
Äfirst,  and elements of the second list not matched by the first are  not 
Äaffected.Ç|

ÇpÑCopyÄ physically transfers values from one list to another. If the copied 
Äsource  list  value  contains composite  objects,  these  are  copied  as 
Ädescriptions.  In other words,  ÑcopyÄ does not apply itself recursively to 
Äcomposite objects: it copies only one level of values.Ç|

ÇpÄThe  object  returned  by ÑcopyÄ has the  attributes  of  the  destination 
Äobject. Note that ÑcopyÄ is restricted to internal objects.Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄ4 5 6 7 2 copy => 4 5 6 7 6 7Ç|
ÇyÄ1 0 copy => 1Ç| 1 ls

ÇyÄ/x 5 /s array defÇ|
ÇyÄ<b 2 3> x copy => <s 2.0 3.0 >Ç|
ÇyÄx => <s 2.0 3.0 ? ? ? >Ç|
ÇyÄ0 x copy => <s 0.0 0.0 0.0 0.0 0.0 >Ç|

ÇxÄSEE ALSO: ÅfaxÇ| 1 ls

ÇhÅcosÇ| mÄnum ÅcosÄ numÇ| 1 ls
Ç      mÄarrayÅ cosÄ arrayÇ|


ÇpÄreturns the cosine of the operand value, which is interpreted to be in 
Äunits of radians. The result is returned in the type of the operand.ÑArray Äelements are replaced by their cosines, and 
Äthe array is pushed back on the stack.Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄ0.0 cos => 1.0Ç|
ÇyÄ1.579796327 cos => 0.0Ç| 1 ls

ÇhÅcountÇ| mÄ|-any†1Ä..an†ynÄ ÅcountÄ |-any†1Ä..any†nÄ nÇ|

ÇpÄcounts  the  number  of objects on the operand  stack  and  pushes  this 
Änumber as a ÑlongÄ numeral.Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄclear 1 2 3 count => 1 2 3 3Ç| 1 ls

ÇhÅcountdictstackÇ| mÄ--Å countdictstackÄ numÇ|

ÇpÄcounts the number of dictionaries currently on the dictionary stack  and 
Äpushes this count on the operand stack.Ç|

ÇhÅcountexecstackÇ| mÄ-- ÅcountexecstackÄ numÇ|

ÇpÄcounts  the  number of objects on the execution stack  and  pushes  this 
Änumber on the operand stack.Ç| 1 ls

ÇhÅcounttomarkÇ| mÄmark obj†1Ä..obj†nÄ ÅcounttomarkÄ mark obj†1Ä..obj†nÄ nÇ|

ÇpÄcounts the number of objects on the operand stack, starting with the top 
Äelement and stopping with the object above the topmost mark object.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ5.0 mark (abc) 7 -19 counttomark => 5.0 mark (abc) 7 -19 3Ç| 1 ls


ÇhÅctypeÇ| mÄnum†1Ä /type ÅctypeÄ num†2Ç| 1 ls
Ç        mÄarray†1Ä /type ÅctypeÄ array†2Ç|

ÇpÄconverts both the type specifier and the value of Ñnum§1Ä to the new  ÑtypeÄ, 
Äwhich  is specified by a passive name whose initial character is  one  of 
Äb/B,  w/W, l/L, s/S, or d/D). The converted numeral is returned on the operand 
Ästack. In the case of an array, Ñctype Äconverts only the type specifier in 
Äthe object description,  but leaves the value unchanged. Hence, Ñctype Äre-
Ädirects the interpretation of the same binary value by operators that use 
Äthe  converted  array object (actual conversion of  an  array  value,  by 
Äcontrast,  is effected by the ÑcopyÄ operator).  ÑctypeÄ may also adjust  the 
Älength  (number of elements) for the new array as necessary to match  the 
Äactual space occupied by the value.Ç|

ÇpÑctypeÄ accepts internal and external arrays.Ç|

ÇxÄSEE ALSO: Åparcel, copyÇ| 1 ls

ÇhÅcurrentdictÇ| mÄ-- ÅcurrentdictÄ dictÇ|

ÇpÄpushes the current topmost object of the dictionary stack on the operand 
Ästack, leaving the dictionary stack unchanged.Ç| 1 ls

ÇxÄSEE ALSO:Ñ Åbegin, endÇ| 1 ls

ÇhÅcurrentscreenÇ| mÄ-- ÅcurrentscreenÄ screen_#Ç|

ÇpÄinquires the index of the current text screen. This is the text screen most 
Ärecently moved to the foreground by pressing a numeral pad digit key together Äwith 'control', or by the latest instance of ÑshowscreenÄ that referred to a text Äscreen.Ç|

ÇxÄSEE ALSO: Åshowscreen, textscreen, usescreenÇ| 1 ls

ÇhÅdecode_85Ç| mÄstring_85 stringbuf Ådecode_85Ä substring boolÇ|

ÇpÄconverts a string that holds binary information in the form of ASCII85 code Äinto a binary string, which overwrites the initial ÑsubstringÄ of  ÑstringbufÄ. The 
Äreturned boolean indicates whether the converted string was truncated due to an
Äinsufficient size of ÑstringbufÄ. The decoded string generally is smaller than theÄ encoded string (as encoding typically generates 5 bytes for each 4 original Äbytes). ASCII85 encoding is used to transfer binary strings (like bit map Äimages) to a PostScript printer; the format is described in the PostScript ÄLanguage Reference Manual (2nd edition).Ç|

ÇxÄSEE ALSO: Åencode_85Ç| 1 ls
ÇhÅdefÇ| mÄkey valueÅ defÄ --Ç|

ÇpÄassociates  ÑkeyÄ (a Ñpassive Äname) with ÑvalueÄ (any object) in the  topmost 
Ämodifiable dictionary on the dictionary stack.  If ÑkeyÄ is already present 
Äin that dictionary,  ÑdefÄ simply replaces the associated value. Otherwise, 
ÑdefÄ creates a new entry for ÑkeyÄ and stores ÑvalueÄ with it.  If the current 
Ädictionary  carries  the  ÑreadonlyÄ  attribute,   ÑdefÄ  examines  the  next 
Ädictionary  below it,  and so on until a modifiable dictionary  has  been 
Äfound; the association is made in that dictionary.Ç|

ÇpÄAnother operator,  ÑnameÄ, has exactly the same effects as ÑdefÄ, but expects 
Äits operands in the converse order.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ/n 17 def =>Ñ associates 'n' with numeral '17'Ç|
ÇyÄ/n n 4 add def => Ñre-defines n to become '21'Ç|

ÇxÄSEE ALSO: Åname, putÇ| 1 ls

ÇhÅdeletedirÇ| mÄvolid dirid (:dirname) Ådeletedir Ä--Ç|

ÇpÄdeletes the disk file directory specified by the operands.  Before  a 
Ädirectory can be deleted,  all files in that directory need to be deleted 
Äby  ÑdeletefileÄ.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ-2 2 (:textdocuments) deletedirÇ|

ÇpÄThis deletes the directory 'textdocuments' in the root directory of the second 
Ämounted Apple volume.Ç|
ÇxÄSEE ALSO: Åfinddir, makedir, findfiles, deletefileÇ| 1 ls

ÇhÅdeletefileÇ| mÄvolid dirid (:filename) ÅdeletefileÄ --Ç|

ÇpÄdeletes the disk file specified by the operands (see general discussion of fileÄ operators (Chapter 3.1).Ç|

ÇxÄSEE ALSO: Åfindfiles, renamefile, deletedirÇ| 1 ls

ÇhÅdictÇ| mÄn ÅdictÄ dictÇ|

ÇpÄcreates  an empty dictionary with a maximal capacity of ÑnÄ  elements  and 
Äpushes the created dictionary object onto the operand stack. The value of 
Äthe new dictionary is allocated in internal VM.Ç|

ÇxÄSEE ALSO: Åedict, begin, end, length, usedÇ| 1 ls

ÇhÅdictstackÇ| mÄlist ÅdictstackÄ sublistÇ|

ÇpÄstores  all  elements of the dictionary stack into ÑlistÄ and  returns  an 
Äobject  describing the initial subarray of ÑlistÄ that has  received  stack 
Äelements. ÑDictstackÄ copies the bottommost stack element into element 0 of 
ÑlistÄ,  and so on.  The dictionary stack itself is unchanged. The value of 
Äthe target list needs to be in internal VM.Ç|

ÇxÄSEE ALSO: ÅcountdictstackÇ| 1 ls

ÇhÅdiscardÇ| mÄeVMid/eVM_obj ÅdiscardÄ --Ç|

ÇpÄdiscards all temporary objects of an eVM if given the eVM identifier,  or  a Ägiven temporary  external object and all temporary objects created  after  that 
Äobject  in the same eVM.  ÑdiscardÄ actually erases the master descriptions that Äare stored with the object values in the eVM. Since Ñdiscard Äcannot eliminate Äreferences made to the deleted objects, eVM objects to be accessed generally Äshould  be examined with Ñvalid Ä(which checks the master description); ÑvalidÄ willÄ fail on objects previously erased by ÑdiscardÄ.Ç|

ÇxÄSEE ALSO: ÅvalidÇ| 1 ls

ÇhÅdiskspaceÇ| mÄvolid ÅdiskspaceÄ total freeÇ|Ä Ç1 ls
Ä            ÇmÄ(volname:) ÅdiskspaceÄ total freeÇ|

ÇpÄinquires  the  ÑtotalÄ  and  ÑfreeÄ  number  of  bytes  available  on  a volume.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ(Hard Drive:) diskspace => 364363776 258909184Ç| 1 ls

ÇhÅdivÇ| mÄnum†1Ä num†2Ä ÅdivÄ quotientÇ| 1 ls
Ç         mÄarray†1Ä array†2Ä ÅdivÄ array†1Ç| 1 ls
Ç         mÄarray num ÅdivÄ arrayÇ| 1 ls
Ç         mÄnum arrayÅ div ÄnumÇ|

ÇpÄdivides the first by the second numeral operand,  or the elements of the 
Äfirst array by the corresponding elements of the second,  or all elements 
Äof  the array by the same numeral, or a numeral by all elements of an array.  ÄTwo array operands need to  match  in length. Any numerical types, and mixed Ätypes, are acceptable; the computation is done following conversion to ÑdoubleÄ Ätype, and the result is returned in the type of the pivotal operand. ÑUndefinedÄ  Äoperand  values,  and ÑundefinedÄ  quotients  produce  ÑundefinedÄ elements  in  theÄ result.Ç|

ÇpÑdivÄ pops both operands and pushes the quotient on the operand  stack.  If 
Äthe pivotal operand is an array, the values of that array are replaced by 
Äthe values of the quotient, and the array is returned on the stack.Ç|

ÇpÄValues of array operands need to be in internal VM.Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄ5 2 div => 2Ç|
ÇyÄ5.0 2 div => 2.5Ç|
ÇyÄ<l 10 12 14> <b 4 3 2> div => <l 2 4 7>Ç|
ÇyÄ1 0 div => *Ç |
ÇyÄ<s 1.0 *> <s 0.0 3.0> div => <s * *>Ç|

ÇxÄSEE ALSO: ÅmulÇ| 1 ls

ÇhÅdrawlineÇ| mÄx y params ÅdrawlineÄ --Ç|

ÇpÄdraws a line interconnecting a set of coordinate pairs by a colored, solid Äline. Coordinates ÑxÄ and ÑyÄ can be given as matched, but separate arrays or lists,Ä or as one array or list of alternating x/y elements. Coordinates refer to Äscreen pixels, with 0/0 at the top, left corner (of the graph screen in use) andÄ positive increments specifying right/down displacements. Ñparams Äis a list or Äarray with the following elements:Ç|

ÇyÄ0 - redÇ|
ÇyÄ1 - greenÇ|
ÇyÄ2 - blueÇ|

ÇpÄColor intensities range from 0 (none) to 255 (full).Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ<w 0 0 200 0 200 200 0 200 0 0 > <w 0 255 0 > drawline => green, square frameÇ|

ÇxÄSEE ALSO: Åusescreen, drawsymbols, drawsamples, drawtextÇ| 1 ls

ÇhÅdrawsamplesÇ| mÄsamples params ÅdrawsamplesÄ --Ç|

ÇpÄmarks screen pixels corresponding to a set of ordinate samples using an 
Äauto-incremented linear abscissa. Ñsamples Äis an array of word integers. Ñparams Äis an array whose elements specify:Ç|

ÇyÄ0 - abscissa to be assigned to first sampleÇ|
ÇyÄ1 - log†2Ä of scale factor for sample index (abscissa)Ç|
ÇyÄ2 - ordinate offset to be added to samples prior to scalingÇ|
ÇyÄ3 - log†2Ä of scale factor for sample (ordinate)Ç|
ÇyÄ4 - red (0 - off; 255 - full)Ç|
ÇyÄ5 - greenÇ|
ÇyÄ6 - blueÇ|
ÇyÄ7 - drawing mode (0 - blank screen & write, 1 - write, 2 - invert, 3 - erase)Ç|

ÇpÑdrawsamplesÄ lets you display many samples quickly and economically: it marks Äeach sample only by one pixel, automatically generates a linear abscissa, and Äoffsets and scales the samples as it uses them. Drawing mode 2 is useful when Äseveral sample sets are superimposed on a screen and need to be selectively Äerasable (in mode 2, the first pass marks the samples, and the second pass Äundoes the effects of the first pass). Mode 0 first clears the entire virtual Äscreen, then marks the pixels belonging to the samples. Mode 1 or 3 mark or Äwhite out the pixels belonging to the samples.Ç|

ÇxÄSEE ALSO: Åusescreen, drawline, drawsymbolsÇ|Ä Ç1 ls

ÇhÅdrawsymbolsÇ| mÄx y params ÅdrawsymbolsÄ --Ç|

ÇpÄrepresents a set of coordinate pairs by centered symbols. Coordinates ÑxÄ and ÑyÄ Äcan be given as matched, but separate arrays or lists, or as one array or list Äof alternating x/y elements. Coordinates refer to screen pixels, with 0/0 at theÄ top, left corner (of the graph screen in use) and positive increments Äspecifying right/down displacements. Ñparams Äis a list or array with the Äfollowing elements:Ç|

ÇyÄ0 - redÇ|
ÇyÄ1 - greenÇ|
ÇyÄ2 - blueÇ|
ÇyÄ3 - symbol#Ç|
ÇyÄ4 - symbol size in pixelsÇ|

ÇpÄ21 symbols are available:Ç|

Ç/oldtabs tabs def
Ç/tabs [ [108 1] [108 1] [108 1] ] def
ÇnÄ0 - dotÇ|Ä       Ç Ä   ÇtÄ7 - filled circleÇ|Ä  Ç tÄ14 - left triangleÇ|
ÇnÄ1 - diamondÇ| Ä      ÇtÄ8 - circleÇ|Ä         Ç tÄ15 - vc tickÇ|
ÇnÄ2 - filled squareÇ| tÄ9 - circle-Ç|Ä        Ç tÄ16 - vu tickÇ|
ÇnÄ3 - squareÇ| Ä       ÇtÄ10 - *Ç|Ä             Ç tÄ17 - vd tickÇ|
ÇnÄ4 - square-Ç| Ä      ÇtÄ11 - up triangleÇ|Ä   Ç tÄ18 - hc tickÇ|
ÇnÄ5 - +Ç| Ä            ÇtÄ12 - down triangleÇ|Ä Ç tÄ19 - hr tickÇ|
ÇnÄ6 - xÇ|Ä            Ç tÄ13 - right triangleÇ| tÄ20 - hl tickÇ| 1 ls
Ç/tabs oldtabs def

ÇpÄSymbols not indicated as filled are stroked. An appended '-' indicates an Äadditional horizontal bar across the basic symbol. The notation 'hc' represents Äa horizontal, centered scale tick, 'vu', a vertical tick drawn above the tick Äcoordinate point.Ç|

ÇxÄSEE ALSO: Åusescreen, drawline, drawsamples, drawtextÇ| 1 ls

ÇhÅdrawtextÇ| mÄx y string paramsÅ drawtext Äx yÇ|

ÇpÄdisplays a string of text at the coordinates Ñx/yÄ and returns the coordinates 
Äattained after plotting the last character of ÑstringÄ. Note that coordinates are Ägiven and returned as separate numerals (unlike in other 'draw' operators). ÑparamsÄ is a list or array with the elements:Ç|

ÇyÄ0 - red (0 - none, 255 - full)Ç|
ÇyÄ1 - greenÇ|
ÇyÄ2 - blueÇ|
ÇyÄ3 - text size in points (pixels)Ç|
ÇyÄ4 - font# (0-255, dependend on host; 0 - chicago, etc)Ç|
ÇyÄ5 - text styleÇ|
ÇyÄ6 - horizontal alignment (<0: left, 0: center, >0: right)Ç|
ÇyÄ7 - vertical alignment (<0: bottom, 0: center, >0: top)Ç|

ÇpÄText styles include several features that can be simultaneously used. Each 
Äfeature is controlled by a bit; the bit masks are:Ç|

ÇyÄ1 - boldÇ|
ÇyÄ2 - italicÇ|
ÇyÄ4 - underlineÇ|
ÇyÄ8 - outlineÇ|
ÇyÄ16 - shadowÇ|
ÇyÄ32 - condenseÇ|
ÇyÄ64 - extendÇ| 

ÇxÄSEE ALSO: Åusescreen, drawsymbolsÇ|
ÇhÅdupÇ| mÄany ÅdupÄ any anyÇ|

ÇpÄduplicates  the  top  element of  the  operand  stack.  Since  composite 
Äobjects are represented on the stack by their description,  ÑdupÄ  actually 
Äduplicates the description of the object;  the original and the duplicate 
Äobject share the original value.Ç|

ÇxÄSEE ALSO: Åcopy, exch, popÇ| 1 ls

ÇhÅearrayÇ| mÄeVMid n type ÅearrayÄ arrayÇ| 

ÇpÄcreates an array of length ÑnÄ and numeral ÑtypeÄ in the external 
ÄVM ÑeVMidÄ;  a  positive  VM identifier directs the array  to  the  temporary,  a 
Änegative  identifier  to the permanent,  section of the eVM.Ñ  TypeÄ  is  a 
Äpassive name whose first letter is one of:  b/B, w/W, l/L, s/S, d/D. The value 
Äof   the  new  array  is  unpredictable.   The  external   array   object 
Ä(description) is returned on the operand stack. The maximal allowed array 
Älength is limited only by the amount of space remaining in the eVM. If an 
Äodd  value  is specified in ÑnÄ for a byte array,  the  length  is  tacitly 
Äincreased by one.Ç|

ÇxÄSEE ALSO: Åarray, edict, elistÇ| 1 ls

ÇhÅedictÇ| mÄeVMid n ÅedictÄ dictÇ|

ÇpÄcreates an empty dictionary with a maximal capacity of ÑnÄ elements in the 
Äspecified  external VM and pushes the new dictionary  object 
Ä(description) on the operand stack. A positive eVM identifier directs the 
Ädictionary to the temporary,  a negative to the permanent, section of the 
ÄeVM.Ç|

ÇxÄSEE ALSO: Ådict, elist, earrayÇ| 1 ls

ÇhÅelistÇ| mÄeVMid n ÅelistÄ listÇ|

ÇpÄcreates a list for a capacity of ÑnÄ objects in external  VM,  initializes 
Äall  value  elements  to  ÑnullÄ  objects,   and  pushes  the  list  object 
Ä(description) on the operand stack. A positive eVM identifier directs the 
Älist to the temporary,  a negative to the permanent,  section of the eVM. 
ÄThe list length,Ñ  nÄ,  is limited only by the amount of space remaining in 
Äthe eVM.Ç|

ÇxÄSEE ALSO:Å list, edict, earrayÇ| 1 ls

ÇhÅencode_85Ç| mÄstring stringbuf Åencode_85Ä substringÇ|

ÇpÄconverts a string that holds binary information into the form of ASCII85 code, Äwhich overwrites the initial ÑsubstringÄ of  ÑstringbufÄ. The encoded string Ägenerally is larger than the binary string (as encoding typically generates 5 Äbytes for each 4 original bytes). ASCII85 encoding is used to transfer binary Ästrings (like bit map images) to a PostScript printer; the format is described Äin the PostScript Language Reference Manual (2nd edition).Ç|

ÇxÄSEE ALSO: Ådecode_85Ç| 1 ls

ÇhÅendÇ| mÄ-- Åend Ä--Ç|

ÇpÄpops  the  current  dictionary off  the  dictionary  stack,  making  the 
Ädictionary  below it the current dictionary.  ÑdictÄ will not pop  ÑuserdictÄ 
Äand ÑsystemdictÄ,  which permanently occupy the two bottommost locations of 
Äthe dictionary stack.Ç|

ÇxÄSEE ALSO:Å begin, countdictstackÇ| 1 ls

ÇhÅeqÇ| mÄany†1Ä any†2Ä ÅeqÄ boolÇ|

ÇpÄpops  two  objects from the operand stack and pushes the  boolean  value 
ÑtrueÄ if these are equal, ÑfalseÄ if not. The definition of equality depends 
Äon the class of objects being compared. Simple objects are equal if their 
Äclasses and values are the same.  Composite objects are considered  equal 
Äonly if they share the same value; separate values are considered unequal 
Äeven if all elements of the value are the same.  In particular, ÑeqÄ is not 
Älikely  to have the expected effect when used to compare  strings.Ñ eqÄ does not Äconsider attributes of the operands, exceptÑ externalÄ. External objects are Äconsidered equal if they resolve to the same object in the same eVM.Ç|

ÇpÄFor the comparison of numerals, all types are automatically converted to ÑdoubleÄ. Numeral values can be compared with Ñundefined.Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄ1.0 1 eq =>Ñ ÄtrueÇ|
ÇyÄ(/x) mkact exec /x eq => trueÇ|
ÇyÄ(xyz) (xyz) eq => falseÇ|

ÇpÄNote  that  line 3 creates two distinct string objects,  which  are  not 
Äconsidered equal even though they contain matching bytes.Ç|

ÇxÄSEE ALSO: Åne, lt, le, gt, geÇ| 1 ls

ÇhÅerrorÇ| mÄstring num Åerror --Ç|

ÇpÄdisplays a message including Ñstring Ä(which specifies the instance of error 
Ädiscovery) and the numeral Ñnum Ä(which specifies the kind of error); Ñnum Äis Ätranslated into a text message like 'operand stack underflow'). ÑerrorÄ then Äpushes a ÑhaltÄ operator on the execution stack, which suspends execution of the Äfailed context and turns control to the console. You now can enter D Äinstructions from the console to study the problem (inspecting stacks, Ävariables, etc). ÑcontinueÄ will resume execution of the context, whereas Ñstop Ä orÄ ÑabortÄ will terminate that context or all contexts currently on the execution Ästack. You can invoke Ñerror Äfrom your own programs to handle errors discovered Äby your D code, using a negative error code (positive codes belong to the D Ämachine itself); if ÑerrorÄ does not know an error code, it simply displays the Änumeral value).Ç|

ÇxÄSEE ALSO: Åhalt, continue, stop, abortÇ|

ÇhÅevmsÇ| mÄword_array ÅevmsÄ subarrayÇ|

ÇpÄtransmits  the  identifiers  of the currently used external  VM's  into  the 
Äinitial  subarray  of Ñword_arrayÄ and pushes this  ÑsubarrayÄ  on  the 
Äoperand stack.  The length od Ñword_arrayÄ needs to be equal or larger than the 
Ämaximal  possible  number  of eVM's simultaneously in  use  (this  number 
Äis set via console when the D machine is brought up).Ç|


ÇxÄSEE ALSO:Ç Åinitiate, release, evmstatusÇ| 1 ls


ÇhÅevmstatusÇ| mÄeVMid ÅevmstatusÄ cid lun total perm temp trueÇ| 1 ls
Ç            mÄeVMid Åevmstatus ÄfalseÇ|

ÇpÄinquires the status of an external VM.  If the specified eVM is in  use, 
Äits controller identifier,  logical unit number,  number of total  bytes, 
Änumber of used permanent bytes,  number of used temporary bytes,  and the 
Äboolean ÑtrueÄ  are returned on the operand stack. If no eVM with the given 
Äidentifier is in use, only the boolean ÑfalseÄ is returned.Ç|

ÇcÄSEE ALSO:Å evms, initiatiate, releaseÄ,Å discardÇ| 1 ls

ÇhÅexchÇ| mÄany†1Ä any†2Ä ÅexchÄ any†2 Äany†1Ç|

ÇpÄexchanges the top two elements of the operand stack.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ154 66.33 exch => 66.33 154Ç|

ÇxÄSEE ALSO: Ådup, roll index, popÇ| 1 ls

ÇhÅexecÇ| mÄanyÅ execÄ --Ç|

ÇpÄpushes  ÑanyÄ object on the execution stack,  thereby making it the  next 
Äobject  that will be executed.  ÑexecÄ accepts only objects that have  the 
ÑactiveÄ  attribute,  and  typically is used to interpret a  string  or  to 
Äexecute a procedure whose name has been derived during an  activity.Ç  ÄThe 
Ävalue of the executed object has to be in internal VM.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ(9 2 mul) mkact exec => 5Ç|
ÇyÄ/procedures [ /proc0 /proc1 /proc2 ] defÇ|
ÇyÄprocedures k get mkact exec => Ñexecutes proc§kÇ|
ÇyÄ/run { filebuffer readfile mkact exec } defÇ|
ÇyÄ(a:/myfile) run =>Ñ executes 'myfile'

ÇxÄSEE ALSO: ÅmkactÄ,Å startÇ|

ÇhÅexecstackÇ| mÄlist ÅexecstackÄ sublistÇ|

ÇpÄstores  all  elements  of the execution stack in ÑlistÄ  and  returns  the 
Äinitial ÑsublistÄ of ÑlistÄ that has received objects.  The bottom element of 
Äthe stack becomes the first list element,  and so on. The execution stack 
Äitself is not changed.Ç|

ÇxÄSEE ALSO:Å countexecstack, opdstack, dictstackÇ| 1 ls

ÇhÅexitÇ| mÄ-- exit --Ç|

ÇpÄterminates the innermost program loop currently being executed.  A  loop 
Äis  formed by a procedure that is repeatedly invoked through one  of  the 
Äoperators ÑloopÄ,Ñ  repeatÄ,Ñ  forÄ,Ñ  ÄorÑ forallÄ.  ÑExitÄ pops the execution stack 
Ädown to the level of that operator, so execution is resumed with the next 
Äobject in normal sequence after the loop operator.Ç|

ÇpÑExitÄ does not affect the operand or dictionary stacks.  Objects pushed on 
Äthese  stacks  during  the execution of the loop  procedure  will  remain 
Äthere after the termination of the loop by ÑexitÄ.Ç|

ÇpÑExitÄ will not escape from the context of a ÑstoppedÄ or ÑabortedÄ  operator.Ç 
ÄThe attempt results in an error.Ç|

ÇxÄSEE ALSO:Å loop, repeat, for, forall, stop, abortÇ| 1 ls

ÇhÅexpÇ| mÄnum†1Ä Åexp Änum†2Ç| 1 ls
Ç      mÄarray†1Ä ÅexpÄ array†1Ç|Ä 

ÇpÄcomputes  the  exponential function (to base 'e') of  the  operand.Ñ  ExpÄ 
Äaccepts the operand in any type, converts it into Ñdouble Äand computes the resultÄ in this type, and returns 
Äthe  function  value in the original type.  Of an array  operand, Ñexp
Äreplaces  all  elements by their exponentials and  returns  the  array 
Äobject on the operand stack.  ÑexpÄ passes on ÑundefinedÄ operand values  and 
Ämay produce ÑundefinedÄ result values.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ-1.0 exp => 0.367879441Ç|
ÇyÄ1 exp => 2Ç|
ÇyÄ<s 1.0 2.0 *> exp => <s 2.7182818 7.3890561 *>Ç|

ÇxÄSEE ALSO:Å lnÇ| 1 ls

ÇhÅexternalÇ| mÄany ÅexternalÄ eVMid true ÑorÄ falseÇ|

ÇpÄdetermines  whether ÑanyÄ is an external object.  If  so,  Ñexterna;Ä 
Äreturns the eVM identifier and ÑtrueÄ, else only ÑfalseÄ.Ç|

ÇxÄSEE ALSO: Åevms, evmstatus, initiateÇ| 1 lsÄ 

ÇhÅfalseÇ| mÄ--Å falseÄ falseÇ|

ÇpÄpushes a boolean object whose value is ÑfalseÄ on the operand stack.Ç|

ÇxÄSEE ALSO: ÅtrueÇ| 1 ls

ÇhÅfaxÇ| mÄdest_list index1 src_listÅ faxÄ dest_list index2Ç| 1 ls
Ç      mÄdest_array index1 src_array ÅfaxÄ dest_array index2Ç|

ÇpÄAccepts any combination of external and internal source and destination. 
ÄIf  these  objects  are lists,  a copy of the source is  created  in  the 
Ädestination beginning at Ñindex1Ä.  The returned Ñindex2Ä points to the first 
Äelement following the modified elements in Ñdest_listÄ.  With  arrays,  ÑfaxÄ 
Ärequires matching source and destination types; the function is analogous 
Äto that with lists. When used with byte arrays, ÑfaxÄ is restricted to even valuesÄ for indices and faxed string lengths; for moving internal text strings, use ÑtextÄ in place of ÑfaxÄ (ÑtextÄ can use even and uneven indices and lengths).Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ100 -17 elist 0 [ exp6793_1 exp6793_2 exp7792 ] faxÇ|
ÇyÄ/Nexp name /ExpList nameÇ|

ÇpÄA permanent list of 100 elements is created in eVM 17, and references to 
Äthree  experiments  are faxed into that list starting  at  index  0. TheÄupdated index and the external list are given names for future  reference 
Äin that D session.Ç|

ÇxÄSEE ALSO: ÅcopyÄ, ÅmergeÄ, ÅtoboxÄ, ÅfromboxÇ| 1 ls

ÇhÅfillrectangleÇ| mÄx y params ÅfillrectangleÄ --Ç|

ÇpÄfills the rectangle spanned up between two coordinate pairs with a solid color Äor a pattern. Coordinates ÑxÄ and ÑyÄ can be given as matched, but separate arrays Äor lists, or as one array or list of alternating x/y elements. Coordinates referÄ to screen pixels, with 0/0 at the top, left corner (of the graph screen in use)Ä and positive increments specifying right/down displacements. Ñparams Äis a list Äor array with the following elements:Ç|

ÇyÄ0 - redÇ|
ÇyÄ1 - greenÇ|
ÇyÄ2 - blueÇ|
ÇyÄ3 - pattern_# (1-38; 1 - solid on; 20 - solid off)Ç| 

ÇpÄColor intensities range from 0 (none) to 255 (full).Ç|

ÇxÄSEE ALSO: Åusescreen, drawlineÇ| 1 ls

ÇhÅfindÇ| mÄkey Åfind ÄobjÇ|

ÇpÄsearches  for  ÑkeyÄ in the current vocabulary,  which is defined  by  the 
Ädictionaries  currently  on the dictionary stack.  ÑFindÄ begins  with  the 
Ätopmost  dictionary  and  proceeds  towards  the  bottom  of  the  stack, 
Äreturning  on the operand stack the first object found to  be  associated 
Äwith the ÑpassiveÄ name Ñkey.Ä If ÑkeyÄ is not found, an error is executed.

ÑFindÄ  looks up ÑkeyÄ in exactly the same manner as the executive  looks  up 
Äactive  names that it encounters during execution,  but it transfers  the 
Äassociated  object  to  the  operand stack  rather  than  executing  that 
Äobject.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ/average { add 2 div } defÇ|
ÇyÄ/average find => { add 2 div }Ç|
ÇyÄ5 10 average => 7.5Ç|
ÇyÄ/x 20 defÇ|
ÇyÄx => 20Ç|

ÇpÄLine  2 returns the body of a procedure on the operand stack,  and  thus 
Ämakes it amenable to modification or other manipulations by the  program. 
ÄNote  that  reference  to the active name of  the  procedure  immediately 
Äinvokes  that  procedure (line 3) and does ÑnotÄ present it  on  the  stack 
Älike, e.g., a numeral object (line 5). This asymmetry reflects the common 
Äusage  of  these objects:  calling the name of a procedure  or  operator 
Äeffects execution,  whereas,  with other objects, the object is pushed on 
Äthe operand stack.Ç|

ÇxÄSEE ALSO: ÅgetÄ, ÅknownÇ| 1 ls

ÇhÅfinddirÇ| mÄ0 0 (volume:)Ñ ÅfinddirÄ volid diridÇ| 1 ls
Ä          ÇmÄvolid pardirid (:dir) ÅfinddirÄ volid diridÇ|

ÇpÄfinds volume and directory identifiers needed by other file system operators. 
ÄThe first form of usage looks up the volume identifier of a volume known by Äname; it returns as directory identifier that of the volume's root directory, Äwhich is '2'. Volumes of the Apple file system have negative identifiers that Äare decrementd in the order in which volumes are mounted (the boot volume is Äalways -1). Positive volume identifiers are used by file systems directly Äadministrated by the D machine and not accessible through the Apple operating Äsystem (e.g. a disk attached to the laser printer). The second form of usage Ädetermines a directory identifier starting from a volume and some directory Älocated between the root and the searched directory using a partial path Ästring.Ç|

ÇxÄSEE ALSO: Åfindfiles, getvolumesÇ|
ÇhÅfindfilesÇ| mÄvolid dirid (template) list†1Ä string ÅfindfilesÄ list†2Ä boolÇ|

ÇpÄscans  the  disk  directory specified by ÑvolidÄ and ÑdiridÄ for filenames matchingÄ Ñtemplate Ä(which may include one or several '*' wildcard characters). Ñlist§1Ä and ÑstringÄ provide buffers for constructing a list of matching files; if these Äbuffers cannot hold all matching files, ÑboolÄ is true, else false. The filelist Ñlist§2Ä contains one list object for each file, whose elements are the file name Äand file name extension (strings), data fork and resource fork lengths Ä(integers), attribute (integer), and a list of day, month, year, hour, and Äminute referring to the time of file creation. The file attributes are in Apple Änotation (e.g., mask 16: directory). Entries in the filelist are automatically  Äsorted  by three keys (in descending order):   (1)  first  directories,  then  Äordinary  files,  (2) 
Äfilename extensions (alphabetically), and (3) filenames (alphabetically).

ÄThe  ÑstringÄ operand is used for storing filename and  extension  strings, 
Äand  the  ÑlistÄ operand accepts the main list and secondary lists  of  the 
Ätable. Ñlist 
Äand  ÑstringÄ  need to be dimensioned to hold the expected number  of  file 
Äentries;   if  one  of  these  dimensions  is  insufficient,   only   the 
Äaccommodated  subset of files is returned (this is indicated by ÑboolÄ).  Each 
Äfile  entry  consumes  7 objects of ÑlistÄ and 74  bytes  of  ÑstringÄ.  The 
Äcomposite objects receiving the file directory need to reside in internal 
ÄVM.Ç|

ÇxÄSEE ALSO:Å readfileÄ, ÅwritefileÄ, ÅrenamefileÄ, ÅdeletefileÇ| 1 ls

ÇhÅfloorÇ| mÄnum ÅfloorÄ numÇ| 1 ls
Ç       mÄarray ÅfloorÄ arrayÇ|

ÇpÄreturns the floor (i.e. the nearest integer value smaller than the operand) of Äa numeral, or replaces all elements of an array by their floor values returning Äthe array object. The numerical type of the result is that of the operand. An ÑundefinedÄ operand value produces an ÑundefinedÄ result value.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ1.45 floor => 1.0Ç| 1 ls

ÇxÄSEE ALSO: ÅceilÇ| 1 ls

ÇhÅforÇ| mÄinitial step limit proc ÅforÄ --Ç|

ÇpÄexecutes ÑprocÄ repeatedly,  passing it a sequence of numeral values  from 
ÑinitialÄ  by  steps of ÑstepÄ to ÑlimitÄ.  ÑForÄ maintains an  internal  control 
Ävariable,  which it first sets toÑ initialÄ. At the beginning of each cycle 
Ä(including  the first),  Ñfor Äcompares the control variable with  the  the 
Ätermination value ÑlimitÄ;  if ÑlimitÄ has not been exceededÑ,  Äit pushes  the 
Äcontrol variable on the operand stack,  executeÑs proc,Ä  adds ÑstepÄ to  theÑ 
Äcontrol variable, and begins a new cycle. If the ÑlimitÄ has been exceeded, 
Äexecution resumes with the object in normal sequence after ÑforÄ.Ç|

ÇpÄThe  termination  condition  depends on the sign of  ÑstepÄ.  If  ÑstepÄ  is 
Äpositive,  termination  occurs when the control variable is greater  than 
ÑlimitÄ.  If Ñstep Äis negative, termination occurs when the control variable 
Äis smaller tha ÑlimitÄ.  If ÑinitialÄ itself meets the termination condition, 
ÑforÄ  does not executeÑ procÄ at all.  If ÑprocÄ  executes  ÑexitÄ,  termination 
Äoccurs regardless of the state of the control variable.Ç|

ÇpÄThe value of ÑprocÄ needs to reside in internal VM.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ0 1 5 { } for => 0 1 2 3 4 5Ç|
ÇyÄ1 2 1 10 {mul} for => 10!Ç|

ÇxÄSEE ALSO:Å forallÄ, ÅrepeatÄ, ÅloopÄ, ÅexitÇ| 1 ls

ÇhÅforallÇ| mÄarray proc ÅforallÄ --Ç| 1 ls
Ç         mÄlist proc ÅforallÄ --Ç| 1 ls
Ç         mÄdict procÅ forallÄ --Ç|

ÇpÄapplies ÑprocÄ to each element of a composite object. If that object is an 
ÑarrayÄ  or ÑlistÄ,  ÑforallÄ starts with the element at index 0,  pushes  that 
Äelement on the operand stack, executes ÑprocÄ, and proceeds so sequentially 
Äthrough  all elements.Ç|

ÇpÄIf  the composite object is a dictionary,  ÑforallÄ pushes first  the  key, 
Äthen the associated object,  and executes ÑprocÄ for that entry  pair.  The 
Äsequence in which entry pairs are processed is arbitrary, and new entries 
Äcreated  through the execution of ÑprocÄ may or may not be included in  the 
Äenumeration.Ç|

ÇpÄIf  the  length  of the composite object is zero or if the  object  is  a 
Ädictionary with no used entries,  ÑforallÄ does not execute ÑprocÄ at all. If 
ÑprocÄ invokes the ÑexitÄ operator, Ñforall Äterminates prematurely.Ç|

ÇpÑdict,  list,Ä ÑarrayÄ, and ÑprocÄ values must be in internal VM.Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄ0 <w 3 6 9> {add}Ñ Ä=> 18Ç|
ÇyÄ/mean { dup 0.0 exch {add} forall exch length div } defÇ|
ÇyÄ/x <s 1.1 1.5 1.7 1.4 1.3 1.25> defÇ|
ÇyÄx mean => 1.375Ç|

ÇpÄLine  2  defines  a  procedure that calculates the  ÑsingleÄ  sum  of  all 
Äelements in an operand array (or list of numerals), divides the number of 
Äelements into the sum, and returns the mean thus computed. Note that ÑmeanÄ 
Ätakes  any  numeral type,  but does its calculations  always  in  ÑsingleÄ, 
Äbecause the pivotal operand of the ÑaddÄ operation is ÑsingleÄ.Ç|

ÇxÄSEE ALSO: ÅforÄ, ÅrepeatÄ, ÅloopÄ,Å exitÇ| 1 ls

ÇhÅfromboxÇ| mÄbox Åfrombox ÄrootÇ|

ÇpÄcopies  the object tree contained in the external ÑboxÄ into the  internal 
ÄVM  and  returns the root object of the internal  tree.  An  object  tree 
Äcomprises  the  value  of  the root object  and  of  all  objects  nested 
Ätherein.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄSavedPrograms /MyProg get frombox userdict /MyProg putÇ|

ÇpÄrefers  to  a  dictionary of saved programs to find  a  box  object  and 
Äretrieves  the  contents of that box.  The root object of  the  retrieved 
Äobject tree is included into the user dictionary.Ç|

ÇxÄSEE ALSO:Å toboxÇ| 1 ls

ÇhÅfromconsoleÇ| mÄstring ÅfromconsoleÄ substringÇ|

ÇpÄreads  a  phrase from the console screen of the virtual terminal  into 
ÑstringÄ  and  pushes  the  initial  substring of ÑstringÄ  that   received 
Ächaracters  on the operand stack.  ÑfromconsoleÄ waits for the operator  to 
Äenter  a  complete phrase (but allows other contexts, like screen drawing Äprocedures, to be executed while it is waiting for a phrase). If  the 
Äconsole screen holds several phrases (because the  operator 
Ähas typed ahead),  phrases are returned one for each instance of ÑfromconsoleÄ.Ç|

ÇpÄThe value of ÑstringÄ has to reside in internal VM.Ç|

ÇxÄSEE ALSO: Åtoqueue, toconsoleÇ| 1 ls

ÇhÅgeÇ| mÄnum†1Ä num†2Ä ÅgeÄ boolÇ|

ÇpÄtakes  two operands from the operand stack and pushes the boolean  value 
ÑtrueÄ if the first operand is larger than or equal to the second (topmost) 
Äoperand,  ÑfalseÄ otherwise.  Both operands have to be numerals, but may be 
Äof any types (all operands are converted to ÑdoubleÄ before they are compared).Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄ3 2 ge => trueÇ|
ÇyÄ1.2 2 ge => falseÇ|
ÇyÄ-5 -5 ge => trueÇ|

ÇxÄSEE ALSO: ÅeqÄ, ÅneÄ, ÅgtÄ, ÅleÄ, ÅltÇ| 1 ls

ÇhÅfromtextscreenÇ| mÄscreen# stringbuf ÅfromtextscreenÄ substringÇ|

ÇpÄsaves a copy of the text contained in the text memory of a text screen into the
Ä initial ÑsubstringÄ of Ñstringbuf.Ä If the screen operates in the word-processing Ämode, the copy contains escape sequences encoding for the word-processing Äfeatures used in the text.Ç|

ÇxÄSEE ALSO: Åtotextscreen, maketextscreen, textscreenÇ|
ÇhÅgetÇ| mÄarray index ÅgetÄ numÇ| 1 ls
Ç      mÄlist index ÅgetÄ anyÇ|Å Ç1 ls
Ç      mÄdict key ÅgetÄ anyÇ|

ÇpÄgets a single element from the value of an array,  list,  or dictionary. 
ÄIf the first element is anÑ arrayÄ or ÑlistÄ,  the second operand is expected 
Äto be a numeral in the range between 0 and n-1,  where n is the length of 
Äthe composite object.  If the first operand is a dictionary,  the  second 
Äoperand  is expected to be a ÑpassiveÄ name;  ÑgetÄ looks up the name in  the 
Ädictionary and returns the associated object on the stack.Ç|

ÇpÄThe  composite  source  object  must be located  in  internal VM.Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄ<b 1 2 3> 2 get => 3Ç|
ÇyÄ[ /a /b /c ] 0 get => /aÇ|
ÇyÄ(abcdefg) 4 get => 145Ç|
ÇyÄsystemdict /add get => Ñoperator 'add'Ç|

ÇxÄSEE ALSO: ÅputÄ, ÅgetintervalÇ| 1 ls

ÇhÅgetdateÇ| mÄ-- ÅgetdateÄ month day yearÇ|

ÇpÄpushes  three numerals representing the system date in terms  of  month, 
Äday, and year on the operand stack.Ç|

ÇxÄSEE ALSO: ÅsetdateÄ, ÅgettimeÇ| 1 ls

ÇhÅgetintervalÇ| mÄarray index count Ågetinterval ÄsubarrayÇ|Ä Ç1 ls
Ç              mÄlist index count ÅgetintervalÄ sublistÇ|

ÇpÄcreates  a  new  array  or list object  whose  value  consists  of  some 
Äsubsequence  of the original array or list.  The subsequence consists  of 
ÑcountÄ  elements starting at the specified ÑindexÄ in the original ÑarrayÄ  or 
ÑlistÄ.  The elements in the subsequence are shared between the  original 
Äand  new objects.Ç  ÄThe elements of the new composite object  are  indexed 
Äfrom 0 through ÑcountÄ-1.Ç|

ÇpÄThe  parent composite object can reside in internal or external  VM.  If 
ÑgetintervalÄ is applied to an ÑexternalÄ byte array, ÑindexÄ and ÑcountÄ have to 
Äbe even numbers.Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄ(abcdefg) 3 2 getinterval => (de)Ç|

ÇxÄSEE ALSO: Åparcel, copy

ÇhÅgetpathÇ| mÄvolid dirid string ÅgetpathÄ (dir_path)Ç|

ÇpÄinquires the path of a directory and returns it in a substring of Ñstring.Ä PathsÄ typically are inquired for informative purposes, as directories are more Äconcisely specified by Ñvolid, diridÄ.Ç|

ÇxÄSEE ALSO: ÅfinddirÇ| 1 ls

ÇhÅgettimeÇ| mÄ-- ÅgettimeÄ hour minute secondÇ|

ÇpÄreturns  the host systems time of day in three numerals on  the  operand 
Ästack.  The hour is given in the 0-24 h notation,  and only full  seconds 
Äare indicated.Ç|

ÇxÄSEE ALSO: ÅgetdateÇ| 1 ls

ÇhÅgetvolumesÇ| mÄlist Ågetvolumes ÄsublistÇ|

ÇpÄinquires the currently mounted file volumes and saves their identifiers in an Äinitial ÑsublistÄ of ÑlistÄ. Volume identifiers of the Apple file systems are 
Änegative and decrease in the order of mounting (they are permanent only for the Äduration of a session). Identifiers belonging to non-Apple file systems are Äpositive (e.g. a disk attached to the laser printer).Ç|

ÇxÄSEE ALSO: Åfinddir, findfiles, evmsÇ|

ÇhÅgtÇ| mÄnum†1Ä num†2Ä ÅgtÄ boolÇ|

ÇpÄpops  two numerals from the operand stack and pushes the  boolean  value 
ÑtrueÄ if the first numeral is arithmetically larger then the second, Ñfalse 
Äotherwise.  Operands can be of any types; their values are converted to ÑdoubleÄ Äbefore they are compared.Ç|

ÇxÄSEE ALSO:Å geÄ, ÅltÄ, ÅleÄ, ÅeqÄ, ÅneÇ| 1 ls

ÇyÅhaltÇ| mÄ-- ÅhaltÄ --Ç|

ÇpÄsuspends execution of the current context. ÑhaltÄ is equivalent to an endless Äloop that attends to the console and submits each entered console phrase to Äimmediate execution. It allows you to investigate the D machine state following 
Ädetection of an error or following a command/escape interrupt entered on the Äconsole.Ç ÄThe operation of the ÑhaltÄ loop is terminated by ÑcontinueÄ,Ñ stopÄ, or ÑabortÄ.Ç|

ÇxÄSEE ALSO: Åcontinue, stop, abortÇ|

ÇhÅifÇ| mÄbool proc ÅifÄ --Ç|

ÇpÄremoves both operands from the operand stack, then executes ÑprocÄ if ÑboolÄ 
Äis ÑtrueÄ.  Ñif Äitself does not return objects on the stack, but ÑprocÄ may do 
Äso.Ç ÄThe value of ÑprocÄ has to be in internal VM.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ/x <w 3 6 2 0 -6 8 9 > defÇ|
ÇyÄx 0 getÇ|
ÇyÄx { 2 copy lt { exch } if pop } forall => 9Ç|

ÇpÄThis  finds  the maximum of an array.  Line 2 seeds an  arbitrary  array 
Äelement as the running maximum (top element of the stack).  Line 3  works 
Äthrough all array elements, comparing each element to the running maximum 
Äand passing on the larger of the two values.  The comparison is done with 
Äa copy of the two values; the original values are exchanged such that the 
Älarger value is below the smaller one,  and the smaller value is  popped, 
Äleaving behind the new running maximum.Ç|

ÇpÄThis  is  also  an example of advanced stack usage.  The  code  is  very 
Äcompact,  but its effect is not obvious from superficial reading.  Clever 
Ästack use,  obviously,  can turn into dangerous acrobatics.  The  largest 
Äsave number of joggled stack elements depends on the trick,  but you  may 
Äconsider four an absolute upper limit.Ç|

ÇxÄSEE ALSO: ÅifelseÇ| 1 ls

ÇhÅifelseÇ| mÄbool proc†1Ä proc†2Ä ÅifelseÄ --Ç|

ÇpÄremoves all three operands from the stack,  then executes Ñproc§1Ä if  Ñbool 
Äis ÑtrueÄ,  or Ñproc§2Ä if ÑboolÄ is ÑfalseÄ.  ÑifelseÄ  does not return objects  on 
Äthe stack, but the executed procedure may do so. The values of both Ñproc§1Ñ 
Äand Ñproc§2Ä have to be in internal VM.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄtrue {(yes)} {(no)} ifelse => (yes)Ç|

ÇxÄSEE ALSO:Å ifÇ| 1 ls

ÇhÅindexÇ| mÄany†nÄ..any†0Ä n ÅindexÄ any†nÄ..any†0Ä any†nÇ|

ÇpÄremoves  the topmost element (a non-negative numeral) from  the  operand 
Ästack,  then  finds the stack element that has ÑnÄ other element on top  of 
Äit, and pushes a copy of that element onto the stack.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ6 (no) 7 3 9 true null 3 index => 6 (no) 7 3 9 true null 3Ç|
ÇyÄ8 7 6 0 index => 6Ç|

ÇxÄSEE ALSO: ÅdupÄ,Å copyÄ, ÅrollÇ| 1 ls

ÇhÅinitiateÇ| mÄcid lun ÅinitiateÄ rootobj eVMidÇ|

ÇpÄpops  the numeral objects specifying a SCSI controller (ÑcidÄ)  and  logic 
Äunit  number (Ñlun) Äfrom the stack and inspects the medium present in  the 
Ädrive.  If the medium is an eVM, it is initiated for access, and the root 
Äobject and the identifier of the eVM are pushed on the stack.  If not, an 
Äerror  results.  This  eVM  can thenceforth be referred  to  through  its 
Äidentifier.Ç|

ÇxÄSEE ALSO: Årelease, evmstatus, evms, update, externalÇ| 1 ls

ÇhÅknownÇ| mÄdict key ÅknownÄ boolÇ|

ÇpÄreturns  the boolean value ÑtrueÄ if ÑdictÄ contains an entry whose  key  is 
ÑkeyÄ,  otherwise returns ÑfalseÄ. ÑDictÄ needs not be on the dictionary stack, 
Äbut has to be in internal VM.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ/adict 3 dict defÇ|
ÇyÄadict /anumber 17 putÇ|
ÇyÄadict /anumber known => trueÇ|
ÇyÄadict /bnumber known => falseÇ|

ÇxÄSEE ALSO: ÅgetÄ, ÅfindÇ| 1 ls

ÇhÅleÇ| mÄnum†1Ä num†2Ä Åle ÄboolÇ|

ÇpÄtakes  two numerals from the operand stack and pushes the boolean  value 
ÑtrueÄ  if  the first numeral is less than or equal to  the  second,  ÑfalseÄ 
Äotherwise. Opreands can be of any types; their values are converted to Ñdouble Äbefore they are compared.Ç|

ÇxÄSEE ALSO: ÅltÄ, ÅgeÄ, ÅgtÄ, ÅeqÄ, ÅneÇ| 1 ls

ÇhÅlengthÇ| mÄarray ÅlengthÄ nÇ| 1 ls
Ç         mÄlist ÅlengthÄ nÇ| 1 ls
Ç         mÄdict ÅlengthÄ nÇ| 1 ls
Ç         mÄbox ÅlengthÄ nÇ|

ÇpÄreturns the number of elements in ÑarrayÄ or ÑlistÄ,  or the maximal  number 
Äof key/object pairs in ÑdictÄ, or the number of bytes occupied by ÑboxÄ.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ/mydict 5 dict defÇ|
ÇyÄmydict length => 5Ç|
ÇyÄ[] length => 0Ç Ñ(a list of zero length)Ç|

ÄSEE ALSO: ÅusedÄ, ÅarrayÄ, ÅlistÄ, ÅdictÄ, ÅearrayÄ, ÅelistÄ, ÅedictÄ, ÅtoboxÇ| 1 ls

ÇhÅlgÇ| mÄnum†1Ä ÅlgÄ num†2Ç| 1 ls
Ç     mÄarray†1Ä ÅlgÄ array†1Ç|

ÇpÄcalculates  the common logarithm (base 10) of the operand.  Any type  of 
Änumeral type is accepted; the value is converted to ÑdoubleÄ prior to computing Äthe logarithm; the result is converted back to the type of the operand.Elements Äof an  array  are 
Äreplaced by their logarithms,  and the array is pushed  back 
Äon the operand stack. The value of Ñarray§1Ä has to be in internal VM.Ç|

ÇpÑLgÄ passes ÑundefinedÄ operand values on to the result, and produces Ñan 
ÑundefinedÄ result from a zero or negative operand value.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ100 lg => 2.0Ç|
ÇyÄ<s 10 1000.0 -200.0> lg => <s 1.0 3.0 *>Ç|

ÇxÄSEE ALSO: ÅlnÄ, ÅexpÇ| 1 ls

ÇhÅlistÇ| mÄn ÅlistÄ listÇ|

ÇpÄpops  the non-negative numeral ÑnÄ from the stack,  creates a list  for  a 
Äcapacity  of ÑnÄ objects,  initializes all value elements to ÑnullÄ  objects, 
Äand pushes that ÑlistÄ on the operand stack. The list length, Ñn,Ä is limited 
Äonly  by the free capacity of the VM.  The value of ÑlistÄ is  placed  into 
Äinternal VM.Ç|

ÇxÄSEE ALSO: Å[ ]Ä, ÅarrayÄ,Å dictÄ, ÅelistÇ| 1 ls

ÇhÅlnÇ| mÄnum ÅlnÄ numÇ| 1 ls
Ç     mÄarray ÅlnÄ arrayÇ|

ÇpÄcalculates  the natural logarithm (base e) of the operand.  Any type  of 
Änumeral operand is accepted; it is converted to Ñdouble Äbefore the logarithm is Äcomputed; the result is converted back to the type of the operand. Elements of Äan array are replaced by their logarithms,  and the array is pushed  back 
Äon the operand stack. The value of Ñarray§1Ä has to reside in internal VM.Ç|

ÇpÑLnÄ passes ÑundefinedÄ operand values on to the result, and will produce an 
ÑundefinedÄ result from a zero or negative operand value.Ç|

ÇxÄSEE ALSO:Å lgÄ, ÅpwrÇ| 1 ls

ÇhÅloopÇ| mÄproc ÅloopÄ --Ç|

ÇpÄrepeatedly executes ÑprocÄ until Ñproc Äexecutes the ÑexitÄ operator, at which 
Äpoint  execution resumes at the object next in sequence after  the  ÑloopÄ. 
ÄControl also leaves ÑprocÄ when a ÑstopÄ or ÑabortÄ operator is executed or  if 
Äa grammatical error is detected.Ç|

ÇpÄIf none of these events ever happens in ÑprocÄ,  an infinite loop results, 
Äwhich may be broken only by action initiated from ÑinterruptÄ (see  chapter 
Ä2.4).Ç|

ÇpÄThe value of ÑprocÄ has to reside in internal VM.Ç|

ÇxÄSEE ALSO:Å repeatÄ, ÅforÄ, ÅforallÄ,Å exitÄ, ÅstopÄ, ÅabortÇ| 1 ls


ÇhÅltÇ| mÄnum1 num2 ÅltÄ boolÇ|

ÇpÄtakes  two numerals from the operand stack and pushes the boolean  value 
ÑtrueÄ if the first numeral is less than the second, ÑfalseÄ otherwise.† ÄAll numeral Ätypes are acceptable and converted to Ñdouble Äbefore their values are compared.Ç|

ÇxÄSEE ALSO: ÅleÄ, ÅgeÄ, ÅgtÄ, ÅeqÄ, ÅneÇ| 1 ls

ÇhÅmakegraphscreenÇ| mÄscreen# left top width height screendict ÅmakegraphscreenÄ --Ç|

ÇpÄcreates a graphical screen on the virtual terminal. Graphical screens can be 
Älocated in the central area of the screen (location and size then are as Äspecified in Ñtop,..,heightÄ, in units of pixels), or they occupy a fixed area Äalong the bottom of the screen (for use by menus, specified by giving zero Ävalues for the coordinate and dimension parameters). The created screen is Äassociated with a Ñscreen# Ä in the range 1-9 (these numbers can be used randomly;Ä screen 0 is permanently associated with the console screen). If a screen Äalready existed under Ñscreen#Ä, it is discarded before the new screen is set up.Ç|

ÇpÄThe contents of graphical screens need to be drawn using a procedure written inÄ D. Mouse clicks over the screen also are responded to by code contained in a D Äprocedure. The execution of these procedures is scheduled automatically by the DÄ mill (you need not poll the VT for such requests).Ñ ÄThe respective procedures Äare expected to be available under the names 'drawscreen' and 'mouseclick' in ÑscreendictÄ. When during the lifetime of the screen, the mill recognizes an eventÄ that requires a response by one of these procedures, it pushes ÑscreendictÄ on Äthe dictionary stack and executes the respective active name. Ñdrawscreen Äor ÑmouseclickÄ draw the screen content or respond to the mouse and close up by Äpopping ÑscreendictÄ from the dictionary stack.Ç|

ÇxÄSEE ALSO: Åremovescreen, maketextscreen, usescreen, showscreenÇ|

ÇhÅmaketextscreenÇ| mÄscreen# #rows dialog wp ÅmaketextscreenÄ --Ç|

ÇpÄcreates a text screen and associates it with a Ñscreen# Äin the range of 1-9 Ä(these numbers can be used randomly; screen 0 is permanently associated with theÄ console screen). If a screen already existed under Ñscreen#Ä, it is discarded Äbefore the new screen is set up. Text screens are of fixed location and Ädimension. With the screen, a memory for holding Ñ#rowsÄ text rows of 80 Ächaracters is reserved in VM space. The booleans, ÑdialogÄ and ÑwpÄ, determine the Äbehavior of the screen. ÑdialogÄ selects between dialogue and editing behaviors. ÄThe text of dialogue screens can only be viewed, but cannot be modified from theÄ keyboard. Editing screens permit you to view and edit their text. This text Äeither  can be in plain ASCII format or can in addition contain word-processing Äenhancements; this distinction is made by the boolean, ÑwpÄ.Ç|

ÇxÄSEE ALSO: Åremovescreen, totextscreen, fromtextscreen, showscreenÇ|Ä 


ÇhÅmkactÇ| mÄany Åmkact ÄanyÇ|

ÇpÄconverts  ÑanyÄ object to an ÑactiveÄ object (i.e.  sets the  Ñactive/passiveÄ 
Äattribute of ÑanyÄ to ÑactiveÄ). ÑActiveÄ objects may be moved to the execution 
Ästack for execution.Ç|

ÇxÄSEE ALSO: ÅmkpassÄ,Å execÄ, ÅactiveÄ, ÅpassiveÇ| 1 ls

ÇhÅmakedirÇ| mÄvolid parentid (dirname) ÅmakedirÄ --Ç|

ÇpÄcreates a new file directoryÑ Äin the parent directory ÑparentidÄ in volume ÑvolidÄ.Ç|

ÇxÄSEE ALSO: ÅdeletedirÄ, ÅfinddirÇ| 1 ls

ÇhÅmkpassÇ| mÄany ÅmkpassÄ anyÇ|

ÇpÄconverts  any object to a ÑpassiveÄ object (i.e.  sets the  Ñactive/passiveÄ 
Äattribute  of  any  to  ÑpassiveÄ).Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄmyproc { lg ... } defÇ|
ÇyÄ/myproc find mkpass /myproc' nameÇ|
ÇyÄmyproc' 0 get => Ñoperator 'lg'Ç|
ÇyÄ/ln mkact myproc 0 putÇ|
ÇyÄmyproc => [ lg ... ]Ç|

ÄThis  example shows how a list object can be created to share  the  value 
Äwith  a  procedure  object.  Elements of the  procedure  value  then  are 
Äretrieved or replaced through references to that ÑaliasÄ list object.Ç  ÄThis 
Äconstruct  circumvents an asymmetry in the executive rules:  whereas  the 
Äreference to a name usually returns the associated object on the  operand 
Ästack,  reference  to  a  procedure  name causes  that  procedure  to  be 
Äexecuted.Ç|

ÇxÄSEE ALSO: ÅmkactÄ, ÅactiveÄ, ÅpassiveÇ| 1 ls

ÇhÅmkreadÇ| mÄany ÅmkreadÄ anyÇ|

ÇpÄrenders  ÑanyÄ  object  a ÑreadonlyÄ object,  i.e.  gives  that  object  the 
ÑreadonlyÄ attribute.  The value of ÑreadonlyÄ objects can only be retrieved; 
Äit cannot be modified. The effect of ÑmkreadÄ is irreversible.Ç ÄAn attempt 
Äto modify a ÑreadonlyÄ object results in an error.Ç|

ÇxÄSEE ALSO: ÅreadonlyÇ| 1 ls

ÇhÅmergeÇ| mÄdict†1Ä dict†2Ä ÅmergeÄ dict†1Ç|

ÇpÄDefines or re-defines all associations contained in Ñdict§2Ä also in Ñdict§1Ä. 
ÄThe values of  Ñdict†1Ä, Ñdict§2Ä can be located in internal or external eVM in 
Äany combination.Ç  ÑmergeÄ is the only operator for entering or changing the 
Ävalue of external dictionaries.Ç| 1 lsÄ 

ÇhÅmulÇ| mÄnum†1Ä num†2Ä ÅmulÄ numÇ| 1 ls
Ç      mÄarray†1Ä num ÅmulÄ array†1Ç| 1 ls
Ç      mÄarray†1Ä array†2Ä ÅmulÄ array†1Ç| 1 ls
Ç      mÄnum†1Ä array†2Ä ÅmulÄ numÇ|

ÇpÄmultiplies  two numerals  returning their product,  or  multiplies  all 
Äelements  of  Ñarray§1Ä by a numeral returning the  product  in  Ñarray†1Ä,  or 
Ämultiplies  the  elements of Ñarray§1Ñ Äwith the  corresponding  elements  of 
Ñarray§2Ñ Äreturning the products in Ñarray§1Ä, or multiplies a numeral with all Äelements of an array.Ç|

ÇpÄAll types of numeral values,  and mixed sets thereof,  are accepted and Äconverted to ÑdoubleÄ befor the multiplication. The result is returned in thetype Ä of  the  pivotal  operand. Values of array operands have to reside  in  Äinternal VM.Ç|

ÇpÑUndefined  Äoperand  values  are propagated  as  Ñundefined  Äproducts,  and Äarithmetical overflow produces Ñundefined Äproducts.Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄ17 4 mul => 68Ç|
ÇyÄ2.0 6 mul => 12.0Ç|
ÇyÄ2 2.5 mul => 4Ç|

ÇxÄSEE ALSO: ÅdivÇ| 1 ls

ÇhÅnameÇ| mÄany key ÅnameÄ --Ç|

ÇpÄassociates  ÑkeyÄ with ÑanyÄ object in the topmost modifiable dictionary  on 
Äthe dictionary stack.  If ÑkeyÄ is already present in that dictionary, ÑnameÄ 
Äsimply  replaces the associated object.  Otherwise,  ÑnameÄ creates  a  new 
Äentry  and  stores ÑanyÄ with it.  If the current  dictionary  carries  the 
ÑreadonlyÄ  attribute,  ÑnameÄ examines the dictionary below it,  and  so  on 
Äuntil a modifiable dictionary has been found;  the association is made in 
Äthat dictionary.Ç|

ÇpÄAnother operator,  ÑdefÄ, has exactly the same effect as ÑnameÄ, but expects 
Äits operands in the converse order.Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄ17 /x name Ñis equivalent to Ä/x 17 defÇ|
ÇyÄ5 /x name Ñis more concise than Ä5 /x exch defÇ|

ÇxÄSEE ALSO:Å defÄ, ÅputÇ| 1 ls

ÇhÅneÇ| mÄany†1Ä any†2Ä ÅneÄ boolÇ|

ÇpÄpops  two  objects from the operand stack and pushes the  boolean  value 
ÑtrueÄ if they are not equal,  ÑfalseÄ otherwise.  The operands have to be of 
Äthe same class.  Equality of simple objects requires that their values be 
Äthe  same,  of composite objects,  that they share the  same  value.  ÑneÄ, 
Ähence,  cannot  generally  serve  to compare the  contents  of  composite 
Äobjects,  like  strings.  When ÑneÄ compares numerals of  mixed  types,  it 
Äconverts then to Ñdouble Äbefore comparing their values.Ç|

ÇxÄSEE ALSO: ÅeqÄ, ÅltÄ, ÅleÄ, ÅgtÄ, ÅgeÇ| 1 ls

ÇhÅnegÇ| mÄnum ÅnegÄ numÇ| 1 ls
Ç      mÄarray† Åneg ÄarrayÇ|

ÇpÄnegates the arithmetical value of the top element of the operand  stack. 
ÄIf  that element is an array,  all elements of the array are negated  and 
Äthe array object is returned;  the array value has to reside in  internal 
ÄVM.  All numerical types are accepted and preserved. ÑUndefinedÄ operandvalues or Äarithmetical overflow in the back-conversion yield ÑundefinedÄ.Ç|

ÇxÄSEE ALSO: ÅabsÇ| 1 ls

ÇhÅnextobjectÇ| mÄVMid/obj ÅnextobjÄ objÇ|

ÇpÄGiven a non-zero numeral, ÑVMidÄ, ÑnextobjectÄ retrieves the first object defined Äin 
Äthe temporary section of an eVM (positive),  or the permanent section  of 
Äan  eVM  (negative),  or  the internal VM  (0).  Given  an  object,  ÑobjÄ, 
Ñnextobject Äretrieves the next object of the VM in which ÑobjÄ resides.  ÑobjÄ 
Äand  the  retrieved objects are parent composite objects.  The  order  of 
Äretrieval  is the order in which the objects were originally created  (VM 
Äor permanent eVM),  or the reverse order of creation (temporary eVM).Ç|  1 
Çls

ÇxÄEXAMPLE:Ç|
ÇyÄ0 { nextobject { _ } { exit } ifelse } loopÇ|
ÇyÄ... shows you any VM object in your machineÇ|

ÇpÄIn this example, the name '_' refers to a procedure that is introduced with the
Ä Ñstartup.dÄ file; '_' displays a description of the top element of the operand Ästack. The Ñloop Äprocedure is primed by pushing 0 on the operand stack; ÑnextobjectÄ, hence, starts the scan at the beginning of the VM. Since each Äretrieved object remains on the stack ('_' does not consume the displayed stack Äelement), the next loop iteration will present that object to ÑnextobjectÄ, Ädirecting ÑnextobjectÄ to retrieve the next VM object in the sequence of Äcreation.Ç|
ÇxÄSEE ALSO:Åsave, restore, discard, vmstatus, evmstatusÇ|

ÇhÅnotÇ| mÄbool ÅnotÄ boolÇ| 1 ls
Ç      mÄnum ÅnotÄ numÇ|

ÇpÄreturns  the logical negation of a boolean operand or the bitwise  one's 
Äcomplement of the binary representation of a numeral operand.Ç|

ÇxÄSEE ALSO: ÅandÄ, ÅorÄ, ÅxorÄ, ÅnotÇ| 1 ls

ÇhÅnullÇ| mÄ-- ÅnullÄ nullÇ|

ÇpÄpushes a null object on the operand stack. Note that execution of an active Ä'null' object does nothing.Ç|

ÇxÄSEE ALSO: ÅlistÇ| 1 ls

ÇhÅnumberÇ| mÄstring index width num format ÅnumberÄ string indexÇ|

ÇpÄconverts  the  value of ÑnumÄ from its binary representation into  a  text 
Ästring, which is appended to ÑstringÄ starting at element ÑindexÄ (the value
Äof Ñstring Ähas to reside in internal VM). The Ñwidth operand Ädetermines the 
Äwidth  in bytes of the new string (by its absolute  value;  an  Ñundefined 
Ävalue  selects  the  minimal  necessary width)  and  chooses  among  left 
Äadjustment  (negative  sign) or right  adjustment  (positive  sign);  the 
Ästring  is  padded with spaces.  The sign of the ÑformatÄ  operand  selects 
Äbetween    fixed-point    (negative)   or    floating-point    (positive) 
Ärepresentation  of  ÑnumÄ,  the  value of Ñformat Äspecifies  the  number  of 
Äfractional   digits.   An  ÑundefinedÄ  ÑformatÄ  value   selects   automatic 
Äformatting,  and  the  value of ÑformatÄ is ignored if ÑnumÄ is  an  integer. 
ÑNumberÄ pushes the original ÑstringÄ and the updated ÑindexÄ.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄline 80 (b) array defÇ|
ÇyÄ/x 177 defÇ|
ÇyÄline 0 * (\nx=) textÇ|
ÇyÄ* x * numberÇ|
ÇyÄ0 exch getinterval => (\nx=177)Ç|

ÇpÄA line buffer is set up and successively filled with text derived from a 
Ästring  and a numeral.  The last line creates a string object  comprising 
Äthe used part of the line buffer,  which,  e.g.,  could be written to the 
Äconsole screen by the ÑtoscrolledÄ operator.Ç|

ÇxÄSEE ALSO: Åtext

ÇhÅorÇ| mÄbool†1Ä bool†2Ä ÅorÄ bool†3Ç| 1 ls
Ç     mÄnum†1Ä num†2Ä ÅorÄ num†3Ç|

ÇpÄIf the operands are booleans,  ÑorÄ returns their logical disjunction.  If 
Äthe operands are numerals, ÑorÄ returns the bitwise 'inclusive or' of their 
Äbinary  representations.  Numerals  are converted to ÑlongÄ  prior  to  the 
Äoperation; their result is ÑlongÄ.Ç|

ÇxÄSEE ALSO: ÅandÄ, ÅxorÄ, ÅnotÇ| 1 ls

ÇhÅparcelÇ| mÄarray†1Ä n type ÅparcelÄ subarray†1Ä array†2Ç|

ÇpÄcreates the new array object Ñarray§2Ä about an initial subarray of  Ñarray†1Ä. 
ÄThe  new  array is of length ÑnÄ and the specified numeral ÑtypeÄ  (a  string 
Ästarting  with  a  ÑtypeÄ letter).  ÑParcelÄ returns  the  remainder  of  the 
Äoriginal array as Ñsubarray§1Ñ Äand the new array as Ñarray§2Ñ.Ä  If the types of 
Äthe  original and new arrays are different,  ÑparcelÄ aligns the  resulting 
Äarrays  as required by the host's addressing  capabilities;  this  occurs 
Äonly  where  necessary (e.g.  successive byte arrays are  never  padded). 
ÑParcelÄ works with arrays both in internal or external VM.Ç|

ÇxÄSEE ALSO: ÅarrayÄ, ÅctypeÇ| 1 ls

ÇhÅparentÇ| mÄobj ÅparentÄ boolÇ|

ÇpÄreturns ÑtrueÄ if ÑobjÄ is a parent composite object, else ÑfalseÄ.Ç|

ÇxÄSEE ALSO: ÅexternalÇ| 1 ls

ÇhÅpopÇ| mÄany Åpop Ä--Ç|

ÇpÄremoves the top element from the operand stack and discards it.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ2 4 6 pop => 2 4Ç|
ÇyÄ1 2 pop pop => --Ç|

ÇxÄSEE ALSO: Åclear, dupÇ|Ä Ç1 ls

ÇhÅportsessionÇ| mÄ[params] /out /in /port ÅportsessionÄ boolÇ|

ÇpÄopens a session on a bi-directional ÑportÄ. Current ports areÇ|
ÇyÄserialportAÇ Ä(Modem)Ç|
ÇyÄserialportBÇ Ä(Printer)Ç|
ÇyÄPAPport (Laserprinter via Ethertalk)Ç|
ÇpÑportsession Äcreates a transparent polling loop for monitoring the port, and
Äinvokes the port service procedures associated with the names given in the
Äoperands, /in and /out. Procedure ÑoutÄ, is executed when the port is readyÄ to transmit data (from the D machine to a target). Ñout Äshould be associated Äwith a procedure that submits a string array as the top element of the operand Ästack; if no data are to be transferred, a Ñnull Äobject is submitted, instead. ÄConversely, when a phrase of data has been received from the port, the active Äname,Ñ inÄ, is executed. ÑinÄ should be associated with a procedure that pops the Äreceived string submitted to it on the operand stack and consumes the data Äbefore it returns control. The names, ÑinÄ and ÑoutÄ, can be dynamically associated Äwith different procedures in order to implement complex transaction protocols. ÄWhile it serves the port,Ñ portsession Äalso permits the D mill to respond to Äother events that require the scheduling of D procedures (such as 'drawscreen' Ärequests). On the other hand, only one port session can be in progress at any Ätime, so port sessions on one or several ports cannot be interleaved (attempts
Ägive an error). The port session is terminated by executing ÑcloseportÄ, ÑstopÄ, or ÑabortÄ.Ç|

ÇpÄThe contents of the ÑparamsÄ list is port-specific. For the serial ports,
ÑparamsÄ is composed of:Ç|

ÇyÄ[ baudrate stopbits parityoption <b closebytes > <b receivebuffer > ]Ç|

ÇpÑbaudrateÄ values 0, 1,... select the default (9600), 1200, 2400, 4800, 9600,Ä 19200, 57600 baudrates. Ñstopbits Ävalues of 0, 1,.. select between the default Ä(1), 1, 1.5, or 2 stopbits. ÑparityoptionsÄ 0, 1,.. select between default (no Äparity), no parity, odd parity, or even parity. Any of the given Ñclosebytes Ä(up Äto 10 total) is considered as the terminating byte of a received phrase (e.g. Ä\n). The Ñreceivbuffer Äneeds to hold at least one full received string (whose Älength will depend on the device or your protocol); a string handed to ÑinÄ is a
Äsubstring of ÑreceivebufferÄ.Ç|

ÇpÄFor the PAP (Printer Access Protocol, specific to Apple printers) port, Ñparams Äspecifies:Ç|

ÇyÄ[ IP_address <b closebytes > <b receivebuffer >Ç|

ÇpÑIP_addressÄ is a long integer that specifies the 4-byte Internet address of the Äprinter. ÑclosebytesÄ and ÑreceivebufferÄ are as under the serial ports (see above).
ÄThe printer expects to receive PostScript code; it returns status information Äand messages initiated by the received PostScript instructions. Note that unlikeÄ serial ports the PAP port can transmit messages that contain any byte values Ä(thus there are no 'control' characters that are intercepted and interpreted by Äthe communication channel itself). You can use the operator ÑfindnodesÄ to locate Äprinters on the network (together with their IP addresses).Ç|ÇxÄEXAMPLEÇ|

ÇyÄ/sendbuf 80 /b array defÇ|
ÇyÄ/to { sendbuf fromconsole not { null } if } defÇ|
ÇyÄ/from { toconsole } defÇ|
ÇyÄ[ 0 0 0 (\n) 80 /b array ] /to /from /serialportA portsessionÇ|

ÇpÄThis example establishes a dumb terminal, which transmits keyboard phrases to
Äthe target and displays received text on the console. In the form shown,
Äterminal operation would require a 'command_esc' interrupt and 'closeport'
Äcommand (termination could be more elegantly initiated by a mouse click).Ç| 

ÇxÄSEE ALSO: Åcloseport, stop, abortÇ|Ä Ç1 ls

ÇhÅputÇ| mÄnum array index ÅputÄ --Ç| 1 ls
Ç      mÄany list index ÅputÄ --Ç| 1 ls
Ç      mÄany dict name ÅputÄ -- Ç|

ÇpÄpops  the  top three elements from the operand stack  and  replaces  the 
ÑarrayÄ  element at ÑindexÄ by the ÑnumÄeral,  or the ÑlistÄ element at ÑindexÄ  by 
ÑanyÄ  object,  or  associates the ÑnameÄ with ÑanyÄ objectÑ Äin  the  dictionary 
ÑdictÄ (replacing an existing association of ÑnameÄ by Ñany Äor creating a  new 
Äone for Ñname Äand ÑanyÄ).  ÑIndexÄ must be in the range 0 to n-1,  where n  is 
Äthe  length  of the destination array or list.  The  receiving  composite 
Äobject may reside in internal or external VM.Ç|

ÇxÄSEE ALSO: ÅgetÇ|


ÇhÅpwrÇ| mÄnum†1Ä num†2Ä ÅpwrÄ numÇ| 1 ls
Ç      mÄarray†1Ä num†2Ä ÅpwrÄ array†1Ç| 1 ls
Ç      mÄarray†1Ä array†2Ä ÅpwrÄ array†1Ç|

ÇpÄraises a  base† Ä(first operand) to a  power† Ä(second operand). All numeric types Äare accepted and converted to Ñdouble Äbefore computing the power; the result is Äconverted back to the type of the pivotal operand. With an array as the pivotal Ä operand,  all 
Äelements of that array are replaced by the power,  and the modified  array 
Äis returned on the stack.  A numeral used as the second operand is expanded to Äserve as 
Äexponent for all elements of an array.Ç|

ÇpÑPwrÄ returns Ñundefined Äwith ÑundefinedÄ operands or results (cave  zero 
Äor negative bases). The operands of ÑpwrÄ have to reside in internal VM.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ25 0.5 pwr => 5.0Ç|
ÇyÄ<s 1. 2. 3. 4.> 3 pwr => <s 1. 8. 27. 64.>Ç|Ä Ç1 ls

ÇxÄSEE ALSO: ÅsqrtÇ|Ä Ç1 ls

ÇhÅquitÇ| mÄ-- ÅquitÇ|

ÇpÄterminates  operation  of the D machine and returns control to  the  host 
Äoperating system.Ç| 1 ls

ÇhÅreadfileÇ| mÄvolid dirid (filename) string ÅreadfileÄ data_fork resource_forkÇ|

ÇpÄReads  the data and resource forks of the specified file into Ñstring  Äand  Äreturns the respective substrings. The resource fork is prefixed by 8 bytes that
Ä are lifted from the internal file specification and describe the nature and Äparent program of the file ('TEXTDDDD' is used in D text files).Ç|

ÇpÄThe values of the operands have to reside in internal VM.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ/run {Ç|
ÇyÄ  save /saved1 name
ÇyÄ  100000 /b array saved1 capsave
ÇyÄ  readfile pop mkact execÇ|
Çy  Äsaved1 restoreÇ|
ÇyÄ} defÇ|
ÇyÄ-1 3048 (myDprogram) run => Ñexecutes D code in file 'ÄmyDprogramÑ'Ç|
ÇpÄThe example defines a procedure that loads and executes the data fork of a 
Ädisk  file; the file buffer is removed from the VM after its contents have been Äused. The file is specified by volume, directory identifier, and its name.Ç|

ÇxÄSEE ALSO: Åwritefile, finddir, findfilesÇ| 1 ls

ÇhÅreadonlyÇ| mÄany ÅreadonlyÄ boolÇ|

ÇpÄpops  ÑanyÄ from the operand stack and pushes a boolean  object  indicating 
Äwhether ÑanyÄ carries the Ñread-onlyÄ attribute.Ç|

ÇxÄSEE ALSO: ÅmkreadÇ| 1 ls

ÇhÅreleaseÇ| mÄeVMid ÅreleaseÄ --Ç|

ÇpÄpops the numeral ÑeVMidÄ from the operand stack. Releases an external VM in 
Äuse by the D machine. Releasing an eVM that is not currently in use is not 
Äan error.Ç|

ÇxÄSEE ALSO:Å initiate, evms, evmstatus, updateÇ| 1 ls

ÇhÅremovescreenÇ| mÄscreen# Åremovescreen --Ç|

ÇpÄremoves the screen specified by the screen number (1-9). Screen 0 (console) 
Äcannot be removed. If the screen does not exist,Ñ removescreenÄ has no effect. If Äthe screen is a text screen, the text buffer of the screen (held in upper VM) isÄ freed, and the VM is re-packed. A ÑrestoreÄ operation that would remove the Ädictionary associated with a graphical screen needs to be preceded by a ÑremovescreenÄ operation for that screen.Ç|

ÇxÄSEE ALSO: Åmakegraphscreen, maketextscreenÇ| 1 ls

ÇhÅrenamefileÇ| mÄvolid dirid (oldname) (newname) ÅrenamefileÄ --Ç|

ÇpÄrenames a file in directory ÑdiridÄ of volume ÑvolidÄ from Ñoldname ÄtoÑ newname.Ç|

ÇxÄSEE ALSO: Ådeletefile, findfilesÇ| 1 ls

ÇhÅrepeatÇ| mÄn proc ÅrepeatÄ --Ç|

ÇpÄexecutes ÑprocÄ ÑnÄ times,  where n is a non-negative numeral. ÑRepeatÄ removes 
Äboth operands from the stack before executing ÑprocÄ for the first time.  If 
ÑprocÄ  executes the ÑexitÄ operator,  ÑrepeatÄ terminates  prematurely.  ÑRepeatÄ 
Äleaves no results of its own on the stack, but ÑprocÄ may do so.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ3 { 17 } repeat => 17 17 17Ç| 1 ls

ÇxÄSEE ALSO: Åfor, loop, forall, exitÇ| 1 ls

ÇhÅrestoreÇ| mÄsavebox ÅrestoreÄ --Ç|

ÇpÄreclaims VM space and optionally restores stack contents. The effects of ÑrestoreÄ depend on whether ÑsaveboxÄ was subjected to ÑcapsaveÄ.Ç|

ÇpÄIf ÑcapsaveÄ was not applied, ÑrestoreÄ checks whether any stacks hold any Ädiscardable objects or whether the dictionary of a graphical screen is Ädiscardable. If so, ÑrestoreÄ takes no action and signals an error. If not, ÑrestoreÄ removes from the internal VM all objects created following the ÑsaveÄ Äoperation that created ÑsaveboxÄ. The space freed by these objects is added to theÄ freespace of the VM. Stacks are ÑnotÄ modified (except for popping ÑsaveboxÄ).Ç|

ÇpÄIf ÑsaveboxÄ had been subjected to ÑcapsaveÄ, only objects created between the ÑsaveÄ operation that created ÑsaveboxÄ and the ÑcapsaveÄ operation that capped ÑsaveboxÄ Äwill be discarded from the internal VM. In addition, the dictionary and operand 
Ästack contents present during the Ñsave operation Äthat created ÑsaveboxÄ are Äretored.Ç|

ÇpÄIn any case, ÑrestoreÄ deletes from remaining internal dictionaries all Äassociations made to any discarded object, and replaces in remaining Äinternal lists all elements that represent discarded objects by ÑnullÄ objects.Ç|

ÇxÄEXAMPLE: see under ÅreadfileÇ|
ÇxÄSEE ALSO: Åsave, capsave, abortÇ| 1 ls
Ä 
ÇhÅrollÇ| mÄany†n-1Ä ..  any†0Ä n j ÅrollÄ any†(j-1) mod nÄ .. any†0Ä any†n-1Ä .. any†j mod 
†nÇ|

ÇpÄperforms  a  circular  shift of the objects Ñany§n-1Ä through  Ñany§0Ä  on  the 
Äoperand  stack by the amount ÑjÄ.  Positive ÑjÄ effects upward motion  on  the 
Ästack whereas negative ÑjÄ effects downward motion.Ç|

ÇpÑnÄ  must be a non-negative numeral.  The operand stack must provide  space 
Äfor at least ÑnÄ additional objects.Ç|

ÇpÄEach upward shift moves ÑnÄ elements on the stack up by one  position;  the 
Ätop  element then is the moved down into the vacant stack  position.  Each 
Ädownward  shift  removes the bottonmost of ÑnÄ elements from the  stack  and 
Äslides  the  other  Ñn-1Ä  top elements down  by  one  position;  the  stack 
Äelement  first  removed from the stack then is moved into the  vacant  top 
Äposition.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ(a) (b) (c) 3 1 roll => (c) (a) (b)Ç|
ÇyÄ(a) (b) (c) 2 -1 roll => (a) (c) (b)Ç|
ÇyÄ(a) (b) (c) 3 0 roll => (a) (b) (c)Ç|Ä Ç1 ls

ÇxÄSEE ALSO: Åexch, index, copy, popÇ| 1 ls

ÇhÅsaveÇ| mÄ-- ÅsaveÄ saveboxÇ|

ÇpÄcreates the internal box object ÑsaveboxÄ and stores in ÑsaveboxÄ the current Äcontents of the dictionary and operand stacks and a record of the current use of
Ä the internal VM. Pushes the Ñsave Äobject on the operand stack. The contents of ÑsaveboxÄ can be modified by ÑcapsaveÄ and be used to restore the saved VM and stackÄ states by ÑrestoreÄ.Ç|

ÇxÄSEE ALSO: Åcapsave, restoreÇ| 1 ls

ÇhÅscsi_kickÇ| mÄcid command timelimit Åscsi_kickÄ statusÇ|

ÇpÄinitiates a SCSI port transaction that does not include a data phase. The 
Änumeral ÑcidÄ (0-7) specifies the target controller,  the byte array ÑcommandÄ 
Äcontains the command descriptor block to be transmitted to the target, the 
Änumeral ÑtimelimitÄ gives a time limit for the operation to be completed Ä(positive: in msec's; negative: in usec's; 0: without timeout). The ÑstatusÄ Äreceived from the controller is returned (ok = 0).Ç|

ÇxÄSEE ALSO: Åscsi_read, scsi_write, initiate, release, updateÇ| 1 ls

ÇhÅscsi_readÇ| mÄmcid command timelimit data Åscsi_readÄ statusÇ|

ÇpÄinitiates a SCSI port transaction that involves a data transfer from  the 
ÄSCSI target to the D machine.  The numeral ÑcidÄ (0-7) specifies the  target 
Äcontroller,  the byte array ÑcommandÄ contains the command descriptor  block 
Äto be transmitted to the target,  the numeral ÑtimelimitÄ gives a time limit 
Äfor  the  operation to be completed (positive: in msec's; negative: in usec's; Ä0: without timeout). The ÑstatusÄ received from the controller is returned (ok = Ä0). The byte  array  ÑdataÄ receives the data block from the target (the  length  Äof ÑdatÄa determines the data block size).Ç|

ÇxÄSEE ALSO: Åscsi_kick, scsi_write, initiate, release, updateÇ| 1 ls

ÇhÅscsi_writeÇ| mÄmcid command timelimit data Åscsi_writeÄ statusÇ|

ÇpÄinitiates  a SCSI port transaction that involves a data transfer  from  D 
Ämachine  to the SCSI target.  The numeralÑ cidÄ (0-7) specifies  the  target 
Äcontroller,  the byte arrayÑ commandÄ contains the command descriptor  block 
Äto be transmitted to the target,  the numeral ÑtimelimitÄ gives a time limit 
Äfor  the  operation to be completed (positive: in msec's; negative: in usec's; Ä0: without timeout). The ÑstatusÄ received from the controller is returned (ok = Ä0). The byte  array  data receives the data block from the target (the  length  Äof data determines the data block size).Ç|

ÇxÄSEE ALSO:Å scsi_kick, scsi_read, initiate, release, updateÇ| 1 ls

ÇhÅshowscreenÇ| mÄscreen_# ÅshowscreenÄ --Ç| 

ÇpÄmakes ÑscreenÄ_#Ñ  Äthe  currently  displayed screen. Screens  other than the Äconsole screen (#0) must have been previously  created through the Ñmaketextscreen Äor ÑmakegraphscreenÄ operator.Ç|

ÇxÄSEE ALSO:Å maketextscreen, makegraphscreen, usescreenÇ| 1 ls

ÇhÅsearchÇ| mÄstring seek ÅsearchÄ Ñif found:Ä  post match pre true,  Ñelse  Ästring 
ÄfalseÇ|

ÇpÄlooks  for  the  first occurence of the string  ÑseekÄ  within  ÑstringÄ  and 
Äreturns results of this search on the oeprand stack. The topmost result is 
Äa boolean that indicates whether the search succeeded.Ç|

ÇpÄIf  ÑsearchÄ finds a subsequence of ÑstringÄ whose elements are equal to  the 
Äelements of ÑseekÄ,  it splits ÑstringÄ into three segments:  ÑpreÄ, the portion 
Äof ÑstringÄ preceding the match;  ÑmatchÄ,  the portion of ÑstringÄ that matches 
ÑseekÄ;  ÑpostÄ,  the remainder of ÑstringÄ.  It then pushes the string  objectsÑ 
ÑpostÄ,  ÑmatchÄ, and ÑpreÄ on rthe operand stack, followed by the boolean ÑtrueÄ. 
ÄAll three of these strings are substrings sharing intervals pof the  value 
Äof the original ÑstringÄ.Ç|

ÇpÄIf  ÑsearchÄ does not find a match,  it pushes the original Ñstring Äand  the 
ÄbooleanÑ falseÄ.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ(This is beautiful) (is) search => (This ) (is) ( beautiful) trueÇ|
ÇyÄ(This is akward) (awfull) search => (This is akward) falseÇ|

ÇxÄSEE ALSO:Å anchorsearch, tokenÇ| 1 lsÄ 

ÇhÅsinÇ| mÄnum ÅsinÄ numÇ| 1 ls
Ç      mÄarray ÅsinÄ arrayÇ|

ÇpÄreturns the sine of the operand value, which is interpreted to be in 
Äunits of radians. Any numeral or array type is accepted, and the result is Äreturned in the same type. With an array operand, the array elements are Äreplaced by their sines, and the array is pushed back on the stack. ÑUndefined Äoperand values yield an Ñundefined Äresult.Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄ0.0 sin => 0.0Ç|
ÇyÄ1.579796327 sin => 1.0.0Ç| 1 ls

ÇhÅsqrtÇ| mÄnum ÅsqrtÄ numÇ| 1 ls
Ç       mÄarray ÅsqrtÄ arrayÇ|

ÇpÄcomputes the square root of the operand value. Any operand type is accepted; Äthe result is returned in the same type. The elements of an array operand are Äreplaced by their square roots, and the array is pushed back on the stack.  ÑUndefined Äoperand values yield an Ñundefined Äresult, and an ÑundefinedÄ value is Äreturned also for a negative operand value.Ç|

ÇxÄSEE ALSO:Å pwrÇ|

ÇhÅstartÇ| mÄany ÅstartÄ --Ç|

ÇpÄpops the top object from the executions stack and pushes ÑanyÄ (any  active 
Äobject)  onto the execution stack.  ÑstartÄ thus swaps control  between  the 
Äcurrently  executing  composite object and  ÑanyÄ.  Typically,  the  removed 
Äobject is a string, and Ñany Äis a procedure defined during the execution of 
Äthat string. This effects transfer of control from a string to a procedure 
Äwhile freeing up the buffer that held the string being executed.Ç|

ÇxÄSEE ALSO: ÅexecÇ| 1 ls

ÇhÅstopÇ| mÄ-- ÅstopÄ --Ç|

ÇpÄpops  the  execution  stack  back to the  level  of  the  latest  ÑstoppedÄ 
Äoperator  and  pushes the booleanÑ trueÄ on  the  operand  stack.  Execution 
Äcontinues with the object immediately following the ÑstoppedÄ operator  that 
Äinvoked  the context of ÑstopÄ.  It thus appears that ÑstoppedÄ  returned  the 
Ävalue  ÑtrueÄ,  whereas  in  the case of normal completion  of  the  invoked 
Äcontext it returns ÑfalseÄ.Ç|

ÇpÑstopÄ does not affect the operand or dictionary stacks. Any objects pushed 
Äthere  during  the execution of the ÑstoppedÄ  context  remain  there.  ÑstopÄ 
Äcannot  drop  the execution stack below the latest instance of  a  ÑabortedÄ 
Äoperator (attempts produce an error).Ç|

ÇpÑstopÜ  Äis  normally used to provide for an exceptional  termination  of  a 
Äcontext  (like  of  a procedure that detects a  condition  that  precludes 
Änormal completion).  Because the mechanism can skip any number of  pending 
Äprocedure returns,  a context can be terminated from a contained low-level 
Äprocedure  without  need  for  an organized  retreat  through  all  higher 
Äprocedures involved.Ç|Ä 

ÇxÄSEE ALSO: Åstopped, exit, abortÇ| 1 ls

ÇhÅstoppedÇ| mÄany ÅstoppedÄ boolÇ|

ÇpÄexecutes  ÑanyÄ,  which  is  typically but not necsaarily  a  procedure  or 
Äexecutable  string.  If ÑanyÄ runs to completion normally,  ÑstoppedÄ  returns 
ÑfalseÄ on the operand stack. If ÑanyÄ terminates prematurely as the result of 
Äexecuting ÑstopÄ,  ÑstoppedÄ returns ÑtrueÄ on the operand stack.  Regardless of 
Äthe  outcome,  execution is resumed at the next object in normal  sequence 
Äafter ÑstoppedÄ.Ç|

ÇxÄSEE ALSO: Åstop, exit, abortÇ| 1 ls

ÇhÅsubÇ| mÄnum†1Ä num†2Ä ÅaddÄ numÇ| 1 ls
Ç      mÄarray†1Ä array†2Ä ÅaddÄ array†1Ç| 1 ls
Ç      mÄarray num Åadd ÄarrayÇ| 1 ls
Ç      mÄnum array ÅaddÄ numÇ|

ÇpÄsubtracts  two  numerals returning their  difference,  or  subtracts  the 
Äelements  of Ñarray§2Ñ Äfrom the ccorresponding elements of  Ñarray§1Ä returningÑ 
Ñarray§1Ä,  or  subtracts  a  numeral from all elements  of  ÑarrayÄ  returning 
ÑarrayÄ, or subtracts all elements of ÑarrayÄ from the value of ÑnumÄ.Ç|

ÇpÄAll types of numeral values  and their combinations are accepted. All operands Äare converted to ÑdoubleÄ before the subtraction is done, and the result is Äreturned in the type of the pivotal operand. ÑUndefinedÄ operand values are Äpropagated into the difference; arithmetical overflow also yields an Ñundefined Äresult.Ç|


ÇxÄEXAMPLES:Ç|

ÇyÄ17 4 sub => 13Ç|
ÇyÄ1.5 1 sub => 0.5Ç|
ÇyÄ1 2.5 sub => -1Ç|
ÇyÄ<w 1 2 3> 1 sub => <w 0 1 2>Ç|
ÇyÄ<s 2.5 17.1 22.4> <1.0 * -2.0> sub => <s 1.5 * 24.4>Ç|

ÇxÄSEE ALSO:Å addÇ| 1 ls

ÇhÅsystemdictÇ| mÄ-- ÅsystemdictÄ dictÇ|

ÇpÄpushes the dictionary object systemdict on the operand stack.  systemdict 
Äis  not  actually an operator;  it is a name associated  with  the  system 
Ädictionary object itself.Ç|

ÇxÄSEE ALSO:Å userdict, currentdictÇ| 1 ls

ÇhÅtanÇ| mÄnum ÅtanÄ numÇ| 1 ls
Ç      mÄarrayÅ tanÄ arrayÇ|


ÇpÄreturns the tangent of the operand value, which is interpreted to be in 
Äunits of radians. The result is returned in the type of the operand.ÑArray Äelements are replaced by their tangents, and the array is pushed back on the Ästack.Ç|

ÇxÄEXAMPLES:Ç|
ÇyÄ0.0 tan => 0.0Ç|
ÇyÄ1.579796327 tan => 2.74224e-2Ç| 1 ls


ÇhÅtextÇ| mÄstringbuf index†1Ä width obj ÅtextÄ stringbuf index†2Ç|

ÇpÄinserts a character field of |ÑwidthÄ| characters into ÑstringbufÄ,  starting 
Äat  index Ñindex§1Ä.  The field contains the left-adjusted or  right-adjusted 
Ätext representation of ÑobjÄ,  dependent on whether ÑwidthÄ was specified with 
Äa  negative  or positive sign.  With ÑwidthÄ  specified  as  ÑundefinedÄ,  the 
Äinserted  field  is  matched  to the  length  ofÑstringÄ.Ç  ÑtextÄ  pushes  the 
ÑstringbufÄ  and  the  updated index (of the  first  element  following  the 
Äinserted field) for use by subsequent ÑtextÄ or ÑnumberÄ operators.Ç|

ÇpÑobjÄ  can be a string,  name,  operator,  or numeral.  A string  value  is 
Ärepresented  literally,  a name in text form,  an operator by its name  in 
Ätext  form,  and a numeral is taken as the code (byte value) of  a  single 
Ächaracter to be inserted.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ80 /b array 0Ç|
ÇyÄ* (\nToday's date is ) textÇ|
ÇyÄgetdate /day name /month name /year nameÇ|
ÇyÄ* month * number * (/) textÇ|
ÇyÄ* day * number * (/) textÇ|
ÇyÄ* year * numberÇ|
ÇyÄ0 exch getinterval toscrolledÇ|

ÇpÄThis  displays  "Today's  date is month/day/year" in a new  line  of  the 
Äscrolled part of the console screen.Ç|

ÇxÄSEE ALSO: ÅnumberÇ| 1 lsÄ 

ÇhÅtextscreenÇ| mÄscreen# ÅtextscreenÄ #lines wp dialog true / falseÇ|

ÇpÄinquires whether a text screen exists under Ñscreen#Ä. If no screen exists or if Äthe screen is not a text screen, Ñtextscreen Äreturns only ÑfalseÄ. If the screen Äexists and is a text screen, ÑtextscreenÄ pushes the capacity of the screen's textÄ memory (in lines), two booleans indicating the modes of operation of the text Äscreen (word-processing/ascii and dialog/edit), and the boolean ÑtrueÄ.Ç|

ÇxÄSEE ALSO: ÅmaketextscreenÇ| 1 ls

ÇhÅthinkÇ| mÄ-- ÅthinkÄ --Ç|

ÇpÄsounds the console alert currently in use.Ç| 1 ls

Ä 
ÇhÅtoboxÇ| mÄeVMid root ÅtoboxÄ boxÇ|

ÇpÄcreates  in the identified eVM a box object and copies into this box  all 
Äobject values belonging to the tree that originates from ÑrootÄ. The sign of 
ÑeVMidÄ selects for the temporary (positive) or permanent (negative) section 
Äof the eVM. ÑrootÄ is a list or dictionary, and the saved tree comprises the 
Ävalues  of  the  root  and of all internal  objects  nested  in  the  root 
Ä(external  objects are included as logical objects without duplication  of 
Ätheir values).  ÑtoboxÄ provides an economic means for preserving  logically 
Äcoherent sets of objects that have many members and occupy only a fraction 
Äof internal VM.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄMyProgramDict 99 tobox SavedPrograms /MyProgram putÇ|

ÇpÄA typical substrate for ÑtoboxÄ is an application program,  as this usually 
Äconsists  of  many nested procedures and comprises instructions  and  data 
Äthat  reference each other.  The above line saves an  application  program 
Äwhose  front-end  elements  are  referenced  in  MyProgramDict  into   the 
Ätemporary  section of eVM 99;  the returned box object is included into  a 
Ädictionary of saved programs.Ç|

ÇhÅtoconsoleÇ| mÄstring ÅtoconsoleÄ --Ç|

ÇpÄremoves  ÑstringÄ from the operand stack and writes the contents of  ÑstringÄ 
Äinto the dialogue field of the virtual console screen.Ç|

ÇxÄSEE ALSO:Å toqueueÇ| 1 ls

ÇhÅtokenÇ| mÄstring ÅtokenÄ post any true ÑorÄ string falseÇ|

ÇpÄinterprets ÑstringÄ according to the D syntax rules,  until it has  scanned 
Äand constructed an entire object.  If ÑstringÄ contains the text  equivalent 
Äof an object,  ÑtokenÄ pushes the remainder of ÑstringÄ,  ÑpostÄ, on the oeprand 
Ästack,  followed by the translated object,Ñ anyÄ, and the boolean ÑtrueÄ. Else 
Ñtoken  Äpushes  the original ÑstringÄ (usually exhausted)Ñ Ä  and  the  boolean 
Ñfalse.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ(token 1 2 garbage) token => (1 2 garbage) token trueÇ|
ÇyÄ(1 2 garbage) token => (2 garbage) 1 trueÇ|
ÇyÄ(2 garbage) token => (garbage) 2 trueÇ|
ÇyÄ(garbage) token => () garbage trueÇ|
ÇyÄ() token => () falseÇ|

ÇxÄSEE ALSO: Åsearch, anchorsearchÇ| 1 ls

ÇhÅtoqueueÇ| mÄstring ÅtoqueueÄ --Ç|

ÇpÄremoves  ÑstringÄ from the operand stack and writes the contents of  ÑstringÄ 
Äinto the edit field of the virtual console screen. This operation is equivalent Äto entering the contents of ÑstringÄ on the keyboard of the virtual console (and Ätypically will be executed by the D mill).Ç|

ÇxÄSEE ALSO:Å toconsoleÇ| 1 ls

ÇhÅtotextscreenÇ| mÄstring screen# ÅtotextscreenÄ --Ç|

ÇpÄappends the values of ÑstringÄ to the text currently contained in the text memory
Ä of screen Ñscreen#Ä. If the screen capacity is exceeded, the appended string willÄ be silently truncated.Ç|

ÇxÄSEE ALSO: ÅfromtextscreenÇ| 1 ls
ÇhÅtrueÇ| mÄ-- ÅtrueÄ trueÇ|

ÇpÄpushes a boolean object whose value is ÑtrueÄ on the operand stack.Ç|

ÇxÄSEE ALSO: Åfalse, and, or, not ,xorÇ| 1 ls

ÇhÅtypeÇ| mÄnum ÅtypeÄ /nameÇ| 1 ls
Ç       mÄarray Åtype Ä/nameÇ|

ÇpÄdetermines the numeral type of ÑnumÄ or ÑarrayÄ and returns in ÑstringÄ one  of 
Äthe type specifiers, 'b,w,l,s,..'.Ç|Ä 

ÇxÄSEE ALSO:Ç Åclass, ctypeÇ| 1 ls

ÇhÅunmountvolumeÇ| mÄvolumespecÅ unmountvolumeÄ --Ç|

ÇpÄunmounts a volume (file system) and ejects a removable medium (like a floppy 
Ädisk). ÑvolumespecÄ is either a numeral (volume identifier) or a string holding Äthe volume name.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ-3 unmountvolumeÇ|
ÇyÄ(ManualBackup:) unmountvolumeÇ|

ÇxÄSEE ALSO: ÅgetvolumesÇ| 1 ls
ÇhÅupdateÇ| mÄ-- Åupdate Ä--Ç|

ÇpÄwrites  modified  information  currently  held in  cache  memory  to  the 
Äphysical storage media,  thus bringing the information actually  contained 
Äin  the  physical  media up to date.  This  operator  should  be  executed 
Äperiodically  to  ensure  that  no information is  lost  when  the  system 
Äaccidentially  shuts  down (e.g.  by power  failure).  ÑupdateÄ  usually  is 
Äinvoked from the ÑinterruptÄ procedure that is called up by the D  executive 
Äat 0.5 sec intervals. ÑupdateÄ updates all external VMs currently in use.Ç|

ÇxÄSEE ALSO:Ñ Åinitiate, releaseÇ| 1 ls

ÇhÅusedÇ| mÄdict ÅusedÄ numÇ|

ÇpÄpops ÑdictÄ from the operand stack and pushes a numeral object whose  value 
Äequals  the  number  of entries used in  ÑdictÄ.  If  ÑdictÄ  is  external,  a 
Äreference to the medium is made.Ç|

ÇxÄSEE ALSO: ÅlengthÇ| 1 ls

ÇhÅuserdictÇ| mÄ-- Åuserdict ÄdictÇ|

ÇpÄpushes the dictionary object ÑuserdictÄ on the operand stack.Ç|

ÇxÄSEE ALSO: Åsystemdict, currentdictÇ| 1 ls

ÇhÅusescreenÇ| mÄscreen# proc ÅusescreenÄ --Ç|

ÇpÄencapsulates references to a graphical screen and thus prevents random accesses
Ä to different screens from interfering with one another. ÑusescreenÄ pushes a Änumeral specifying the graphical screen currently in use on the execution stack Äand makes Ñscreen# Äthe current screen. Then pushes two numerals, giving the ÑwidthÄ and Ñheight Äin pixels of the new screen, on the operand stack and executes Äproc. Pops the number of the previous screen from the execution stack and makes 
Äit the current screen.Ç ÑusescreenÄ is typically invoked in the Ñdrawscreen Äprocedure that draws the contents of the screen.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ/drawscreen {Ç|
ÇyÄ2 { /height name /width nameÇ|
ÇyÄ     ..... | instructions to dra screen contentsÇ|
ÇyÄ  }Ç|
ÇyÄ usescreenÇ|
ÇyÄ} defÇ|
ÇxÄSEE ALSO: Åmakegraphscreen, showscreenÇ| 1 ls

ÇhÅvalidÇ| mÄeVM_objÅ validÄ stamp (or error)Ç|

ÇpÄattempts  to  check the given ÑeVM_objÄ against the master  description  of 
ÑeVM_objÄ in the external eVM.  If the descriptions match, the time ÑstampÄ of 
ÑeVM_objÄ is returned as a long numeral. If a mismatch is detected, an error 
Äindicated a corrupted external object is executed.  The comparison of  the 
Ädescriptions excludes the attribute.Ç|

ÇxÄSEE ALSO: ÅnextobjectÄ, ÅexternalÇ| 1 ls

ÇhÅvmstatusÇ| mÄ-- ÅvmstatusÄ total usedÇ|

ÇpÄpushes  four numeral objects on the operand stack.  ÑMaxÄ gives  the  total 
Äsize  in bytes allotted to the virtual memory,  ÑusedÄ the number  of  bytes 
Äcurrently used by objects stored in the VM.Ç|

ÇxÄSEE ALSO:Å evmstatusÇ| 1 lsÄ  

ÇhÅwritefileÇ| mÄdata_fork resource_fork volid dirid (filename) ÅwritefileÄ --Ç|

ÇpÄwrites  the value of the strings, Ñdata_fork Äand Ñresource_forkÄ, into the named Äfile in directory ÑdiridÄ of volume ÑvolidÄ. Ñresource_forkÄ is prefixed by the 8-byteÄ file specifier (e.g. 'TEXTDDDD' for D text files). If the file does nor exist, Ä it is created. If it already exists, the old file  contents are deleted prior Äto writing the new contents. The file is given  the attribute 0.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄ(\nThis is just a reminder!) (TEXTDDDD) -1 4999 (reminder.doc) writefileÇ|


ÇxÄSEE ALSO: Åreadfile, findfiles, diskspace, getpathÇ| 1 ls

ÇhÅxorÇ| mÄbool†1Ä bool†2Ä ÅxorÄ boolÇ| 1 ls
Ç      mÄnum†1Ä num†2Ä ÅxorÄ numÇ|

ÇpÄIf the operands are booleans,Ñ xorÄ pushes their logical 'exclusive or'. If 
Äthe  operands  are  numerals, ÑxorÄ  pushes the bitwise 'exclusive or'  of  their Ä binary representations. If the binary representation of the second numeral is Äshorter than that of the first, the shorter numeral is extended by leading Äzeroes, and the operation is performed over the length of the first numeral. TheÄ result is returned in the type of the pivotal operand.Ç|

ÇxÄEXAMPLE:Ç|
ÇyÄtrue true xor => falseÇ|
Äytrue false xor => trueÇ|
ÇyÄfalse true xor => trueÇ|
ÇyÄfalse false xor => falseÇ|
ÇyÄ15 7 xor => 8Ç|

ÇxÄSEE ALSO: Åor, and, notÇ| 1 ls


