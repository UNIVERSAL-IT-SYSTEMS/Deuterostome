; -*- mode: lisp; -*-

(require 'font-lock)
(require 'd-mode-ops)

(defgroup d-mode nil "Major mode for D language" 
	:group 'languages)

(defgroup d-mode-highlighting-faces nil
	"Faces for highlighting D"
	:prefix "d-mode-"
	:group 'd-mode)

(custom-add-to-group 'd-mode-highlighting-faces 'font-lock-comment-face 
										 'custom-face)
(custom-add-to-group 'd-mode-highlighting-faces 'font-lock-string-face 
										 'custom-face)
(custom-add-to-group 'd-mode-highlighting-faces 'font-lock-type-face 
										 'custom-face)
(custom-add-to-group 'd-mode-highlighting-faces 'font-lock-function-name-face 
										 'custom-face)
(custom-add-to-group 'd-mode-highlighting-faces 'font-lock-builtin-face 
										 'custom-face)

(defvar d-mode-array-face 'd-mode-array-face "Face for array begin & end")
(defface d-mode-array-face 
	'((t (:inherit font-lock-string-face :weight bold)))
	"Face for array begin & end"
	:group 'd-mode-highlighting-faces)

(defvar d-mode-href-base-face 'd-mode-href-base-face "Base for / faces")
(defface d-mode-href-base-face 
	'((t (:weight semi-bold)))
	 "Base for / faces"
	 :group 'd-mode-highlighting-faces)

(defvar d-mode-oref-base-face 'd-mode-oref-base-face "Base for ~ faces")
(defface d-mode-oref-base-face 
	'((t (:slant italic)))
	 "Base for / faces"
	 :group 'd-mode-highlighting-faces)

(defvar d-mode-variable-xtra-face 'd-mode-variable-xtra-face
	"Face for extra characters in a name")
(defface d-mode-variable-xtra-face
	'((t (:inherit font-lock-type-face :underline t)))
	"Face for extra characters in a name"
	:group 'd-mode-highlighting-faces)

(defvar d-mode-oref-face 'd-mode-oref-face "Face for ~ objects.")
(defface d-mode-oref-face 
	'((t (:inherit (font-lock-type-face d-mode-oref-base-face))))
	"Face for ~ objects."
	:group 'd-mode-highlighting-faces)

(defvar d-mode-oref-xtra-face 'd-mode-oref-xtra-face
	"Face for extra characters in a ~name")
(defface d-mode-oref-xtra-face
	'((t (:inherit d-mode-oref-face :underline t)))
	"Face for extra characters in a ~name"
	:group 'd-mode-highlighting-faces)

(defvar d-mode-href-face 'd-mode-href-face)
(defface d-mode-href-face 
	'((t (:inherit (font-lock-type-face d-mode-href-base-face))))
	"Face for / objects"
	:group 'd-mode-highlighting-faces)

(defvar d-mode-href-xtra-face 'd-mode-href-xtra-face
	"Face for extra characters in a /name")
(defface d-mode-href-xtra-face
	'((t (:inherit d-mode-href-face :underline t)))
	"Face for extra characters in a /name"
	:group 'd-mode-highlighting-faces)

(defvar d-mode-keyword-oref-face 'd-mode-keyword-oref-face 
	"Face for ~predefined")
(defface d-mode-keyword-oref-face
	'((t (:inherit (font-lock-function-name-face d-mode-oref-base-face))))
	"Face for ~predefined"
	:group 'd-mode-highlighting-faces)

(defvar d-mode-keyword-href-face 'd-mode-keyword-href-face
	"Face for /predefined")
(defface d-mode-keyword-href-face 
	'((t (:inherit (font-lock-function-name-face d-mode-href-base-face))))
	"Face for /predefined"
	:group 'd-mode-highlighting-faces)

(setq auto-mode-alist
      (append '(("\\.[dD]\\'" . d-mode))
	      auto-mode-alist))

(defvar d-mode-syntax-table nil
  "Syntax table used in d-mode.")

(defcustom d-mode-use-timer t
  "*Use timer hooks"
  :type 'boolean
  :group 'd-mode)

(defcustom d-mode-timer-hooks '(d-mode-check-point)
  "Hooks for timer"
  :type 'hook
  :group 'd-mode)

(defvar d-mode-timer nil "Has the d-mode-timer been started?")

(defvar d-mode-font-lock-keywords ()
  "Font lock keyword sym.")

(defcustom d-mode-hook nil
  "Hooks for d-mode."
  :type 'hook
  :group 'd-mode)

(defcustom d-mode-replace-cr-do t
  "*If true, when opening a new file run `d-mode-replace-cr', 
and check/try to convert to unix line-ends."
  :type 'boolean
  :group 'd-mode)

(defun d-mode-setup-syntax-table ()
  (setq d-mode-syntax-table 
        (let ((table (make-syntax-table)))
          (d-mode-add-parens d-mode-parens table)
          (mapc (lambda (ss) (d-mode-add-simple ss table))
                (list d-mode-spaces
                      d-mode-prefixes
                      d-mode-escape
                      d-mode-symbols
                      d-mode-array-start
                      d-mode-array-end
                      d-mode-comment-start
                      d-mode-comment-end
                      d-mode-string-start
                      d-mode-string-end
                      d-mode-punctuation))
          table)))

(defun d-mode-add-paren (pstart pend table)
  "Add PSTART and PEND as matching parens in TABLE."
  (modify-syntax-entry pstart (concat "(" (list pend)) table)
  (modify-syntax-entry pend (concat ")" (list pstart)) table))

(defun d-mode-add-parens (args table)
  "Add all in assoc list ARGS ((?\( . ?\)) ...) to TABLE."
  (mapc (lambda (pair) (d-mode-add-paren (car pair) (cdr pair) table))
	args))

(defun d-mode-add-simple (args table)
  "Add all (cdr ARGS) to TABLE with definition (car ARGS)."
  (let ((string (car args)))
    (mapc (lambda (arg) (modify-syntax-entry arg string table))
	(cdr args))))

(defconst d-mode-parens 
  '((?{ . ?})
    (?\[ . ?\]))
  "Assoc list of open-close paren pairs for d-mode.")

(defconst d-mode-spaces
  '(" " ?  ?\t ?\f ?\n ?\r )
  "List of spaces for d-mode.")

(defconst d-mode-string-start
  '("|" ?\( )
  "List of array starters for d-mode.")

(defconst d-mode-string-end
  '("|" ?\) )
  "List of b array enders for d-mode.")

(defconst d-mode-array-start
  '("$" ?\< )
  "List of array starters for d-mode.")

(defconst d-mode-array-end
  '("$" ?\> )
  "List of b array enders for d-mode.")

(defconst d-mode-comment-start
	'("<" ?|) 
	"")

(defconst d-mode-comment-end
	'(">" ?\n)
	"")

(defconst d-mode-prefixes
  '("'" ?~ ?/)
  "List of name prefixes for d-mode.")

(defconst d-mode-escape
  '("\\" ?\\ )
  "List of escape symbols for d-mode.")

(defconst d-mode-symbols
  '("w" ?0 ?1 ?2 ?3 ?4 ?5 ?6 ?7 ?8 ?9 ?. ?+ ?- ?_)
  "List of symbols for d-mode")

(defconst d-mode-punctuation
  '("." ?\" ?\' ?* ?\;)
  "List of punctuation for d-mode")

(defun d-mode-magic-parens-key (arg)
  (interactive "*p")
  (let ((indent (>= (current-indentation) (current-column))))
    (self-insert-command (or arg 1))
    (if indent (d-mode-indent-line))))

(define-minor-mode d-mode-magic-parens "" nil "-p" 
  (mapcar (lambda (arg) (cons arg 'd-mode-magic-parens-key))
	  '("[" "]" "{" "}")))

(defun d-mode-magic-comment-key (arg)
  (interactive "*p")
  (let ((start-comment (and (not (d-mode-in-comment))
			    (save-excursion 
			      (mod (skip-chars-backward "\\") 2)))))
    (self-insert-command (or arg 1))
    (if start-comment (d-mode-indent-comment (- (point) 1)))))

(define-minor-mode d-mode-magic-comment "" nil "-|"
  '(("|" . d-mode-magic-comment-key)))

(defun d-mode-magic-newline-key (arg)
  "Puts in a newline and indents both before and after."
  (interactive "*P")
  (setq arg (or arg 1))
  (while (> arg 0)
    (newline-and-indent)
    (setq arg (1- arg))))

(define-minor-mode d-mode-magic-newline "" nil "-n"
  '(("\C-m" . d-mode-magic-newline-key)))

(defun d-mode-in-comment ()
  (let ((state (syntax-ppss)))
    (or (nth 4 state) (eq (char-after) ?\|))))

(defun d-mode-in-literal (&optional consider-comment-start)
  (interactive "P")
  (let ((state (syntax-ppss)))
    (or (nth 3 state) (nth 4 state)
	(and consider-comment-start (eq (char-after) ?\|)))))

(define-minor-mode d-mode-magic-delete "" nil "-d"
  '(("\d" . d-mode-magic-delete-key)
	([backspace] . d-mode-magic-delete-key)))
  
(defun d-mode-backspace-function (arg)
  "Redirect to backward-delete-char-untabify."
  (interactive "*P")
  (if (and delete-selection-mode mark-active)
      (delete-region (region-beginning) (region-end))
    (backward-delete-char-untabify (prefix-numeric-value arg))))

(defun d-mode-magic-delete-key (arg)
  "Delete over all space."
  (interactive "*P")
  (if (or arg
					(d-mode-in-literal t)
					(and delete-selection-mode mark-active))
      (d-mode-backspace-function arg)
    (let* ((here (point))
					 (leave-a-space (not (looking-at "[\]\}[:space:]]")))
					 (now (+ here (skip-syntax-backward "-")))
					 (leave-a-space (and leave-a-space (/= now (1- here)) 
															 (looking-back "[^\[\{/~]" (1- now)))))
			(if (< now here)
					(progn
						(goto-char here)
						(delete-region now (if leave-a-space (1- here) here)))
				(d-mode-backspace-function 1)))))

(defun d-mode-insert-tab (arg)
  (interactive "*p")
  (insert-char ?\  (* tab-width arg)))

(defvar d-mode-map nil
  "Key map to use in d-mode.")

(defun d-mode-setup-map ()
  (interactive)
  (setq d-mode-map
	(let ((mode-map (make-sparse-keymap)))
	  (define-key mode-map [(control c) (control n)]
	    'd-mode-magic-newline)
	  (define-key mode-map [(control c) (control p)] 
	    'd-mode-magic-parens)
	  (define-key mode-map [(control c) (control d)] 
	    'd-mode-magic-delete)
	  (define-key mode-map [(control c) (control |)]
	    'd-mode-magic-comment)
	  (define-key mode-map [(control c) ?\|]
	    'd-mode-magic-comment)
	  (define-key mode-map [S-iso-lefttab] 
	    'd-mode-insert-tab)
	  (define-key mode-map "\e\t"
	    'd-mode-insert-tab)
      (define-key mode-map [?~] 'd-mode-insert-squiggle)
      (define-key mode-map [?/] 'd-mode-insert-squiggle)
	  ;(define-key mode-map [(control tab)]
	  ;  'indent-regions)
	  mode-map)))

(defcustom d-mode-magic-newline-on nil 
	"*Start up d-editor in magic-newline minor mode"
	:type '(boolean)
	:group 'd-mode)

(defcustom d-mode-magic-parens-on nil 
	"*Start up d-editor in magic-parens minor mode"
	:type '(boolean)
	:group 'd-mode)

(defcustom d-mode-magic-delete-on nil 
	"*Start up d-editor in magic-delete minor mode"
	:type '(boolean)
	:group 'd-mode)

(defcustom d-mode-magic-comment-on nil 
	"*Start up d-editor in magic-comment minor mode"
	:type '(boolean)
	:group 'd-mode)

(defconst d-mode-variable-name-regexp
  (format "\\([[:alpha:]_][[:alnum:]_]\\{0,%d\\}\\)\\([[:alnum:]_]*\\)" (- @NAMEBYTES@ 1))
  "Regular expression for the simple name in d-mode.")

(defconst d-mode-variables-regexp
  (concat "" d-mode-variable-name-regexp "\\>")
  "Regular expression for variables in d-mode.")

(defconst d-mode-font-lock-keywords-1
 	'(("<[bwsdlxBWSDLX]\\|>" 0 'd-mode-array-face))
  "Minimal set of font lock regexps for d-mode.")

(defconst d-mode-constants-regexp
  (concat "\\*\\|\\<\\(null\\|true\\|false\\|userdict\\|systemdict"
	  "\\|[-+]?[[:digit:]]+\\("
	  "\\(\\.[[:digit:]]+\\)?\\([eE][-+]?[[:digit:]]+\\)?[sdSD]?"
      "\\|[bwlxBWLX]?\\)\\)\\>")
  "Regular expression for a constant in d-mode.")

(defconst d-mode-marks-regexp
  "~?\\[\\|[]{}]"
   "Regular expression for paren markers.")

(defconst d-mode-font-lock-keywords-2
  (append d-mode-font-lock-keywords-1
   (list
    (list d-mode-constants-regexp 0 'font-lock-builtin-face)
    (list d-mode-variables-regexp '(1 font-lock-type-face) 
		  '(2 d-mode-variable-xtra-face))
    (list d-mode-marks-regexp     0 'font-lock-type-face)))
  "Middle level font lock.")

(defconst d-mode-hrefs-regexp
  (concat "\\(/\\)" d-mode-variable-name-regexp "\\>")
  "Regular expression for passive names in d-mode.")

(defconst d-mode-orefs-regexp 
  (concat "\\(~\\)" d-mode-variable-name-regexp "\\>")
  "Regular expression for active names in d-mode.")

(defvar d-mode-font-lock-keywords-3 nil
  "Extreme set of font lock regexps for d-mode.")

(defun d-mode-unfontified (limit)
  (let (end (start (point)))
    (catch 'ret
      (while (setq start (text-property-any start limit 'face nil))
	(setq end (next-single-property-change 
		   start 'face (current-buffer) limit))
	(goto-char start)
	(skip-chars-forward "[:space:]" end)
	(when (/= (setq start (point)) end)
	  (re-search-forward "\\=[^[:space:]]+" end t)
	  (throw 'ret nil))))
    start))

(defun d-mode-font-lock-keywords-3 ()
  (setq d-mode-font-lock-keywords-3
	(append
        d-mode-font-lock-keywords-1
		(list
		 (list (concat "~" (regexp-opt d-mode-ops 'words)) 
					 0 'd-mode-keyword-oref-face)
		 (list (concat "/" (regexp-opt d-mode-ops 'words))
					 0 'd-mode-keyword-href-face)
		 (list (regexp-opt d-mode-ops 'words) 
					 0 'font-lock-function-name-face)
		 (list d-mode-hrefs-regexp  
					 '(1 d-mode-href-face) 
					 '(2 d-mode-href-face) 
					 '(3 d-mode-href-xtra-face))
		 (list d-mode-orefs-regexp  
					 '(1 d-mode-oref-face) 
					 '(2 d-mode-oref-face)
					 '(3 d-mode-oref-xtra-face)))
		d-mode-font-lock-keywords-2
 		'((d-mode-unfontified 0 'font-lock-warning-face)
		  ("[~/]" 0 
           (list 
            'face
             (let* ((start (match-beginning 0))
                    (face (get-text-property start 'face)))
               (if (and (eq face 'font-lock-warning-face)
                        (get-text-property start 'd-mode-pointer-location))
                   'bold face))
            'point-entered 'd-mode-squiggly-enter
            'point-left 'd-mode-squiggly-leave)
           t)))))

(defvar d-mode-point nil "Last known location of point in d-mode buffer")
(make-variable-buffer-local 'd-mode-point)

(defun d-mode-squiggly-enter (old new)
  (setq d-mode-point new)
  (when (and (> new (point-min))
             (get-text-property (1- new) 'point-entered))
    (let ((modp (buffer-modified-p))
          (inhibit-read-only t)
          (buffer-undo-list t)
          deactivate-mark)
      (put-text-property (1- new) new 'd-mode-pointer-location t)
      (unless modp (restore-buffer-modified-p nil)))))

(defun d-mode-squiggly-leave (old new)
  (when (eq d-mode-point old) (setq d-mode-point nil))
  (when (and (> old (point-min))
             (get-text-property (1- old) 'point-left))
    (let ((modp (buffer-modified-p))
          (inhibit-read-only t)
          (buffer-undo-list t)
          deactivate-mark)
      (put-text-property (1- old) old 'd-mode-pointer-location nil)
      (unless modp (restore-buffer-modified-p nil)))))

(defun d-mode-check-point ()
  (when (and d-mode-point (not (eq d-mode-point (point))))
    (d-mode-squiggly-leave d-mode-point (point))))

(defun d-mode-insert-squiggle (n)
    (interactive "p")
    (self-insert-command n)
    (put-text-property (1- (point)) (point) 'd-mode-pointer-location t))

(defun d-mode-font-lock-unfontify-region (beg end)
  (font-lock-default-unfontify-region beg end)
  (let ((modp (buffer-modified-p))
        (inhibit-read-only t)
        (p (text-property-any beg end 'd-mode-pointer-location t)))
    (when p (put-text-property p (1+ p) 'point-left 'd-mode-squiggly-leave))
    (unless modp (restore-buffer-modified-p nil))))

(defun d-mode-font-lock-unfontify-buffer ()
  (font-lock-default-unfontify-buffer)
  (let ((modp (buffer-modified-p))
        (inhibit-read-only t))
    (save-restriction
      (widen)
      (remove-list-of-text-properties 
       (point-min) (point-max) '(point-left 'd-mode-pointer-location))
      (unless modp (restore-buffer-modified-p nil)))))

(defun d-mode-add-op (ops)
  (interactive "xList of keywords to add (\"x\" \"y\"):  ")
  (nconc d-mode-ops ops)
  (d-mode-font-lock-keywords-3)
  (when font-lock-mode
    (font-lock-mode)
    (font-lock-mode)))

(defun d-mode-find-comment-column ()
  "Return the column of the last comment, not including the current one."
  (interactive)
  (save-excursion
    (beginning-of-line)
    (let ((len 1))
      (while (or (/= (mod len 2) 0) (d-mode-in-literal))
	(skip-chars-backward "^|")
	(backward-char)
	(setq len (save-excursion (skip-chars-backward "\\\\")))))
    (current-column)))

(defun d-mode-move-comment-to (column comment-start)
  "Move a comment so it lines up with the last possible comment."
  (let ((early-comment (and (< (current-column) column)
			    (= comment-start (point)))))
    (if  early-comment (forward-char))
    (save-excursion
      (goto-char comment-start)
      (let* ((comment-column (current-column))
	     (spaces (- column comment-column)))
	(cond ((> spaces 0)
	       (insert-char ?\  spaces))
	      ((< spaces 0)
	       (setq spaces (max spaces (skip-chars-backward " \t")))
	       (delete-char (- spaces))))))
    (if early-comment (backward-char))))

(defun d-mode-indent-non-comment ()
  "Indent if not inside a comment."
  (save-excursion	  
    (beginning-of-line)
    (when (not (d-mode-in-literal))
      (condition-case nil
	  (indent-line-to
	   (+
	    (save-excursion (up-list -1) (current-indentation))
	    (if (looking-at "[[:blank:]]*\\s)") 0 tab-width)))
	(error (indent-line-to 0)))))
  (if (> (current-indentation) (current-column))
      (move-to-column (current-indentation))))

(defun d-mode-indent-comment (comment-start)
  (d-mode-move-comment-to (d-mode-find-comment-column) comment-start))

(defun d-mode-indent-line ()
  "Indent current line as d code."
  (interactive)
  (let* ((state (syntax-ppss))
				 (d-comment-start
					(let ((c0 (char-before (1- (point)))))
						(if (and (nth 4 state) c0 (/= c0 ?\n))
								(nth 8 state)
							(if (eq (char-after) ?\|) (point))))))
    (if (or (not d-comment-start) (not d-mode-magic-comment))
				(d-mode-indent-non-comment)
      (d-mode-indent-comment d-comment-start))))

(defun d-mode-replace-cr ()
  (interactive)
  (save-excursion
    (let ((coding (coding-system-eol-type buffer-file-coding-system)))
      (when (and 
	     (not (and
		   (vectorp coding)
		   (let (r) (dolist (i (mapcar 'symbol-name coding) r)
			      (setq r (or r (string-match "-unix$" i)))))))
	     (not (eq coding 0))
	     (y-or-n-p "Convert to unix line ends? "))
	(set-buffer-file-coding-system 'unix)))
		(goto-char (point-min))
    ;(beginning-of-buffer)
    (when (and (re-search-forward "\r+\n?" nil t)
	       (y-or-n-p "Eliminate carriage returns? "))
      (replace-match "\n")
      (while (re-search-forward "\r+\n?" nil nil)
	(replace-match "\n")))
      (when (and (buffer-modified-p)
		 (y-or-n-p "Carriage returns eliminated - Save? "))
	(save-buffer))))

(defun d-mode-syntax-begin-function (&optional arg)
  (let ((p (point)))
    (catch 'ret
      (when (and (looking-at "[[:alnum:]_]")
		 (looking-back "[[:alpha:]]"))
	(re-search-backward "[^[:alnum:]_~/]")
	(setq p (point)))
      (when (and (re-search-backward "\\s|" nil t)
		 (= (char-after) ?\())
	(let ((p2 (point)))
	  (forward-char)
	  (when (or (not (re-search-forward "\\s|" nil t))
		    (< p (point)))
	    (goto-char p2)
	    (throw 'ret nil))))
      (goto-char p)
      (when (and (re-search-backward "\\s$" nil t)
		 (= (char-after) ?\<))
	(let ((p2 (point)))
	  (forward-char)
	  (when (or (not (re-search-forward "\\s$" nil t))
		    (< p (point)))
	    (goto-char p2)
	    (throw 'ret p2))))
      (goto-char p)
      (when (re-search-backward "\\s<" (line-beginning-position) t)
	(throw 'ret nil))
      (goto-char p))))

(if (not d-mode-syntax-table) (d-mode-setup-syntax-table))
(if (not d-mode-map) (d-mode-setup-map))
(if (not d-mode-font-lock-keywords-3) (d-mode-font-lock-keywords-3))
(if (not d-mode-font-lock-keywords)
    (setq d-mode-font-lock-keywords d-mode-font-lock-keywords-3))

(defun d-mode-shared (&optional do-syntax-table &rest args)
  ""
  (interactive)
  (set (make-local-variable 'text-property-default-nonsticky)
       (append text-property-default-nonsticky
               '((d-mode-pointer-location . t)
                 (point-entered . t)
                 (point-left . t))))

  (setq font-lock-defaults
        '((d-mode-font-lock-keywords-1 
           d-mode-font-lock-keywords-2
           d-mode-font-lock-keywords-3)
          nil nil nil nil
          (font-lock-multiline . t)
          (syntax-begin-function . d-mode-syntax-begin-function)
          (comment-use-syntax . nil)
          (comment-start . "|")
          (comment-end . "")
          (d-mode-font-lock-past-paren . nil)
          (font-lock-unfontify-region-function 
           . d-mode-font-lock-unfontify-region)
          (font-lock-unfontify-buffer-function
           . d-mode-font-lock-unfontify-buffer)
          (font-lock-extra-manage-props point-entered point-left)
          ))
  (nconc font-lock-defaults args)

  (when do-syntax-table
    (set-syntax-table d-mode-syntax-table))


  (unless d-mode-timer
    (setq d-mode-timer t)
    (run-with-idle-timer 1 t (lambda () (run-hooks 'd-mode-timer-hooks))))
)

(defun d-mode-comment-region (beg end &optional arg)
  (interactive "*r\nP")
	(save-excursion 
		(goto-char beg)
		(while (re-search-forward "^" end t)
			(replace-match "|" t t))))
;(save-excursion (replace-regexp "^" "|" nil beg end)))

(defun d-mode-uncomment-region (beg end &optional arg)
  (interactive "*r\nP")
	(save-excursion
		(goto-char beg)
		(while (re-search-forward "^\\s *\\(|\\)" end t)
			(replace-match "" t t nil 1))))
;;	(save-excursion (replace-regexp "^\\(\\s *\\)|" "\\1" nil beg end)))

(defun d-mode-font-lock-block-function ()
	(let ((p (point)) (isset nil))
      (when (re-search-backward "\\(?:^\\|[^\\\\]\\)\\\\\\{2\\}*\(" nil t)
        (backward-char)
        (push-mark nil t)
        (if (not (and (re-search-forward
                       "\\(?:^\\|\\=\\|[^\\\\]\\)\\\\\\{2\\}*\)" nil t)
                      (<= p (point))))
            (pop-mark)
          (setq isset t)
          (exchange-point-and-mark)))
      (when (not isset)
        (goto-char p)
        (end-of-line)
        (push-mark nil t)
        (beginning-of-line))))

;; shut up the compiler
(defvar comment-region)
(defvar uncomment-region)

(define-derived-mode d-mode nil "D Machine"
  "Major mode for editing d code.
\\{d-mode-map}"
  :group 'd-mode

  (set (make-local-variable 'parse-sexp-lookup-properties) t)

  (set (make-local-variable 'indent-line-function)
       'd-mode-indent-line)
  (setq indent-tabs-mode nil)

  (set (make-local-variable 'comment-region)
       'd-mode-comment-region)

  (set (make-local-variable 'uncomment-region)
       'd-mode-uncomment-region)

  (d-mode-shared nil
	 '(font-lock-mark-block-function . d-mode-font-lock-mark-block-function))

  (when d-mode-replace-cr-do (d-mode-replace-cr))

  (if d-mode-magic-newline-on (d-mode-magic-newline))
  (if d-mode-magic-parens-on (d-mode-magic-parens))
  (if d-mode-magic-delete-on (d-mode-magic-delete))
  (if d-mode-magic-comment-on (d-mode-magic-comment))
)


(provide 'd-mode)
