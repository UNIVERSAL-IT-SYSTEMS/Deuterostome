;; ID: @SVNID@ V@ V@PACKAGE_VERSION@ git-@SVNVERSION@

(require 'd-mode)
(require 'dm-server)
(require 'comint)

(defgroup d-comint-mode nil 
  "Major mode for DVT shell"
  :prefix "d-comint-mode-"
  :group 'd-mode)

(defgroup d-comint-dnode-mode nil 
  "Major mode for dnode shell"
  :prefix "d-comint-dnode-mode-"
  :group 'd-comint-mode)

(defcustom d-comint-mode-server t
  "*Startup server for emacs when loading init"
  :type 'boolean
  :group 'd-comint-mode)

(defcustom d-comint-mode-keep-focus t 
  "*If true, tell dvt to return input focus to dvt buffer in emacs"
  :type 'boolean
  :group 'd-comint-mode)

(defcustom d-comint-mode-window-size 10
  "*Number of lines for popped up dvt window"
  :type 'integer
  :group 'd-comint-mode)

(defcustom explicit-dvt-file-name nil 
  "*dvt program name"
  :group 'd-comint-mode
  :type '(choice (const nil) file))
;;(defvar comint-last-output-start)

(defcustom d-comint-mode-focus-raise-global nil 
  "*Global sequence to pop *dvt*"
  :group 'd-comint-mode
  :type '(repeat character))

(require 'comint)

(defvar d-comint-mode-highlight-output 
  'd-comint-mode-highlight-output 
  "Face for comint output")
(defface d-comint-mode-highlight-output
  '((t (:foreground "black" :weight normal)))
  "Face for comint output"
  :group 'd-comint-mode)

(defcustom d-comint-mode-activate-highlight-input nil
  "*Recolor input to a fixed face"
  :type 'boolean
  :group 'd-comint-mode)

(defvar d-comint-mode-highlight-input
  'd-comint-mode-highlight-input
  "Face for comint input")
(defface d-comint-mode-highlight-input
  '((t (:inherit comint-highlight-input :foreground "blue" :weight bold)))
  "Face for comint input"
  :group 'd-comint-mode)

(defcustom d-comint-mode-frame-alist '((auto-raise . nil)
				       (tool-bar-lines . nil)
				       (menu-bar-lines . nil)
				       (minibuffer . nil)
				       (fullscreen . nil))
  "*Alist of frame properties for mini dvt window."
  :group 'd-comint-mode
  :type 'alist
  :options '((title string)
	     (name string)
	     (left (choice integer (list (choice (const +) (const '- )) 
					 integer)))
	     (top (choice integer (list (choice (const +) (const '- )) 
					integer)))
	     (icon-left integer)
	     (icon-top integer)
	     (user-position boolean)
	     (height integer)
	     (width integer)
	     (user-size boolean)
	     (fullscreen (choice 
			  (const fullwidth) 
			  (const fullheight) 
			  (const fullboth)
			  (const nil)))
	     (minibuffer boolean)
	     (auto-raise boolean)
	     (auto-lower boolean)
	     (vertical-scroll-bars boolean)
	     (horizontal-scroll-bars boolean)
	     (scroll-bar-width (choice integer (const nil)))
	     (icon-type (choice boolean string))
	     (icon-name (choice (const nil) string))
	     (background-mode (choice (const dark) (const light)))
	     (tty-color-mode (choice integer symbol))
	     (display-type (choice (const color) 
				   (const grayscale) 
				   (const mono)))
	     (cursor-type (choice (const box)
				  (const hollow)
				  (const nil)
				  (const bar)
				  (cons :tag "(bar . integer)" 
					(const bar) integer)
				  (const hbar)
				  (cons :tag "(hbar . integer)"
					(const hbar) integer)))
	     (border-width integer)
	     (internal-border-width integer)
	     (left-fringe integer)
	     (right-fringe integer)
	     (unsplittable boolean)
	     (menu-bar-lines (choice (const nil) integer))
	     (tool-bar-lines (choice (const nil) integer))
	     (line-spacing integer)))

(defcustom d-comint-mode-hook nil
  "Hooks for d-comint-mode"
  :type 'hook
  :group 'd-comint-mode)

(defcustom d-comint-mode-redirect-command
  "{ echo 'New process: '; echo \"$(date)\" ; echo '-------------' ; exec cat ; } >> "
  "*Command to handle redirects.
It is run under bash -c, with a filename concatenated to the command string."
  :type 'string
  :group 'd-comint-mode)

(defcustom d-comint-mode-narrow-lines (* 50 2) 
  "*Number of lines for d-comint-mode-narrow'ing, above current point"
  :type 'integer
  :group 'd-comint-mode)

(defun d-comint-mode-freeze-overlay (overlay is-after begin end &optional len)
  "Prevent OVERLAY from being extended.
This function can be used for the `modification-hooks' overlay
property."
  ;; if stuff was inserted at the end of the overlay
  (when (and is-after
	     (= 0 len)
	     (= end (overlay-end overlay)))
    ;; reset the end of the overlay
    (move-overlay overlay (overlay-start overlay) begin)))

(defun d-comint-mode-prefilter (s)
  (when (> (length s) 0)
    (put-text-property 0 (1- (length s)) 'font-lock-face 
                       'd-comint-mode-highlight-output s))
  s)

(defvar d-comint-mode-redirect-ignore nil)
(defvar d-comint-mode-redirect-process nil)
(defvar d-comint-mode-redirect-mode)
(defun d-comint-mode-redirect (string)
  (if (or (not d-comint-mode-redirect-mode) d-comint-mode-redirect-ignore)
      string
    (process-send-string d-comint-mode-redirect-process string) ""))

(defun d-comint-mode-highlight-input (string)
  (when (string= string "")
    (if d-comint-mode-activate-highlight-input
	(put-text-property comint-last-input-start comint-last-input-end 
			   'font-lock-face 'd-comint-mode-highlight-input)
      (remove-text-properties comint-last-input-start comint-last-input-end
			      '(font-lock-face nil)))))

(require 'd-mode)
(define-derived-mode d-comint-mode comint-mode "DVT"
  "Major mode for handling d-machine.
Derived from `comint-mode' with font-lock from `d-mode'.
\\{d-comint-mode-map}"
  :group 'd-comint-mode

  (set (make-local-variable 'comint-prompt-regexp) "^")
  (set (make-local-variable 'comint-input-ring-file-name) "~/.dvt_history")

  ;;   (set (make-local-variable 'd-mode-font-lock-keywords-3)
  ;;        (append d-mode-font-lock-keywords-3
  ;;                '(("\\([~/]\\)\\(\\s-\\|$\\)+" 1 'bold t))))
  ;;  (print d-mode-font-lock-keywords-3)
  (d-mode-shared t)

  ;;  (print d-mode-font-lock-keywords-3)
  (ansi-color-for-comint-mode-on)
  (make-local-variable 'd-comint-mode-redirect-process)
  (make-local-variable 'd-comint-mode-redirect-ignore)


  ;;(set-face-foreground 'comint-highlight-input "blue")
  ;;(make-face-unbold 'comint-highlight-input)
  
  ;;  (add-hook 'comint-output-filter-functions 'd-comint-mode-filter)
  (add-hook 'comint-preoutput-filter-functions 'd-comint-mode-prefilter nil t)
  (add-hook 'comint-preoutput-filter-functions 'd-comint-mode-redirect nil t)
  (add-hook 'comint-output-filter-functions 'd-comint-mode-highlight-input nil t))

(defun d-comint-mode-send (&rest strings)
  (insert (mapconcat (lambda (s) s) strings ""))
  (comint-send-input))

(defun d-comint-mode-send-line (&rest strings)
  (goto-char (point-max))
  (delete-region (line-beginning-position) (line-end-position))
  (insert (mapconcat (lambda (s) s) strings ""))
  (comint-send-input))

(defun d-comint-mode-send-quiet (&rest strings)
  (process-send-string
   (get-buffer-process (current-buffer))
   (concat "\n" (mapconcat (lambda (s) s) strings "") "\n")))

(defun d-comint-mode-dabort ()
  (interactive)
  (d-comint-mode-send 
   "{ "
   (save-excursion
     (buffer-substring-no-properties
      (line-beginning-position 0)
      (line-end-position 0)))
   " } debug_aborted"))

(defun d-comint-mode-stop ()
  (interactive)
  (d-comint-mode-send-line "! stop")
  (d-comint-mode-scream 0))

(defun d-comint-mode-continue ()
  (interactive)
  (d-comint-mode-send-line "! continue")
  (d-comint-mode-scream 0))

(defun d-comint-mode-abort ()
  (interactive)
  (d-comint-mode-send-line "! abort")
  (d-comint-mode-scream 0))

(defun d-comint-mode-next-talk ()
  (interactive)
  (d-comint-mode-send-quiet "% dvt begin emacs_next_talk")
  )

(defun d-comint-mode-last-talk ()
  (interactive)
  (d-comint-mode-send-quiet "% dvt begin emacs_last_talk")
  )

(defun d-comint-mode-next-pawn-talk ()
  (interactive)
  (d-comint-mode-send-quiet 
   "^ userdict /mpidata known {mpidata begin emacs_next_talk} if")
  )

(defun d-comint-mode-last-pawn-talk ()
  (interactive)
  (d-comint-mode-send-quiet 
   "^ userdict /mpidata known {mpidata begin emacs_last_talk} if")
  )


(defun d-comint-mode-scream-and-send ()
  (interactive)
  (save-excursion
    (beginning-of-line)
    (when (not (eq (char-after) ?\!))
      (insert "! ")))
  (comint-send-input))

(define-minor-mode d-comint-mode-scream "" nil " !"
  '(("" . d-comint-mode-scream-and-send)))

(defun d-comint-mode-redirect-kill-process ()
  (process-send-string d-comint-mode-redirect-process "\n")
  (process-send-eof d-comint-mode-redirect-process)
  (kill-process d-comint-mode-redirect-process)
  (setq d-comint-mode-redirect-process nil))

(defun d-comint-mode-redirect-process-open ()
  (let ((log-name (if (string= (buffer-name) "*dvt*") "dvt.log" 
		    (concat (buffer-name) ".log"))))
    (let ((d-comint-mode-redirect-ignore t)
	  (string1 (concat "[31m" 
			   (if d-comint-mode-redirect-mode 
			       (concat "*** Emacs: Redirecting output from dvt terminal to file "
				       log-name " ***")
			     (concat "*** Emacs: Redirecting output from file " log-name
				     " to dvt terminal ***"))
			   "[0m\n")))
      (comint-output-filter (get-buffer-process (current-buffer)) string1))

    (when (and d-comint-mode-redirect-mode (not d-comint-mode-redirect-process))
      (setq d-comint-mode-redirect-process
	    (start-process (concat log-name "-redirect") nil
			   "/bin/bash" "-c" 
			   (concat d-comint-mode-redirect-command 
				   "\'" log-name "\'")))
      (set-process-query-on-exit-flag d-comint-mode-redirect-process nil)
      ;;(process-kill-without-query d-comint-mode-redirect-process)
      (add-hook 'kill-buffer-hook 'd-comint-mode-redirect-kill-process
		nil t)))

  (process-send-string d-comint-mode-redirect-process
		       (format-time-string
			(if d-comint-mode-redirect-mode
			    "--- Start: %Y-%m-%d %T%z ---\n" 
			  "--- Stop: %Y-%m-%d %T%z ---\n")))
  )

(define-minor-mode d-comint-mode-redirect-mode "" nil " >"
  '() (d-comint-mode-redirect-process-open))

(defun d-comint-mode-invert ()
  (interactive)
  (d-comint-mode-send
   (save-excursion
     (buffer-substring-no-properties
      (line-beginning-position 0)
      (line-end-position 0)))))

(defun d-comint-mode-clear ()
  (interactive)
  (delete-region 1 (point)))

(add-minor-mode 'd-comint-mode-narrowed " Narrow")

(defvar d-comint-mode-narrowed nil "Toggle for Narrow mode")

(defun d-comint-mode-narrowed () "Toggle function for Narrow mode"
  (if d-comint-mode-narrowed (d-comint-mode-widen) (d-comint-mode-narrow)))

(defun d-comint-mode-narrow ()
  "Narrows d-comint-mode window to `d-comint-mode-narrow-lines' lines"
  (interactive)
  (let ((start 
         (save-excursion
           (let ((inhibit-point-motion-hooks t))
             (forward-line (- d-comint-mode-narrow-lines))
             (point)))))
    (when (eq start (point-min))
      (error "Pointless narrowing to beginning of buffer"))
    (narrow-to-region start (point-max))
    (setq d-comint-mode-narrowed t)))

(defun d-comint-mode-widen () 
  "Undoes `d-comint-mode-narrow'"
  (interactive) 
  (widen)
  (setq d-comint-mode-narrowed nil))

(defvar d-comint-mode-map-setup nil "")
(defun d-comint-mode-setup-map ()
  (interactive)
  (setq d-comint-mode-map-setup t)
  (define-key d-comint-mode-map [f1] 'd-comint-mode-invert)
  (define-key d-comint-mode-map [f2] 'd-comint-mode-continue)
  (define-key d-comint-mode-map [f3] 'd-comint-mode-stop)
  (define-key d-comint-mode-map [f4] 'd-comint-mode-abort)
  (define-key d-comint-mode-map [f5] 'd-comint-mode-raise-thehorses)
  (define-key d-comint-mode-map [f6] 'd-comint-mode-raise-all)
  (define-key d-comint-mode-map [(shift f6)] 'd-comint-mode-hide-all)
  (define-key d-comint-mode-map [f7] 'd-comint-mode-focus-raise)
  (if d-comint-mode-focus-raise-global
      (global-set-key (vconcat d-comint-mode-focus-raise-global) 
                      'd-comint-mode-focus-raise-switch))
  (define-key d-comint-mode-map [f8] 'dnode)
  (define-key d-comint-mode-map [(control ?h) ?d] 'd-comint-mode-help)
  (define-key d-comint-mode-map [(control !)] 'd-comint-mode-scream)
  (define-key d-comint-mode-map [(control ?1)] 'd-comint-mode-scream)
  ;;(define-key d-comint-mode-map [?\C-c ?\C-c] 'd-comint-mode-clear)
  (define-key d-comint-mode-map [(control ?c) ?c] 'd-comint-mode-clear)
  (define-key d-comint-mode-map [(control ?c) (control ?a)] 
    'd-comint-mode-dabort)
  (define-key d-comint-mode-map [(control >)] 'd-comint-mode-redirect-mode)
  (define-key d-comint-mode-map [(control ?x) ?n ?p] 'd-comint-mode-narrow)
  (define-key d-comint-mode-map [(control ?x) ?n ?w] 'd-comint-mode-widen)
  (define-key d-comint-mode-map [?~] 'd-mode-insert-squiggle)
  (define-key d-comint-mode-map [?/] 'd-mode-insert-squiggle)
  (define-key d-comint-mode-map [(meta down)] 'd-comint-mode-next-talk)
  (define-key d-comint-mode-map [(meta up)]   'd-comint-mode-last-talk)
  (define-key d-comint-mode-map [(meta shift down)] 
    'd-comint-mode-next-pawn-talk)
  (define-key d-comint-mode-map [(meta shift up)]   
    'd-comint-mode-last-pawn-talk)
  )
;;(eval-when-compile (setq d-comint-mode-map-setup t))
;;(if (not d-comint-mode-map-setup) (d-comint-mode-setup-map))

(defun d-comint-mode-server ()
  "Start d-comint-mode-server"
  (when (and d-comint-mode-server (not dm-server-process))
    (setq dm-server-name (format "dm-server-%d" (emacs-pid)))
    (dm-server-start)))

(defun dvt-scroll-special (dvt-buffer-name)
  (let ((selected-window (selected-window)))
    (catch 'dedicated-window-found
      (dolist (window (get-buffer-window-list dvt-buffer-name 'no-mini t))
	(when (window-dedicated-p window)
	  (let* ((frame (window-frame window))
		 (inv (null (frame-visible-p frame))))
	    (when inv (make-frame-visible frame))
	    (select-window window)
	    (goto-char (point-max))
	    (select-window selected-window)
	    (when inv (make-frame-invisible frame)))
	  (throw 'dedicated-window-found window))))))

(defun dvt (&optional buffer override)
  "Run an inferior shell, with I/O through BUFFER (which defaults to `*shell*').
Interactively, a prefix arg means to prompt for BUFFER.
If BUFFER exists but shell process is not running, make new shell.
If BUFFER exists and shell process is running, just switch to BUFFER.
Program used comes from variable `explicit-shell-file-name',
 or (if that is nil) from the ESHELL environment variable,
 or else from SHELL if there is no ESHELL.
If a file `~/.emacs_SHELLNAME' exists, it is given as initial input
 (Note that this may lose due to a timing error if the shell
  discards input when it starts up.)
The buffer is put in Shell mode, giving commands for sending input
and controlling the subjobs of the shell.  See `shell-mode'.
See also the variable `shell-prompt-pattern'.
If OVERRIDE is non-nil, pop up a special frame 
  even if `d-comint-mode-keep-focus' is nil.

To specify a coding system for converting non-ASCII characters
in the input and output to the shell, use \\[universal-coding-system-argument]
before \\[shell].  You can also specify this with \\[set-buffer-process-coding-system]
in the shell buffer, after you start the shell.
The default comes from `process-coding-system-alist' and
`default-process-coding-system'.

The shell file name (sans directories) is used to make a symbol name
such as `explicit-csh-args'.  If that symbol is a variable,
its value is used as a list of arguments when invoking the shell.
Otherwise, one argument `-i' is passed to the shell.

\(Type \\[describe-mode] in the shell buffer for a list of commands.)
\\{d-comint-mode-map}"
  (interactive
   (list
    (or (and current-prefix-arg (read-buffer "DVT buffer name: " "*dvt*"))
	"*dvt*")))
  (if (not d-comint-mode-map-setup) (d-comint-mode-setup-map))
  (if (not (comint-check-proc buffer))
      (let* ((prog (or explicit-dvt-file-name
		       (getenv "EDVT")
		       (getenv "DVT")
		       "@bindir@/dvt"))
	     (name (file-name-nondirectory prog))
	     (dir (file-name-directory prog))
	     (startfile (concat "~/.emacs_" name))
	     (xargs-name 'dvt-args)
	     (cdir default-directory)
	     dvt-buffer)
	(save-excursion
	  (set-buffer
	   (setq dvt-buffer 
		 (apply 'make-comint-in-buffer "dvt" buffer prog
			(when (file-exists-p startfile) startfile)
			(when (and xargs-name (boundp xargs-name))
			  (symbol-value xargs-name)))))
	  (d-comint-mode)
	  (d-comint-mode-server)
	  (when dm-server-process
	    (process-send-string 
	     (get-buffer-process dvt-buffer)
	     (concat 
	      "Xwindows {(" (d-comint-mode-shell-quote dm-server-name) ") ("
	      (d-comint-mode-shell-quote (buffer-name dvt-buffer)) 
	      ") take_input_setup} if\n"))))
	
	(when (or d-comint-mode-keep-focus override)
	  (dvt-special-frame buffer)
	  (dvt-scroll-special buffer))
	
	(switch-to-buffer dvt-buffer)
	(goto-char (point-max)))
    (switch-to-buffer buffer)))

(defun d-comint-mode-quote (string)
  "Quote a string to be sent to and interpreted by the dvt.
This would apply to the body of a string between ( and ).
Parens and backslashes are quoted"
  (interactive "s")
  (let ((start 1))
    (while (string-match "[()\\\\]" string start)
      (setq start (1+ (match-end 0)))
      (setq string (replace-match "\\\\\\&" t nil string)))
    string))

(defun d-comint-mode-shell-quote (string)
  "Quote a string which will be used by the dvt as a word in a shell command.
This quotes per `shell-quote-argument', then requotes per `d-comint-mode-quote'"
  (interactive "s")
  (d-comint-mode-quote (shell-quote-argument string)))

(defun d-comint-mode-find-dvt-frame (dvt-buffer-name)
  (let ((window
	 (save-excursion
	   (cond 
	    ((get-buffer-window dvt-buffer-name))
	    ((catch 'dedicated-window-found
	       (dolist (window (get-buffer-window-list dvt-buffer-name 
						       'no-minibuf 'visible))
		 (when (window-dedicated-p window)
		   (throw 'dedicated-window-found window)))))
	    ((get-buffer-window dvt-buffer-name 'visible))
	    (t (dvt-special-frame dvt-buffer-name))))))
    (window-frame window)))

(defun d-comint-mode-focus (dvt-buffer-name &optional override)
  "Set input focus to dvt buffer. 
Used by dvt to signal to emacs that it should re-take focus.
The DVT-BUFFER-NAME is the name of the buffer to focus.
if OVERRIDE then set keyboard input focus,
even if `d-comint-mode-keep-focus' is nil.
"
  (when (or d-comint-mode-keep-focus override)
    (select-frame (d-comint-mode-find-dvt-frame dvt-buffer-name))
    (select-window (get-buffer-window dvt-buffer-name))
    (when (eq window-system 'x) (x-focus-frame (selected-frame)))))

(defvar d-comint-mode-minibuffer-frames nil)

(defun dvt-special-frame (&optional dvt-buffer-name)
  "returns window"
  (interactive
   (list
    (or
     (and current-prefix-arg (read-buffer "DVT buffer name: " "*dvt*"))
     "*dvt*")))
  (let ((dvt-window (special-display-popup-frame
		     dvt-buffer-name 
		     (append
		      (list (cons 'height d-comint-mode-window-size))
		      d-comint-mode-frame-alist))))
    (setq d-comint-mode-minibuffer-frames
          (append d-comint-mode-minibuffer-frames 
                  (list (cons default-minibuffer-frame 
                              (window-frame dvt-window)))))
    dvt-window))

(defadvice delete-frame (around
                         d-comint-mode-delete-frame (&optional frame force)
                         activate compile)
  (when (not frame) (setq frame (selected-frame)))
  (let ((m (assq frame d-comint-mode-minibuffer-frames)))
    (while m
      (delete-frame (cdr m) force)
      (setq d-comint-mode-minibuffer-frames 
            (delq m d-comint-mode-minibuffer-frames))
      (setq m (assq frame d-comint-mode-minibuffer-frames))))
  ad-do-it
  (let ((m (rassq frame d-comint-mode-minibuffer-frames)))
    (while m
      (setq d-comint-mode-minibuffer-frames
            (delq m d-comint-mode-minibuffer-frames))
      (setq m (rassq frame d-comint-mode-minibuffer-frames)))))

(defadvice handle-delete-frame (before 
                                d-comint-mode-handle-delete-frame (event)
                                activate compile)
  (let* ((frame (posn-window (event-start event)))
         (m (assq frame d-comint-mode-minibuffer-frames)))
    (while m
      (delete-frame (cdr m))
      (setq m (assq frame d-comint-mode-minibuffer-frames)))))

(defun d-comint-mode-outside-focus (frame-to-be)
  "Check if mouse outside current frame, and if-so, make the frame-to-be
invisible. Used to guarantee that frames go to top of screen when 
requested."
  (if (not (cadr (mouse-position))) (make-frame-invisible frame-to-be t)))

(defun d-comint-mode-focus-raise (&optional dvt-buffer-name)
  "Set input focus to dvt buffer, and raise frame in X.
Used by dvt to signal to emacs that it should pop up and take focus"
  (interactive
   (list (and current-prefix-arg (read-buffer "DVT buffer: " "*dvt*"))))
  (when (null dvt-buffer-name) (setq dvt-buffer-name "*dvt*"))
  (let ((focus-follows-mouse nil)
        (dvt-frame (d-comint-mode-find-dvt-frame dvt-buffer-name)))
    (d-comint-mode-outside-focus dvt-frame)
    (select-frame-set-input-focus dvt-frame)
    (select-window (get-buffer-window dvt-buffer-name))))

(defun d-comint-mode-focus-raise-switch (&optional dvt-buffer-name)
  "Set input focus to dvt buffer, and raise frame in X, or pop back from
dvt buffer. Used from global key-binding"
  (interactive
   (list (and current-prefix-arg (read-buffer "DVT buffer: " "*dvt*"))))
  (when (null dvt-buffer-name) (setq dvt-buffer-name "*dvt*"))
  (cond 
   ((get-buffer-window dvt-buffer-name) 
    (let ((focus-follows-mouse (not (cadr (mouse-position)))))
      (other-frame -1)
      (raise-frame)))
   (t
    (d-comint-mode-focus-raise dvt-buffer-name))))

(defun d-comint-mode-help ()
  "Tell dvt to output help info"
  (interactive)
  (d-comint-mode-send-quiet "% hk_\n% h_"))

(defun d-comint-mode-raise-thehorses ()
  "Tell dvt to raise TheHorses window."
  (interactive)
  (d-comint-mode-send-quiet "% userdict begin raise_thehorses"))

(defun d-comint-mode-raise-all ()
  "Tell dvt to raise all dvt windows"
  (interactive)
  (d-comint-mode-send-quiet "% userdict begin raise_all"))

(defun d-comint-mode-hide-all ()
  "Tell dvt to hide all dvt windows"
  (interactive)
  (d-comint-mode-send-quiet "% userdict begin hide_all"))

(defcustom d-comint-dnode-mode-dnode-args nil 
  "*Options to dnode program"
  :group 'd-comint-dnode-mode
  :type '(repeat string))

(defcustom explicit-dnode-file-name nil
  "*Name of programe to run dnode"
  :group 'd-comint-dnode-mode
  :type '(choice (const nil) file))

(defcustom d-comint-dnode-mode-hook nil
  "Hooks for d-comint-dnode-mode"
  :group 'd-comint-dnode-mode
  :type 'hook)

(defvar d-comint-dnode-mode-dnode-buffer nil)

(defvar d-comint-dnode-mode-prog nil)

(define-derived-mode d-comint-dnode-mode comint-mode "dnode"
  "Major mode for handling dnodes.
\\{d-comint-dnode-mode-map}"
  :group 'd-comint-dnode-mode

  (insert "Starting at " (current-time-string) ": " d-comint-dnode-mode-prog)
  (dolist (dnode-arg d-comint-dnode-mode-dnode-args) (insert " " dnode-arg))
  (insert "\n")
  (goto-char (point-max))
  (apply 'make-comint-in-buffer 
	 name 
	 d-comint-dnode-mode-dnode-buffer
	 d-comint-dnode-mode-prog 
	 nil 
	 d-comint-dnode-mode-dnode-args)
  (set-marker comint-last-output-start (point-max)))

(defvar d-comint-dnode-mode-map-setup nil "")

(defun d-comint-dnode-mode-setup-map ()
  (interactive)
  (setq d-comint-dnode-mode-map-setup t)
  (define-key d-comint-dnode-mode-map [f8] 'dnode))
(if (not d-comint-dnode-mode-map-setup) (d-comint-dnode-mode-setup-map))

(defun dnode (port &optional buffer-pre)
  (interactive (list
		(read-number "Port number: ")
		(and current-prefix-arg (read-buffer "Dnode buffer prefix: " "*dnode*"))))
  (when (null buffer-pre) (setq buffer-pre "*dnode*"))
  
  (let* ((dnode-buffer-name (concat buffer-pre (format "<%d>" port)))
	 (d-comint-dnode-mode-dnode-buffer (get-buffer dnode-buffer-name)))
    
    (when (or (null d-comint-dnode-mode-dnode-buffer) 
	      (not (comint-check-proc d-comint-dnode-mode-dnode-buffer)))
      (let* ((d-comint-dnode-mode-prog (or explicit-dnode-file-name
					   (getenv "EDNODE")
					   (getenv "DNODE")
					   "@bindir@/dnode"))
	     (port-string (format "%d" port))
	     (name (format "%s-%d" 
			   (file-name-nondirectory d-comint-dnode-mode-prog) 
			   port))
	     (d-comint-dnode-mode-dnode-args 
	      (append d-comint-dnode-mode-dnode-args (list port-string))))
	(save-excursion
	  (set-buffer 
	   (setq d-comint-dnode-mode-dnode-buffer 
		 (get-buffer-create dnode-buffer-name)))
	  (d-comint-dnode-mode))))
    
    (if (eq major-mode 'd-comint-dnode-mode)
	(switch-to-buffer d-comint-dnode-mode-dnode-buffer)
      (let (old-windows (get-buffer-window-list 
			 d-comint-dnode-mode-dnode-buffer))
	(pop-to-buffer d-comint-dnode-mode-dnode-buffer)
	(unless (catch 'find-window
		  (dolist (old-window old-windows)
		    (when (eq old-window (selected-window))
		      (throw 'find-window t))))
	  (shrink-window (- (window-height) d-comint-mode-window-size)))))))

(require 'ansi-color)
(provide 'd-comint-mode)
