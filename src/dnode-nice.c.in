#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <sys/wait.h>
#include <signal.h>

char quit = 0;
void sigint(int sig) {quit = 1;}

int main(int argc, char* argv[]) {
  long port;
  long renice;
  char* endptr;
  char* display;
  pid_t pid, pidr;
  int status;
  struct sigaction sa;

  if (argc != 3) {
	fprintf(stderr, "Arguments: port renice-number\nParams: %d", argc-1);
	return 1;
  }
  
  port = strtol(argv[1], &endptr, 0);
  if (! *(argv[1]) || *endptr) {
	fprintf(stderr, "Port argument must be an integer: `%s'\n", argv[1]);
	return 1;
  }
  renice = strtol(argv[2], &endptr, 0);
  if (! *(argv[2]) || *endptr) {
	fprintf(stderr, "Renice argument must be an integer: `%s'\n", argv[2]);
	return 1;
  }

 FORK:
  sa.sa_handler = sigint;
  sa.sa_flags = SA_RESETHAND;
  if (sigaction(SIGINT, &sa, NULL) == -1) {
	perror("Unable to setup signal handler");
	return 1;
  }

  if ((pid = fork()) == -1) {
	perror("Unable to fork");
	return 1;
  }

  if (pid) {
	sleep(10);
	if ((pidr = waitpid(pid, &status, WNOHANG)) == -1) {
	  perror("Unable to wait");
	  return 1;
	}
	
	if (quit) {
	  fprintf(stderr, "Dnode setup failure...");
	  if (pidr != pid && (pidr = waitpid(pid, NULL, 0) != pidr)) 
		perror("Unable to wait again");
	  return 1;
	}

	if (pidr == pid) {
	  fprintf(stdout, "Trying again...\n");
	  goto FORK;
	}

	if (waitpid(pid, &status, 0) == -1) {
	  perror("Unable to wait");
	  return 1;
	}

	if (WIFEXITED(status)) return WEXITSTATUS(status);
	return -1;
  }
	
  sa.sa_handler = SIG_DFL;
  sa.sa_flags = 0;
  if (sigaction(SIGINT, &sa, NULL) == -1) {
	printf("Unable to reset SIGINT");
	if (kill(getppid(), SIGINT) == -1)
	  perror("Unable to signal parent");
	return 1;
  }
	
  if (geteuid() != 0) {
	fprintf(stderr, "Not installed setuid\nNot trying to renice\n");
  }
  else {
	errno = 0;
	if (nice(renice) == -1 && errno) {
	  perror("Unable to renice");
	}
	if (setuid(getuid())) {
	  perror("Unable to drop privileges");
	  if (kill(getppid(), SIGINT) == -1)
		perror("Unable to signal parent");
	  return 1;
	}
  }
  
  if (display = getenv("DISPLAY")) 
	fprintf(stdout, "$DISPLAY=%s\n", display);

  
  execl("@bindir@/dnode", "@bindir@/dnode", argv[1], NULL);

  perror("Unable to run `@bindir@/dnode'");
  if (kill(getppid(), SIGINT) == -1)
	perror("Unable to signal parent");
  return 1;
}
  
