

static void DBencode(D t, B *dp)
{
*((B *)dp) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
static void DWencode(D t, B *dp)
{
*((W *)dp) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
static void DLencode(D t, B *dp)
{
*((L *)dp) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
static void DSencode(D t, B *dp)
{
*((S *)dp) = t;
}
static void DDencode(D t, B *dp)
{
*((D *)dp) = t;
}
typedef void (*ENCODEfct)(D,B*);
static ENCODEfct ENCODElist[] = {
DBencode, 
DWencode, 
DLencode, 
DSencode, 
DDencode, 
};

static L BLvalue(B *sp)
{
D t; L tc;
if ((t = *((B *)sp)) == BINF) t = DINF;
*((L *)&tc) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
return(tc);
}
static L WLvalue(B *sp)
{
D t; L tc;
if ((t = *((W *)sp)) == WINF) t = DINF;
*((L *)&tc) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
return(tc);
}
static L LLvalue(B *sp)
{
D t; L tc;
if ((t = *((L *)sp)) == LINF) t = DINF;
*((L *)&tc) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
return(tc);
}
static L SLvalue(B *sp)
{
D t; L tc;
t = *((S *)sp);
*((L *)&tc) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
return(tc);
}
static L DLvalue(B *sp)
{
D t; L tc;
t = *((D *)sp);
*((L *)&tc) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
return(tc);
}
typedef L (*VALUEfct)(B*);
static VALUEfct VALUElist[] = {
BLvalue, 
WLvalue, 
LLvalue, 
SLvalue, 
DLvalue, 
};

static D BDtest(B *sp)
{
D t;
if ((t = *((B *)sp)) == BINF) t = DINF;
return(t);
}
static D WDtest(B *sp)
{
D t;
if ((t = *((W *)sp)) == WINF) t = DINF;
return(t);
}
static D LDtest(B *sp)
{
D t;
if ((t = *((L *)sp)) == LINF) t = DINF;
return(t);
}
static D SDtest(B *sp)
{
D t;
t = *((S *)sp);
return(t);
}
static D DDtest(B *sp)
{
D t;
t = *((D *)sp);
return(t);
}
typedef D (*TESTfct)(B*);
static TESTfct TESTlist[] = {
BDtest, 
WDtest, 
LDtest, 
SDtest, 
DDtest, 
};

static void BBmoveSS(B *sf, B *df)
{
D t;
if ((t = *((B *)NUM_VAL(sf))) == BINF) t = DINF;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BBmoveSA(B *sf, B *df)
{
D t; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((t = *((B *)NUM_VAL(sf))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBmoveAS(B *sf, B *df)
{
D t; B *s; 
s = (B *)VALUE_BASE(sf);

if ((t = *((B *)s)) == BINF) t = DINF;

*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BBmoveAAp(B *sf, B *df)
{
D t; L n; B * restrict s; B * restrict d;
s = (B *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBmoveAAs(B *sf, B *df)
{
D t; L n; B * s; B * d;
s = (B *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBmoveAA(B *sf, B *df)
{
if (serialized) BBmoveAAs(sf,df);
else BBmoveAAp(sf,df);
}

static void BWmoveSS(B *sf, B *df)
{
D t;
if ((t = *((B *)NUM_VAL(sf))) == BINF) t = DINF;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void BWmoveSA(B *sf, B *df)
{
D t; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((t = *((B *)NUM_VAL(sf))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void BWmoveAS(B *sf, B *df)
{
D t; B *s; 
s = (B *)VALUE_BASE(sf);

if ((t = *((B *)s)) == BINF) t = DINF;

*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void BWmoveAAp(B *sf, B *df)
{
D t; L n; B * restrict s; W * restrict d;
s = (B *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void BWmoveAAs(B *sf, B *df)
{
D t; L n; B * s; W * d;
s = (B *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void BWmoveAA(B *sf, B *df)
{
if (serialized) BWmoveAAs(sf,df);
else BWmoveAAp(sf,df);
}

static void BLmoveSS(B *sf, B *df)
{
D t;
if ((t = *((B *)NUM_VAL(sf))) == BINF) t = DINF;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void BLmoveSA(B *sf, B *df)
{
D t; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((t = *((B *)NUM_VAL(sf))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void BLmoveAS(B *sf, B *df)
{
D t; B *s; 
s = (B *)VALUE_BASE(sf);

if ((t = *((B *)s)) == BINF) t = DINF;

*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void BLmoveAAp(B *sf, B *df)
{
D t; L n; B * restrict s; L * restrict d;
s = (B *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void BLmoveAAs(B *sf, B *df)
{
D t; L n; B * s; L * d;
s = (B *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void BLmoveAA(B *sf, B *df)
{
if (serialized) BLmoveAAs(sf,df);
else BLmoveAAp(sf,df);
}

static void BSmoveSS(B *sf, B *df)
{
D t;
if ((t = *((B *)NUM_VAL(sf))) == BINF) t = DINF;
*((S *)NUM_VAL(df)) = t;
}

static void BSmoveSA(B *sf, B *df)
{
D t; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((t = *((B *)NUM_VAL(sf))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((S *)d++) = t;
}
}

static void BSmoveAS(B *sf, B *df)
{
D t; B *s; 
s = (B *)VALUE_BASE(sf);

if ((t = *((B *)s)) == BINF) t = DINF;

*((S *)NUM_VAL(df)) = t;
}

static void BSmoveAAp(B *sf, B *df)
{
D t; L n; B * restrict s; S * restrict d;
s = (B *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
}
}

static void BSmoveAAs(B *sf, B *df)
{
D t; L n; B * s; S * d;
s = (B *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((S *)d++) = t;
}
}

static void BSmoveAA(B *sf, B *df)
{
if (serialized) BSmoveAAs(sf,df);
else BSmoveAAp(sf,df);
}

static void BDmoveSS(B *sf, B *df)
{
D t;
if ((t = *((B *)NUM_VAL(sf))) == BINF) t = DINF;
*((D *)NUM_VAL(df)) = t;
}

static void BDmoveSA(B *sf, B *df)
{
D t; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((t = *((B *)NUM_VAL(sf))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((D *)d++) = t;
}
}

static void BDmoveAS(B *sf, B *df)
{
D t; B *s; 
s = (B *)VALUE_BASE(sf);

if ((t = *((B *)s)) == BINF) t = DINF;

*((D *)NUM_VAL(df)) = t;
}

static void BDmoveAAp(B *sf, B *df)
{
D t; L n; B * restrict s; D * restrict d;
s = (B *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
}
}

static void BDmoveAAs(B *sf, B *df)
{
D t; L n; B * s; D * d;
s = (B *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)s++)) == BINF) t = DINF;
*((D *)d++) = t;
}
}

static void BDmoveAA(B *sf, B *df)
{
if (serialized) BDmoveAAs(sf,df);
else BDmoveAAp(sf,df);
}

static void WBmoveSS(B *sf, B *df)
{
D t;
if ((t = *((W *)NUM_VAL(sf))) == WINF) t = DINF;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void WBmoveSA(B *sf, B *df)
{
D t; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((t = *((W *)NUM_VAL(sf))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void WBmoveAS(B *sf, B *df)
{
D t; W *s; 
s = (W *)VALUE_BASE(sf);

if ((t = *((W *)s)) == WINF) t = DINF;

*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void WBmoveAAp(B *sf, B *df)
{
D t; L n; W * restrict s; B * restrict d;
s = (W *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void WBmoveAAs(B *sf, B *df)
{
D t; L n; W * s; B * d;
s = (W *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void WBmoveAA(B *sf, B *df)
{
if (serialized) WBmoveAAs(sf,df);
else WBmoveAAp(sf,df);
}

static void WWmoveSS(B *sf, B *df)
{
D t;
if ((t = *((W *)NUM_VAL(sf))) == WINF) t = DINF;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WWmoveSA(B *sf, B *df)
{
D t; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((t = *((W *)NUM_VAL(sf))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWmoveAS(B *sf, B *df)
{
D t; W *s; 
s = (W *)VALUE_BASE(sf);

if ((t = *((W *)s)) == WINF) t = DINF;

*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WWmoveAAp(B *sf, B *df)
{
D t; L n; W * restrict s; W * restrict d;
s = (W *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWmoveAAs(B *sf, B *df)
{
D t; L n; W * s; W * d;
s = (W *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWmoveAA(B *sf, B *df)
{
if (serialized) WWmoveAAs(sf,df);
else WWmoveAAp(sf,df);
}

static void WLmoveSS(B *sf, B *df)
{
D t;
if ((t = *((W *)NUM_VAL(sf))) == WINF) t = DINF;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void WLmoveSA(B *sf, B *df)
{
D t; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((t = *((W *)NUM_VAL(sf))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void WLmoveAS(B *sf, B *df)
{
D t; W *s; 
s = (W *)VALUE_BASE(sf);

if ((t = *((W *)s)) == WINF) t = DINF;

*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void WLmoveAAp(B *sf, B *df)
{
D t; L n; W * restrict s; L * restrict d;
s = (W *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void WLmoveAAs(B *sf, B *df)
{
D t; L n; W * s; L * d;
s = (W *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void WLmoveAA(B *sf, B *df)
{
if (serialized) WLmoveAAs(sf,df);
else WLmoveAAp(sf,df);
}

static void WSmoveSS(B *sf, B *df)
{
D t;
if ((t = *((W *)NUM_VAL(sf))) == WINF) t = DINF;
*((S *)NUM_VAL(df)) = t;
}

static void WSmoveSA(B *sf, B *df)
{
D t; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((t = *((W *)NUM_VAL(sf))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((S *)d++) = t;
}
}

static void WSmoveAS(B *sf, B *df)
{
D t; W *s; 
s = (W *)VALUE_BASE(sf);

if ((t = *((W *)s)) == WINF) t = DINF;

*((S *)NUM_VAL(df)) = t;
}

static void WSmoveAAp(B *sf, B *df)
{
D t; L n; W * restrict s; S * restrict d;
s = (W *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
}
}

static void WSmoveAAs(B *sf, B *df)
{
D t; L n; W * s; S * d;
s = (W *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((S *)d++) = t;
}
}

static void WSmoveAA(B *sf, B *df)
{
if (serialized) WSmoveAAs(sf,df);
else WSmoveAAp(sf,df);
}

static void WDmoveSS(B *sf, B *df)
{
D t;
if ((t = *((W *)NUM_VAL(sf))) == WINF) t = DINF;
*((D *)NUM_VAL(df)) = t;
}

static void WDmoveSA(B *sf, B *df)
{
D t; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((t = *((W *)NUM_VAL(sf))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((D *)d++) = t;
}
}

static void WDmoveAS(B *sf, B *df)
{
D t; W *s; 
s = (W *)VALUE_BASE(sf);

if ((t = *((W *)s)) == WINF) t = DINF;

*((D *)NUM_VAL(df)) = t;
}

static void WDmoveAAp(B *sf, B *df)
{
D t; L n; W * restrict s; D * restrict d;
s = (W *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
}
}

static void WDmoveAAs(B *sf, B *df)
{
D t; L n; W * s; D * d;
s = (W *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)s++)) == WINF) t = DINF;
*((D *)d++) = t;
}
}

static void WDmoveAA(B *sf, B *df)
{
if (serialized) WDmoveAAs(sf,df);
else WDmoveAAp(sf,df);
}

static void LBmoveSS(B *sf, B *df)
{
D t;
if ((t = *((L *)NUM_VAL(sf))) == LINF) t = DINF;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void LBmoveSA(B *sf, B *df)
{
D t; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((t = *((L *)NUM_VAL(sf))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void LBmoveAS(B *sf, B *df)
{
D t; L *s; 
s = (L *)VALUE_BASE(sf);

if ((t = *((L *)s)) == LINF) t = DINF;

*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void LBmoveAAp(B *sf, B *df)
{
D t; L n; L * restrict s; B * restrict d;
s = (L *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void LBmoveAAs(B *sf, B *df)
{
D t; L n; L * s; B * d;
s = (L *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void LBmoveAA(B *sf, B *df)
{
if (serialized) LBmoveAAs(sf,df);
else LBmoveAAp(sf,df);
}

static void LWmoveSS(B *sf, B *df)
{
D t;
if ((t = *((L *)NUM_VAL(sf))) == LINF) t = DINF;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void LWmoveSA(B *sf, B *df)
{
D t; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((t = *((L *)NUM_VAL(sf))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void LWmoveAS(B *sf, B *df)
{
D t; L *s; 
s = (L *)VALUE_BASE(sf);

if ((t = *((L *)s)) == LINF) t = DINF;

*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void LWmoveAAp(B *sf, B *df)
{
D t; L n; L * restrict s; W * restrict d;
s = (L *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void LWmoveAAs(B *sf, B *df)
{
D t; L n; L * s; W * d;
s = (L *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void LWmoveAA(B *sf, B *df)
{
if (serialized) LWmoveAAs(sf,df);
else LWmoveAAp(sf,df);
}

static void LLmoveSS(B *sf, B *df)
{
D t;
if ((t = *((L *)NUM_VAL(sf))) == LINF) t = DINF;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LLmoveSA(B *sf, B *df)
{
D t; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((t = *((L *)NUM_VAL(sf))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLmoveAS(B *sf, B *df)
{
D t; L *s; 
s = (L *)VALUE_BASE(sf);

if ((t = *((L *)s)) == LINF) t = DINF;

*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LLmoveAAp(B *sf, B *df)
{
D t; L n; L * restrict s; L * restrict d;
s = (L *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLmoveAAs(B *sf, B *df)
{
D t; L n; L * s; L * d;
s = (L *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLmoveAA(B *sf, B *df)
{
if (serialized) LLmoveAAs(sf,df);
else LLmoveAAp(sf,df);
}

static void LSmoveSS(B *sf, B *df)
{
D t;
if ((t = *((L *)NUM_VAL(sf))) == LINF) t = DINF;
*((S *)NUM_VAL(df)) = t;
}

static void LSmoveSA(B *sf, B *df)
{
D t; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((t = *((L *)NUM_VAL(sf))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((S *)d++) = t;
}
}

static void LSmoveAS(B *sf, B *df)
{
D t; L *s; 
s = (L *)VALUE_BASE(sf);

if ((t = *((L *)s)) == LINF) t = DINF;

*((S *)NUM_VAL(df)) = t;
}

static void LSmoveAAp(B *sf, B *df)
{
D t; L n; L * restrict s; S * restrict d;
s = (L *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
}
}

static void LSmoveAAs(B *sf, B *df)
{
D t; L n; L * s; S * d;
s = (L *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((S *)d++) = t;
}
}

static void LSmoveAA(B *sf, B *df)
{
if (serialized) LSmoveAAs(sf,df);
else LSmoveAAp(sf,df);
}

static void LDmoveSS(B *sf, B *df)
{
D t;
if ((t = *((L *)NUM_VAL(sf))) == LINF) t = DINF;
*((D *)NUM_VAL(df)) = t;
}

static void LDmoveSA(B *sf, B *df)
{
D t; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((t = *((L *)NUM_VAL(sf))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((D *)d++) = t;
}
}

static void LDmoveAS(B *sf, B *df)
{
D t; L *s; 
s = (L *)VALUE_BASE(sf);

if ((t = *((L *)s)) == LINF) t = DINF;

*((D *)NUM_VAL(df)) = t;
}

static void LDmoveAAp(B *sf, B *df)
{
D t; L n; L * restrict s; D * restrict d;
s = (L *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
}
}

static void LDmoveAAs(B *sf, B *df)
{
D t; L n; L * s; D * d;
s = (L *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)s++)) == LINF) t = DINF;
*((D *)d++) = t;
}
}

static void LDmoveAA(B *sf, B *df)
{
if (serialized) LDmoveAAs(sf,df);
else LDmoveAAp(sf,df);
}

static void SBmoveSS(B *sf, B *df)
{
D t;
t = *((S *)NUM_VAL(sf));
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void SBmoveSA(B *sf, B *df)
{
D t; L n; B *d;
d = (B *)VALUE_BASE(df);
t = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void SBmoveAS(B *sf, B *df)
{
D t; S *s; 
s = (S *)VALUE_BASE(sf);

t = *((S *)s);

*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void SBmoveAAp(B *sf, B *df)
{
D t; L n; S * restrict s; B * restrict d;
s = (S *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void SBmoveAAs(B *sf, B *df)
{
D t; L n; S * s; B * d;
s = (S *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void SBmoveAA(B *sf, B *df)
{
if (serialized) SBmoveAAs(sf,df);
else SBmoveAAp(sf,df);
}

static void SWmoveSS(B *sf, B *df)
{
D t;
t = *((S *)NUM_VAL(sf));
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void SWmoveSA(B *sf, B *df)
{
D t; L n; W *d;
d = (W *)VALUE_BASE(df);
t = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void SWmoveAS(B *sf, B *df)
{
D t; S *s; 
s = (S *)VALUE_BASE(sf);

t = *((S *)s);

*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void SWmoveAAp(B *sf, B *df)
{
D t; L n; S * restrict s; W * restrict d;
s = (S *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void SWmoveAAs(B *sf, B *df)
{
D t; L n; S * s; W * d;
s = (S *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void SWmoveAA(B *sf, B *df)
{
if (serialized) SWmoveAAs(sf,df);
else SWmoveAAp(sf,df);
}

static void SLmoveSS(B *sf, B *df)
{
D t;
t = *((S *)NUM_VAL(sf));
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void SLmoveSA(B *sf, B *df)
{
D t; L n; L *d;
d = (L *)VALUE_BASE(df);
t = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void SLmoveAS(B *sf, B *df)
{
D t; S *s; 
s = (S *)VALUE_BASE(sf);

t = *((S *)s);

*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void SLmoveAAp(B *sf, B *df)
{
D t; L n; S * restrict s; L * restrict d;
s = (S *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void SLmoveAAs(B *sf, B *df)
{
D t; L n; S * s; L * d;
s = (S *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void SLmoveAA(B *sf, B *df)
{
if (serialized) SLmoveAAs(sf,df);
else SLmoveAAp(sf,df);
}

static void SSmoveSS(B *sf, B *df)
{
D t;
t = *((S *)NUM_VAL(sf));
*((S *)NUM_VAL(df)) = t;
}

static void SSmoveSA(B *sf, B *df)
{
D t; L n; S *d;
d = (S *)VALUE_BASE(df);
t = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((S *)d++) = t;
}
}

static void SSmoveAS(B *sf, B *df)
{
D t; S *s; 
s = (S *)VALUE_BASE(sf);

t = *((S *)s);

*((S *)NUM_VAL(df)) = t;
}

static void SSmoveAAp(B *sf, B *df)
{
D t; L n; S * restrict s; S * restrict d;
s = (S *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)s++);
*((S *)d++) = t;
}
}

static void SSmoveAAs(B *sf, B *df)
{
D t; L n; S * s; S * d;
s = (S *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
t = *((S *)s++);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)s++);
*((S *)d++) = t;
}
}

static void SSmoveAA(B *sf, B *df)
{
if (serialized) SSmoveAAs(sf,df);
else SSmoveAAp(sf,df);
}

static void SDmoveSS(B *sf, B *df)
{
D t;
t = *((S *)NUM_VAL(sf));
*((D *)NUM_VAL(df)) = t;
}

static void SDmoveSA(B *sf, B *df)
{
D t; L n; D *d;
d = (D *)VALUE_BASE(df);
t = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((D *)d++) = t;
}
}

static void SDmoveAS(B *sf, B *df)
{
D t; S *s; 
s = (S *)VALUE_BASE(sf);

t = *((S *)s);

*((D *)NUM_VAL(df)) = t;
}

static void SDmoveAAp(B *sf, B *df)
{
D t; L n; S * restrict s; D * restrict d;
s = (S *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)s++);
*((D *)d++) = t;
}
}

static void SDmoveAAs(B *sf, B *df)
{
D t; L n; S * s; D * d;
s = (S *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
t = *((S *)s++);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)s++);
*((D *)d++) = t;
}
}

static void SDmoveAA(B *sf, B *df)
{
if (serialized) SDmoveAAs(sf,df);
else SDmoveAAp(sf,df);
}

static void DBmoveSS(B *sf, B *df)
{
D t;
t = *((D *)NUM_VAL(sf));
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void DBmoveSA(B *sf, B *df)
{
D t; L n; B *d;
d = (B *)VALUE_BASE(df);
t = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void DBmoveAS(B *sf, B *df)
{
D t; D *s; 
s = (D *)VALUE_BASE(sf);

t = *((D *)s);

*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void DBmoveAAp(B *sf, B *df)
{
D t; L n; D * restrict s; B * restrict d;
s = (D *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void DBmoveAAs(B *sf, B *df)
{
D t; L n; D * s; B * d;
s = (D *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)s++);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void DBmoveAA(B *sf, B *df)
{
if (serialized) DBmoveAAs(sf,df);
else DBmoveAAp(sf,df);
}

static void DWmoveSS(B *sf, B *df)
{
D t;
t = *((D *)NUM_VAL(sf));
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void DWmoveSA(B *sf, B *df)
{
D t; L n; W *d;
d = (W *)VALUE_BASE(df);
t = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void DWmoveAS(B *sf, B *df)
{
D t; D *s; 
s = (D *)VALUE_BASE(sf);

t = *((D *)s);

*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void DWmoveAAp(B *sf, B *df)
{
D t; L n; D * restrict s; W * restrict d;
s = (D *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void DWmoveAAs(B *sf, B *df)
{
D t; L n; D * s; W * d;
s = (D *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)s++);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void DWmoveAA(B *sf, B *df)
{
if (serialized) DWmoveAAs(sf,df);
else DWmoveAAp(sf,df);
}

static void DLmoveSS(B *sf, B *df)
{
D t;
t = *((D *)NUM_VAL(sf));
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void DLmoveSA(B *sf, B *df)
{
D t; L n; L *d;
d = (L *)VALUE_BASE(df);
t = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void DLmoveAS(B *sf, B *df)
{
D t; D *s; 
s = (D *)VALUE_BASE(sf);

t = *((D *)s);

*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void DLmoveAAp(B *sf, B *df)
{
D t; L n; D * restrict s; L * restrict d;
s = (D *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void DLmoveAAs(B *sf, B *df)
{
D t; L n; D * s; L * d;
s = (D *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)s++);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void DLmoveAA(B *sf, B *df)
{
if (serialized) DLmoveAAs(sf,df);
else DLmoveAAp(sf,df);
}

static void DSmoveSS(B *sf, B *df)
{
D t;
t = *((D *)NUM_VAL(sf));
*((S *)NUM_VAL(df)) = t;
}

static void DSmoveSA(B *sf, B *df)
{
D t; L n; S *d;
d = (S *)VALUE_BASE(df);
t = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((S *)d++) = t;
}
}

static void DSmoveAS(B *sf, B *df)
{
D t; D *s; 
s = (D *)VALUE_BASE(sf);

t = *((D *)s);

*((S *)NUM_VAL(df)) = t;
}

static void DSmoveAAp(B *sf, B *df)
{
D t; L n; D * restrict s; S * restrict d;
s = (D *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)s++);
*((S *)d++) = t;
}
}

static void DSmoveAAs(B *sf, B *df)
{
D t; L n; D * s; S * d;
s = (D *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
t = *((D *)s++);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)s++);
*((S *)d++) = t;
}
}

static void DSmoveAA(B *sf, B *df)
{
if (serialized) DSmoveAAs(sf,df);
else DSmoveAAp(sf,df);
}

static void DDmoveSS(B *sf, B *df)
{
D t;
t = *((D *)NUM_VAL(sf));
*((D *)NUM_VAL(df)) = t;
}

static void DDmoveSA(B *sf, B *df)
{
D t; L n; D *d;
d = (D *)VALUE_BASE(df);
t = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
*((D *)d++) = t;
}
}

static void DDmoveAS(B *sf, B *df)
{
D t; D *s; 
s = (D *)VALUE_BASE(sf);

t = *((D *)s);

*((D *)NUM_VAL(df)) = t;
}

static void DDmoveAAp(B *sf, B *df)
{
D t; L n; D * restrict s; D * restrict d;
s = (D *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)s++);
*((D *)d++) = t;
}
}

static void DDmoveAAs(B *sf, B *df)
{
D t; L n; D * s; D * d;
s = (D *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
t = *((D *)s++);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)s++);
*((D *)d++) = t;
}
}

static void DDmoveAA(B *sf, B *df)
{
if (serialized) DDmoveAAs(sf,df);
else DDmoveAAp(sf,df);
}

typedef void (*MOVEfct)(B*,B*);
static MOVEfct MOVElist[] = {
BBmoveSS, BBmoveSA, BBmoveAS, BBmoveAA, 
BWmoveSS, BWmoveSA, BWmoveAS, BWmoveAA, 
BLmoveSS, BLmoveSA, BLmoveAS, BLmoveAA, 
BSmoveSS, BSmoveSA, BSmoveAS, BSmoveAA, 
BDmoveSS, BDmoveSA, BDmoveAS, BDmoveAA, 
WBmoveSS, WBmoveSA, WBmoveAS, WBmoveAA, 
WWmoveSS, WWmoveSA, WWmoveAS, WWmoveAA, 
WLmoveSS, WLmoveSA, WLmoveAS, WLmoveAA, 
WSmoveSS, WSmoveSA, WSmoveAS, WSmoveAA, 
WDmoveSS, WDmoveSA, WDmoveAS, WDmoveAA, 
LBmoveSS, LBmoveSA, LBmoveAS, LBmoveAA, 
LWmoveSS, LWmoveSA, LWmoveAS, LWmoveAA, 
LLmoveSS, LLmoveSA, LLmoveAS, LLmoveAA, 
LSmoveSS, LSmoveSA, LSmoveAS, LSmoveAA, 
LDmoveSS, LDmoveSA, LDmoveAS, LDmoveAA, 
SBmoveSS, SBmoveSA, SBmoveAS, SBmoveAA, 
SWmoveSS, SWmoveSA, SWmoveAS, SWmoveAA, 
SLmoveSS, SLmoveSA, SLmoveAS, SLmoveAA, 
SSmoveSS, SSmoveSA, SSmoveAS, SSmoveAA, 
SDmoveSS, SDmoveSA, SDmoveAS, SDmoveAA, 
DBmoveSS, DBmoveSA, DBmoveAS, DBmoveAA, 
DWmoveSS, DWmoveSA, DWmoveAS, DWmoveAA, 
DLmoveSS, DLmoveSA, DLmoveAS, DLmoveAA, 
DSmoveSS, DSmoveSA, DSmoveAS, DSmoveAA, 
DDmoveSS, DDmoveSA, DDmoveAS, DDmoveAA, 

};

static void BBdyADDSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t += tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BBdyADDAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyADDSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BBdyADDAAp(B * df, B * sf)
{
L n; B * restrict s; B * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyADDAAs(B * df, B * sf)
{
L n; B * s; B * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyADDAA(B * df, B * sf)
{
if (serialized) BBdyADDAAs(df,sf);
else BBdyADDAAp(df,sf);
}

static void BBdySUBSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t -= tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BBdySUBAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdySUBSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BBdySUBAAp(B * df, B * sf)
{
L n; B * restrict s; B * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdySUBAAs(B * df, B * sf)
{
L n; B * s; B * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdySUBAA(B * df, B * sf)
{
if (serialized) BBdySUBAAs(df,sf);
else BBdySUBAAp(df,sf);
}

static void BBdyMULSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t *= tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BBdyMULAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyMULSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BBdyMULAAp(B * df, B * sf)
{
L n; B * restrict s; B * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyMULAAs(B * df, B * sf)
{
L n; B * s; B * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyMULAA(B * df, B * sf)
{
if (serialized) BBdyMULAAs(df,sf);
else BBdyMULAAp(df,sf);
}

static void BBdyDIVSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t /= tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BBdyDIVAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyDIVSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BBdyDIVAAp(B * df, B * sf)
{
L n; B * restrict s; B * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyDIVAAs(B * df, B * sf)
{
L n; B * s; B * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyDIVAA(B * df, B * sf)
{
if (serialized) BBdyDIVAAs(df,sf);
else BBdyDIVAAp(df,sf);
}

static void BBdyPWRSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t = pow(t,tt);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BBdyPWRAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyPWRSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BBdyPWRAAp(B * df, B * sf)
{
L n; B * restrict s; B * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyPWRAAs(B * df, B * sf)
{
L n; B * s; B * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyPWRAA(B * df, B * sf)
{
if (serialized) BBdyPWRAAs(df,sf);
else BBdyPWRAAp(df,sf);
}

static void BBdyMODSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t = fmod(t,tt);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BBdyMODAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyMODSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BBdyMODAAp(B * df, B * sf)
{
L n; B * restrict s; B * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyMODAAs(B * df, B * sf)
{
L n; B * s; B * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyMODAA(B * df, B * sf)
{
if (serialized) BBdyMODAAs(df,sf);
else BBdyMODAAp(df,sf);
}

static void BBdyTHEARCSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t = thearc(t,tt);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BBdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BBdyTHEARCAAp(B * df, B * sf)
{
L n; B * restrict s; B * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyTHEARCAAs(B * df, B * sf)
{
L n; B * s; B * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BBdyTHEARCAA(B * df, B * sf)
{
if (serialized) BBdyTHEARCAAs(df,sf);
else BBdyTHEARCAAp(df,sf);
}

static void BWdyADDSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t += tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BWdyADDAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyADDSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BWdyADDAAp(B * df, B * sf)
{
L n; W * restrict s; B * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyADDAAs(B * df, B * sf)
{
L n; W * s; B * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyADDAA(B * df, B * sf)
{
if (serialized) BWdyADDAAs(df,sf);
else BWdyADDAAp(df,sf);
}

static void BWdySUBSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t -= tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BWdySUBAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdySUBSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BWdySUBAAp(B * df, B * sf)
{
L n; W * restrict s; B * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdySUBAAs(B * df, B * sf)
{
L n; W * s; B * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdySUBAA(B * df, B * sf)
{
if (serialized) BWdySUBAAs(df,sf);
else BWdySUBAAp(df,sf);
}

static void BWdyMULSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t *= tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BWdyMULAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyMULSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BWdyMULAAp(B * df, B * sf)
{
L n; W * restrict s; B * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyMULAAs(B * df, B * sf)
{
L n; W * s; B * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyMULAA(B * df, B * sf)
{
if (serialized) BWdyMULAAs(df,sf);
else BWdyMULAAp(df,sf);
}

static void BWdyDIVSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t /= tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BWdyDIVAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyDIVSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BWdyDIVAAp(B * df, B * sf)
{
L n; W * restrict s; B * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyDIVAAs(B * df, B * sf)
{
L n; W * s; B * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyDIVAA(B * df, B * sf)
{
if (serialized) BWdyDIVAAs(df,sf);
else BWdyDIVAAp(df,sf);
}

static void BWdyPWRSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t = pow(t,tt);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BWdyPWRAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyPWRSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BWdyPWRAAp(B * df, B * sf)
{
L n; W * restrict s; B * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyPWRAAs(B * df, B * sf)
{
L n; W * s; B * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyPWRAA(B * df, B * sf)
{
if (serialized) BWdyPWRAAs(df,sf);
else BWdyPWRAAp(df,sf);
}

static void BWdyMODSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t = fmod(t,tt);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BWdyMODAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyMODSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BWdyMODAAp(B * df, B * sf)
{
L n; W * restrict s; B * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyMODAAs(B * df, B * sf)
{
L n; W * s; B * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyMODAA(B * df, B * sf)
{
if (serialized) BWdyMODAAs(df,sf);
else BWdyMODAAp(df,sf);
}

static void BWdyTHEARCSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t = thearc(t,tt);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BWdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BWdyTHEARCAAp(B * df, B * sf)
{
L n; W * restrict s; B * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyTHEARCAAs(B * df, B * sf)
{
L n; W * s; B * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BWdyTHEARCAA(B * df, B * sf)
{
if (serialized) BWdyTHEARCAAs(df,sf);
else BWdyTHEARCAAp(df,sf);
}

static void BLdyADDSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t += tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BLdyADDAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyADDSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BLdyADDAAp(B * df, B * sf)
{
L n; L * restrict s; B * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyADDAAs(B * df, B * sf)
{
L n; L * s; B * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyADDAA(B * df, B * sf)
{
if (serialized) BLdyADDAAs(df,sf);
else BLdyADDAAp(df,sf);
}

static void BLdySUBSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t -= tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BLdySUBAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdySUBSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BLdySUBAAp(B * df, B * sf)
{
L n; L * restrict s; B * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdySUBAAs(B * df, B * sf)
{
L n; L * s; B * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdySUBAA(B * df, B * sf)
{
if (serialized) BLdySUBAAs(df,sf);
else BLdySUBAAp(df,sf);
}

static void BLdyMULSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t *= tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BLdyMULAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyMULSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BLdyMULAAp(B * df, B * sf)
{
L n; L * restrict s; B * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyMULAAs(B * df, B * sf)
{
L n; L * s; B * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyMULAA(B * df, B * sf)
{
if (serialized) BLdyMULAAs(df,sf);
else BLdyMULAAp(df,sf);
}

static void BLdyDIVSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t /= tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BLdyDIVAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyDIVSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BLdyDIVAAp(B * df, B * sf)
{
L n; L * restrict s; B * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyDIVAAs(B * df, B * sf)
{
L n; L * s; B * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyDIVAA(B * df, B * sf)
{
if (serialized) BLdyDIVAAs(df,sf);
else BLdyDIVAAp(df,sf);
}

static void BLdyPWRSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t = pow(t,tt);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BLdyPWRAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyPWRSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BLdyPWRAAp(B * df, B * sf)
{
L n; L * restrict s; B * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyPWRAAs(B * df, B * sf)
{
L n; L * s; B * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyPWRAA(B * df, B * sf)
{
if (serialized) BLdyPWRAAs(df,sf);
else BLdyPWRAAp(df,sf);
}

static void BLdyMODSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t = fmod(t,tt);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BLdyMODAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyMODSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BLdyMODAAp(B * df, B * sf)
{
L n; L * restrict s; B * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyMODAAs(B * df, B * sf)
{
L n; L * s; B * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyMODAA(B * df, B * sf)
{
if (serialized) BLdyMODAAs(df,sf);
else BLdyMODAAp(df,sf);
}

static void BLdyTHEARCSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t = thearc(t,tt);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BLdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BLdyTHEARCAAp(B * df, B * sf)
{
L n; L * restrict s; B * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyTHEARCAAs(B * df, B * sf)
{
L n; L * s; B * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BLdyTHEARCAA(B * df, B * sf)
{
if (serialized) BLdyTHEARCAAs(df,sf);
else BLdyTHEARCAAp(df,sf);
}

static void BSdyADDSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t += tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BSdyADDAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyADDSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t += tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BSdyADDAAp(B * df, B * sf)
{
L n; S * restrict s; B * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyADDAAs(B * df, B * sf)
{
L n; S * s; B * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyADDAA(B * df, B * sf)
{
if (serialized) BSdyADDAAs(df,sf);
else BSdyADDAAp(df,sf);
}

static void BSdySUBSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t -= tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BSdySUBAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdySUBSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t -= tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BSdySUBAAp(B * df, B * sf)
{
L n; S * restrict s; B * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdySUBAAs(B * df, B * sf)
{
L n; S * s; B * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdySUBAA(B * df, B * sf)
{
if (serialized) BSdySUBAAs(df,sf);
else BSdySUBAAp(df,sf);
}

static void BSdyMULSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t *= tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BSdyMULAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyMULSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t *= tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BSdyMULAAp(B * df, B * sf)
{
L n; S * restrict s; B * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyMULAAs(B * df, B * sf)
{
L n; S * s; B * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyMULAA(B * df, B * sf)
{
if (serialized) BSdyMULAAs(df,sf);
else BSdyMULAAp(df,sf);
}

static void BSdyDIVSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t /= tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BSdyDIVAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyDIVSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t /= tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BSdyDIVAAp(B * df, B * sf)
{
L n; S * restrict s; B * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyDIVAAs(B * df, B * sf)
{
L n; S * s; B * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyDIVAA(B * df, B * sf)
{
if (serialized) BSdyDIVAAs(df,sf);
else BSdyDIVAAp(df,sf);
}

static void BSdyPWRSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t = pow(t,tt);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BSdyPWRAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyPWRSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t = pow(t,tt);
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BSdyPWRAAp(B * df, B * sf)
{
L n; S * restrict s; B * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyPWRAAs(B * df, B * sf)
{
L n; S * s; B * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyPWRAA(B * df, B * sf)
{
if (serialized) BSdyPWRAAs(df,sf);
else BSdyPWRAAp(df,sf);
}

static void BSdyMODSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t = fmod(t,tt);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BSdyMODAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyMODSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t = fmod(t,tt);
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BSdyMODAAp(B * df, B * sf)
{
L n; S * restrict s; B * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyMODAAs(B * df, B * sf)
{
L n; S * s; B * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyMODAA(B * df, B * sf)
{
if (serialized) BSdyMODAAs(df,sf);
else BSdyMODAAp(df,sf);
}

static void BSdyTHEARCSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t = thearc(t,tt);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BSdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t = thearc(t,tt);
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BSdyTHEARCAAp(B * df, B * sf)
{
L n; S * restrict s; B * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyTHEARCAAs(B * df, B * sf)
{
L n; S * s; B * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BSdyTHEARCAA(B * df, B * sf)
{
if (serialized) BSdyTHEARCAAs(df,sf);
else BSdyTHEARCAAp(df,sf);
}

static void BDdyADDSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t += tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BDdyADDAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyADDSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t += tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BDdyADDAAp(B * df, B * sf)
{
L n; D * restrict s; B * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyADDAAs(B * df, B * sf)
{
L n; D * s; B * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t += tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyADDAA(B * df, B * sf)
{
if (serialized) BDdyADDAAs(df,sf);
else BDdyADDAAp(df,sf);
}

static void BDdySUBSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t -= tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BDdySUBAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdySUBSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t -= tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BDdySUBAAp(B * df, B * sf)
{
L n; D * restrict s; B * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdySUBAAs(B * df, B * sf)
{
L n; D * s; B * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t -= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdySUBAA(B * df, B * sf)
{
if (serialized) BDdySUBAAs(df,sf);
else BDdySUBAAp(df,sf);
}

static void BDdyMULSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t *= tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BDdyMULAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyMULSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t *= tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BDdyMULAAp(B * df, B * sf)
{
L n; D * restrict s; B * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyMULAAs(B * df, B * sf)
{
L n; D * s; B * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t *= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyMULAA(B * df, B * sf)
{
if (serialized) BDdyMULAAs(df,sf);
else BDdyMULAAp(df,sf);
}

static void BDdyDIVSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t /= tt;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BDdyDIVAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyDIVSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t /= tt;
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BDdyDIVAAp(B * df, B * sf)
{
L n; D * restrict s; B * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyDIVAAs(B * df, B * sf)
{
L n; D * s; B * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t /= tt;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyDIVAA(B * df, B * sf)
{
if (serialized) BDdyDIVAAs(df,sf);
else BDdyDIVAAp(df,sf);
}

static void BDdyPWRSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t = pow(t,tt);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BDdyPWRAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyPWRSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t = pow(t,tt);
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BDdyPWRAAp(B * df, B * sf)
{
L n; D * restrict s; B * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyPWRAAs(B * df, B * sf)
{
L n; D * s; B * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = pow(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyPWRAA(B * df, B * sf)
{
if (serialized) BDdyPWRAAs(df,sf);
else BDdyPWRAAp(df,sf);
}

static void BDdyMODSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t = fmod(t,tt);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BDdyMODAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyMODSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t = fmod(t,tt);
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BDdyMODAAp(B * df, B * sf)
{
L n; D * restrict s; B * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyMODAAs(B * df, B * sf)
{
L n; D * s; B * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = fmod(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyMODAA(B * df, B * sf)
{
if (serialized) BDdyMODAAs(df,sf);
else BDdyMODAAp(df,sf);
}

static void BDdyTHEARCSS(B *df, B *sf)
{
D t, tt;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t = thearc(t,tt);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BDdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; B *d;
d = (B *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t = thearc(t,tt);
}
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BDdyTHEARCAAp(B * df, B * sf)
{
L n; D * restrict s; B * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyTHEARCAAs(B * df, B * sf)
{
L n; D * s; B * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((B *)d)) == BINF) t = DINF;
t = thearc(t,tt);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BDdyTHEARCAA(B * df, B * sf)
{
if (serialized) BDdyTHEARCAAs(df,sf);
else BDdyTHEARCAAp(df,sf);
}

static void WBdyADDSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t += tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WBdyADDAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyADDSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WBdyADDAAp(B * df, B * sf)
{
L n; B * restrict s; W * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyADDAAs(B * df, B * sf)
{
L n; B * s; W * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyADDAA(B * df, B * sf)
{
if (serialized) WBdyADDAAs(df,sf);
else WBdyADDAAp(df,sf);
}

static void WBdySUBSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t -= tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WBdySUBAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdySUBSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WBdySUBAAp(B * df, B * sf)
{
L n; B * restrict s; W * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdySUBAAs(B * df, B * sf)
{
L n; B * s; W * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdySUBAA(B * df, B * sf)
{
if (serialized) WBdySUBAAs(df,sf);
else WBdySUBAAp(df,sf);
}

static void WBdyMULSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t *= tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WBdyMULAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyMULSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WBdyMULAAp(B * df, B * sf)
{
L n; B * restrict s; W * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyMULAAs(B * df, B * sf)
{
L n; B * s; W * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyMULAA(B * df, B * sf)
{
if (serialized) WBdyMULAAs(df,sf);
else WBdyMULAAp(df,sf);
}

static void WBdyDIVSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t /= tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WBdyDIVAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyDIVSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WBdyDIVAAp(B * df, B * sf)
{
L n; B * restrict s; W * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyDIVAAs(B * df, B * sf)
{
L n; B * s; W * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyDIVAA(B * df, B * sf)
{
if (serialized) WBdyDIVAAs(df,sf);
else WBdyDIVAAp(df,sf);
}

static void WBdyPWRSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t = pow(t,tt);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WBdyPWRAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyPWRSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WBdyPWRAAp(B * df, B * sf)
{
L n; B * restrict s; W * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyPWRAAs(B * df, B * sf)
{
L n; B * s; W * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyPWRAA(B * df, B * sf)
{
if (serialized) WBdyPWRAAs(df,sf);
else WBdyPWRAAp(df,sf);
}

static void WBdyMODSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t = fmod(t,tt);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WBdyMODAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyMODSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WBdyMODAAp(B * df, B * sf)
{
L n; B * restrict s; W * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyMODAAs(B * df, B * sf)
{
L n; B * s; W * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyMODAA(B * df, B * sf)
{
if (serialized) WBdyMODAAs(df,sf);
else WBdyMODAAp(df,sf);
}

static void WBdyTHEARCSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t = thearc(t,tt);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WBdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WBdyTHEARCAAp(B * df, B * sf)
{
L n; B * restrict s; W * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyTHEARCAAs(B * df, B * sf)
{
L n; B * s; W * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WBdyTHEARCAA(B * df, B * sf)
{
if (serialized) WBdyTHEARCAAs(df,sf);
else WBdyTHEARCAAp(df,sf);
}

static void WWdyADDSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t += tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WWdyADDAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyADDSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WWdyADDAAp(B * df, B * sf)
{
L n; W * restrict s; W * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyADDAAs(B * df, B * sf)
{
L n; W * s; W * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyADDAA(B * df, B * sf)
{
if (serialized) WWdyADDAAs(df,sf);
else WWdyADDAAp(df,sf);
}

static void WWdySUBSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t -= tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WWdySUBAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdySUBSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WWdySUBAAp(B * df, B * sf)
{
L n; W * restrict s; W * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdySUBAAs(B * df, B * sf)
{
L n; W * s; W * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdySUBAA(B * df, B * sf)
{
if (serialized) WWdySUBAAs(df,sf);
else WWdySUBAAp(df,sf);
}

static void WWdyMULSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t *= tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WWdyMULAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyMULSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WWdyMULAAp(B * df, B * sf)
{
L n; W * restrict s; W * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyMULAAs(B * df, B * sf)
{
L n; W * s; W * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyMULAA(B * df, B * sf)
{
if (serialized) WWdyMULAAs(df,sf);
else WWdyMULAAp(df,sf);
}

static void WWdyDIVSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t /= tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WWdyDIVAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyDIVSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WWdyDIVAAp(B * df, B * sf)
{
L n; W * restrict s; W * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyDIVAAs(B * df, B * sf)
{
L n; W * s; W * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyDIVAA(B * df, B * sf)
{
if (serialized) WWdyDIVAAs(df,sf);
else WWdyDIVAAp(df,sf);
}

static void WWdyPWRSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t = pow(t,tt);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WWdyPWRAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyPWRSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WWdyPWRAAp(B * df, B * sf)
{
L n; W * restrict s; W * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyPWRAAs(B * df, B * sf)
{
L n; W * s; W * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyPWRAA(B * df, B * sf)
{
if (serialized) WWdyPWRAAs(df,sf);
else WWdyPWRAAp(df,sf);
}

static void WWdyMODSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t = fmod(t,tt);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WWdyMODAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyMODSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WWdyMODAAp(B * df, B * sf)
{
L n; W * restrict s; W * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyMODAAs(B * df, B * sf)
{
L n; W * s; W * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyMODAA(B * df, B * sf)
{
if (serialized) WWdyMODAAs(df,sf);
else WWdyMODAAp(df,sf);
}

static void WWdyTHEARCSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t = thearc(t,tt);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WWdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WWdyTHEARCAAp(B * df, B * sf)
{
L n; W * restrict s; W * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyTHEARCAAs(B * df, B * sf)
{
L n; W * s; W * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WWdyTHEARCAA(B * df, B * sf)
{
if (serialized) WWdyTHEARCAAs(df,sf);
else WWdyTHEARCAAp(df,sf);
}

static void WLdyADDSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t += tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WLdyADDAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyADDSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WLdyADDAAp(B * df, B * sf)
{
L n; L * restrict s; W * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyADDAAs(B * df, B * sf)
{
L n; L * s; W * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyADDAA(B * df, B * sf)
{
if (serialized) WLdyADDAAs(df,sf);
else WLdyADDAAp(df,sf);
}

static void WLdySUBSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t -= tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WLdySUBAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdySUBSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WLdySUBAAp(B * df, B * sf)
{
L n; L * restrict s; W * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdySUBAAs(B * df, B * sf)
{
L n; L * s; W * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdySUBAA(B * df, B * sf)
{
if (serialized) WLdySUBAAs(df,sf);
else WLdySUBAAp(df,sf);
}

static void WLdyMULSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t *= tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WLdyMULAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyMULSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WLdyMULAAp(B * df, B * sf)
{
L n; L * restrict s; W * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyMULAAs(B * df, B * sf)
{
L n; L * s; W * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyMULAA(B * df, B * sf)
{
if (serialized) WLdyMULAAs(df,sf);
else WLdyMULAAp(df,sf);
}

static void WLdyDIVSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t /= tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WLdyDIVAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyDIVSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WLdyDIVAAp(B * df, B * sf)
{
L n; L * restrict s; W * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyDIVAAs(B * df, B * sf)
{
L n; L * s; W * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyDIVAA(B * df, B * sf)
{
if (serialized) WLdyDIVAAs(df,sf);
else WLdyDIVAAp(df,sf);
}

static void WLdyPWRSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t = pow(t,tt);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WLdyPWRAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyPWRSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WLdyPWRAAp(B * df, B * sf)
{
L n; L * restrict s; W * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyPWRAAs(B * df, B * sf)
{
L n; L * s; W * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyPWRAA(B * df, B * sf)
{
if (serialized) WLdyPWRAAs(df,sf);
else WLdyPWRAAp(df,sf);
}

static void WLdyMODSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t = fmod(t,tt);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WLdyMODAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyMODSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WLdyMODAAp(B * df, B * sf)
{
L n; L * restrict s; W * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyMODAAs(B * df, B * sf)
{
L n; L * s; W * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyMODAA(B * df, B * sf)
{
if (serialized) WLdyMODAAs(df,sf);
else WLdyMODAAp(df,sf);
}

static void WLdyTHEARCSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t = thearc(t,tt);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WLdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WLdyTHEARCAAp(B * df, B * sf)
{
L n; L * restrict s; W * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyTHEARCAAs(B * df, B * sf)
{
L n; L * s; W * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WLdyTHEARCAA(B * df, B * sf)
{
if (serialized) WLdyTHEARCAAs(df,sf);
else WLdyTHEARCAAp(df,sf);
}

static void WSdyADDSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t += tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WSdyADDAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyADDSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t += tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WSdyADDAAp(B * df, B * sf)
{
L n; S * restrict s; W * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyADDAAs(B * df, B * sf)
{
L n; S * s; W * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyADDAA(B * df, B * sf)
{
if (serialized) WSdyADDAAs(df,sf);
else WSdyADDAAp(df,sf);
}

static void WSdySUBSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t -= tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WSdySUBAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdySUBSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t -= tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WSdySUBAAp(B * df, B * sf)
{
L n; S * restrict s; W * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdySUBAAs(B * df, B * sf)
{
L n; S * s; W * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdySUBAA(B * df, B * sf)
{
if (serialized) WSdySUBAAs(df,sf);
else WSdySUBAAp(df,sf);
}

static void WSdyMULSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t *= tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WSdyMULAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyMULSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t *= tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WSdyMULAAp(B * df, B * sf)
{
L n; S * restrict s; W * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyMULAAs(B * df, B * sf)
{
L n; S * s; W * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyMULAA(B * df, B * sf)
{
if (serialized) WSdyMULAAs(df,sf);
else WSdyMULAAp(df,sf);
}

static void WSdyDIVSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t /= tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WSdyDIVAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyDIVSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t /= tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WSdyDIVAAp(B * df, B * sf)
{
L n; S * restrict s; W * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyDIVAAs(B * df, B * sf)
{
L n; S * s; W * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyDIVAA(B * df, B * sf)
{
if (serialized) WSdyDIVAAs(df,sf);
else WSdyDIVAAp(df,sf);
}

static void WSdyPWRSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t = pow(t,tt);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WSdyPWRAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyPWRSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t = pow(t,tt);
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WSdyPWRAAp(B * df, B * sf)
{
L n; S * restrict s; W * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyPWRAAs(B * df, B * sf)
{
L n; S * s; W * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyPWRAA(B * df, B * sf)
{
if (serialized) WSdyPWRAAs(df,sf);
else WSdyPWRAAp(df,sf);
}

static void WSdyMODSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t = fmod(t,tt);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WSdyMODAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyMODSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t = fmod(t,tt);
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WSdyMODAAp(B * df, B * sf)
{
L n; S * restrict s; W * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyMODAAs(B * df, B * sf)
{
L n; S * s; W * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyMODAA(B * df, B * sf)
{
if (serialized) WSdyMODAAs(df,sf);
else WSdyMODAAp(df,sf);
}

static void WSdyTHEARCSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t = thearc(t,tt);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WSdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t = thearc(t,tt);
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WSdyTHEARCAAp(B * df, B * sf)
{
L n; S * restrict s; W * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyTHEARCAAs(B * df, B * sf)
{
L n; S * s; W * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WSdyTHEARCAA(B * df, B * sf)
{
if (serialized) WSdyTHEARCAAs(df,sf);
else WSdyTHEARCAAp(df,sf);
}

static void WDdyADDSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t += tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WDdyADDAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyADDSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t += tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WDdyADDAAp(B * df, B * sf)
{
L n; D * restrict s; W * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyADDAAs(B * df, B * sf)
{
L n; D * s; W * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t += tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyADDAA(B * df, B * sf)
{
if (serialized) WDdyADDAAs(df,sf);
else WDdyADDAAp(df,sf);
}

static void WDdySUBSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t -= tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WDdySUBAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdySUBSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t -= tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WDdySUBAAp(B * df, B * sf)
{
L n; D * restrict s; W * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdySUBAAs(B * df, B * sf)
{
L n; D * s; W * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t -= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdySUBAA(B * df, B * sf)
{
if (serialized) WDdySUBAAs(df,sf);
else WDdySUBAAp(df,sf);
}

static void WDdyMULSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t *= tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WDdyMULAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyMULSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t *= tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WDdyMULAAp(B * df, B * sf)
{
L n; D * restrict s; W * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyMULAAs(B * df, B * sf)
{
L n; D * s; W * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t *= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyMULAA(B * df, B * sf)
{
if (serialized) WDdyMULAAs(df,sf);
else WDdyMULAAp(df,sf);
}

static void WDdyDIVSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t /= tt;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WDdyDIVAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyDIVSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t /= tt;
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WDdyDIVAAp(B * df, B * sf)
{
L n; D * restrict s; W * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyDIVAAs(B * df, B * sf)
{
L n; D * s; W * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t /= tt;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyDIVAA(B * df, B * sf)
{
if (serialized) WDdyDIVAAs(df,sf);
else WDdyDIVAAp(df,sf);
}

static void WDdyPWRSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t = pow(t,tt);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WDdyPWRAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyPWRSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t = pow(t,tt);
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WDdyPWRAAp(B * df, B * sf)
{
L n; D * restrict s; W * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyPWRAAs(B * df, B * sf)
{
L n; D * s; W * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = pow(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyPWRAA(B * df, B * sf)
{
if (serialized) WDdyPWRAAs(df,sf);
else WDdyPWRAAp(df,sf);
}

static void WDdyMODSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t = fmod(t,tt);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WDdyMODAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyMODSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t = fmod(t,tt);
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WDdyMODAAp(B * df, B * sf)
{
L n; D * restrict s; W * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyMODAAs(B * df, B * sf)
{
L n; D * s; W * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = fmod(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyMODAA(B * df, B * sf)
{
if (serialized) WDdyMODAAs(df,sf);
else WDdyMODAAp(df,sf);
}

static void WDdyTHEARCSS(B *df, B *sf)
{
D t, tt;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t = thearc(t,tt);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WDdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; W *d;
d = (W *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t = thearc(t,tt);
}
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WDdyTHEARCAAp(B * df, B * sf)
{
L n; D * restrict s; W * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyTHEARCAAs(B * df, B * sf)
{
L n; D * s; W * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((W *)d)) == WINF) t = DINF;
t = thearc(t,tt);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WDdyTHEARCAA(B * df, B * sf)
{
if (serialized) WDdyTHEARCAAs(df,sf);
else WDdyTHEARCAAp(df,sf);
}

static void LBdyADDSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t += tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LBdyADDAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyADDSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LBdyADDAAp(B * df, B * sf)
{
L n; B * restrict s; L * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyADDAAs(B * df, B * sf)
{
L n; B * s; L * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyADDAA(B * df, B * sf)
{
if (serialized) LBdyADDAAs(df,sf);
else LBdyADDAAp(df,sf);
}

static void LBdySUBSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t -= tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LBdySUBAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdySUBSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LBdySUBAAp(B * df, B * sf)
{
L n; B * restrict s; L * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdySUBAAs(B * df, B * sf)
{
L n; B * s; L * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdySUBAA(B * df, B * sf)
{
if (serialized) LBdySUBAAs(df,sf);
else LBdySUBAAp(df,sf);
}

static void LBdyMULSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t *= tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LBdyMULAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyMULSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LBdyMULAAp(B * df, B * sf)
{
L n; B * restrict s; L * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyMULAAs(B * df, B * sf)
{
L n; B * s; L * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyMULAA(B * df, B * sf)
{
if (serialized) LBdyMULAAs(df,sf);
else LBdyMULAAp(df,sf);
}

static void LBdyDIVSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t /= tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LBdyDIVAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyDIVSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LBdyDIVAAp(B * df, B * sf)
{
L n; B * restrict s; L * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyDIVAAs(B * df, B * sf)
{
L n; B * s; L * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyDIVAA(B * df, B * sf)
{
if (serialized) LBdyDIVAAs(df,sf);
else LBdyDIVAAp(df,sf);
}

static void LBdyPWRSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t = pow(t,tt);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LBdyPWRAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyPWRSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LBdyPWRAAp(B * df, B * sf)
{
L n; B * restrict s; L * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyPWRAAs(B * df, B * sf)
{
L n; B * s; L * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyPWRAA(B * df, B * sf)
{
if (serialized) LBdyPWRAAs(df,sf);
else LBdyPWRAAp(df,sf);
}

static void LBdyMODSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t = fmod(t,tt);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LBdyMODAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyMODSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LBdyMODAAp(B * df, B * sf)
{
L n; B * restrict s; L * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyMODAAs(B * df, B * sf)
{
L n; B * s; L * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyMODAA(B * df, B * sf)
{
if (serialized) LBdyMODAAs(df,sf);
else LBdyMODAAp(df,sf);
}

static void LBdyTHEARCSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t = thearc(t,tt);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LBdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LBdyTHEARCAAp(B * df, B * sf)
{
L n; B * restrict s; L * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyTHEARCAAs(B * df, B * sf)
{
L n; B * s; L * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LBdyTHEARCAA(B * df, B * sf)
{
if (serialized) LBdyTHEARCAAs(df,sf);
else LBdyTHEARCAAp(df,sf);
}

static void LWdyADDSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t += tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LWdyADDAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyADDSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LWdyADDAAp(B * df, B * sf)
{
L n; W * restrict s; L * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyADDAAs(B * df, B * sf)
{
L n; W * s; L * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyADDAA(B * df, B * sf)
{
if (serialized) LWdyADDAAs(df,sf);
else LWdyADDAAp(df,sf);
}

static void LWdySUBSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t -= tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LWdySUBAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdySUBSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LWdySUBAAp(B * df, B * sf)
{
L n; W * restrict s; L * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdySUBAAs(B * df, B * sf)
{
L n; W * s; L * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdySUBAA(B * df, B * sf)
{
if (serialized) LWdySUBAAs(df,sf);
else LWdySUBAAp(df,sf);
}

static void LWdyMULSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t *= tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LWdyMULAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyMULSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LWdyMULAAp(B * df, B * sf)
{
L n; W * restrict s; L * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyMULAAs(B * df, B * sf)
{
L n; W * s; L * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyMULAA(B * df, B * sf)
{
if (serialized) LWdyMULAAs(df,sf);
else LWdyMULAAp(df,sf);
}

static void LWdyDIVSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t /= tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LWdyDIVAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyDIVSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LWdyDIVAAp(B * df, B * sf)
{
L n; W * restrict s; L * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyDIVAAs(B * df, B * sf)
{
L n; W * s; L * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyDIVAA(B * df, B * sf)
{
if (serialized) LWdyDIVAAs(df,sf);
else LWdyDIVAAp(df,sf);
}

static void LWdyPWRSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t = pow(t,tt);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LWdyPWRAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyPWRSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LWdyPWRAAp(B * df, B * sf)
{
L n; W * restrict s; L * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyPWRAAs(B * df, B * sf)
{
L n; W * s; L * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyPWRAA(B * df, B * sf)
{
if (serialized) LWdyPWRAAs(df,sf);
else LWdyPWRAAp(df,sf);
}

static void LWdyMODSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t = fmod(t,tt);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LWdyMODAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyMODSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LWdyMODAAp(B * df, B * sf)
{
L n; W * restrict s; L * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyMODAAs(B * df, B * sf)
{
L n; W * s; L * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyMODAA(B * df, B * sf)
{
if (serialized) LWdyMODAAs(df,sf);
else LWdyMODAAp(df,sf);
}

static void LWdyTHEARCSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t = thearc(t,tt);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LWdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LWdyTHEARCAAp(B * df, B * sf)
{
L n; W * restrict s; L * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyTHEARCAAs(B * df, B * sf)
{
L n; W * s; L * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LWdyTHEARCAA(B * df, B * sf)
{
if (serialized) LWdyTHEARCAAs(df,sf);
else LWdyTHEARCAAp(df,sf);
}

static void LLdyADDSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t += tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LLdyADDAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyADDSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LLdyADDAAp(B * df, B * sf)
{
L n; L * restrict s; L * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyADDAAs(B * df, B * sf)
{
L n; L * s; L * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyADDAA(B * df, B * sf)
{
if (serialized) LLdyADDAAs(df,sf);
else LLdyADDAAp(df,sf);
}

static void LLdySUBSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t -= tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LLdySUBAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdySUBSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LLdySUBAAp(B * df, B * sf)
{
L n; L * restrict s; L * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdySUBAAs(B * df, B * sf)
{
L n; L * s; L * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdySUBAA(B * df, B * sf)
{
if (serialized) LLdySUBAAs(df,sf);
else LLdySUBAAp(df,sf);
}

static void LLdyMULSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t *= tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LLdyMULAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyMULSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LLdyMULAAp(B * df, B * sf)
{
L n; L * restrict s; L * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyMULAAs(B * df, B * sf)
{
L n; L * s; L * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyMULAA(B * df, B * sf)
{
if (serialized) LLdyMULAAs(df,sf);
else LLdyMULAAp(df,sf);
}

static void LLdyDIVSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t /= tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LLdyDIVAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyDIVSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LLdyDIVAAp(B * df, B * sf)
{
L n; L * restrict s; L * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyDIVAAs(B * df, B * sf)
{
L n; L * s; L * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyDIVAA(B * df, B * sf)
{
if (serialized) LLdyDIVAAs(df,sf);
else LLdyDIVAAp(df,sf);
}

static void LLdyPWRSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t = pow(t,tt);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LLdyPWRAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyPWRSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LLdyPWRAAp(B * df, B * sf)
{
L n; L * restrict s; L * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyPWRAAs(B * df, B * sf)
{
L n; L * s; L * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyPWRAA(B * df, B * sf)
{
if (serialized) LLdyPWRAAs(df,sf);
else LLdyPWRAAp(df,sf);
}

static void LLdyMODSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t = fmod(t,tt);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LLdyMODAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyMODSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LLdyMODAAp(B * df, B * sf)
{
L n; L * restrict s; L * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyMODAAs(B * df, B * sf)
{
L n; L * s; L * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyMODAA(B * df, B * sf)
{
if (serialized) LLdyMODAAs(df,sf);
else LLdyMODAAp(df,sf);
}

static void LLdyTHEARCSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t = thearc(t,tt);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LLdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LLdyTHEARCAAp(B * df, B * sf)
{
L n; L * restrict s; L * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyTHEARCAAs(B * df, B * sf)
{
L n; L * s; L * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LLdyTHEARCAA(B * df, B * sf)
{
if (serialized) LLdyTHEARCAAs(df,sf);
else LLdyTHEARCAAp(df,sf);
}

static void LSdyADDSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t += tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LSdyADDAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyADDSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t += tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LSdyADDAAp(B * df, B * sf)
{
L n; S * restrict s; L * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyADDAAs(B * df, B * sf)
{
L n; S * s; L * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyADDAA(B * df, B * sf)
{
if (serialized) LSdyADDAAs(df,sf);
else LSdyADDAAp(df,sf);
}

static void LSdySUBSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t -= tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LSdySUBAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdySUBSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t -= tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LSdySUBAAp(B * df, B * sf)
{
L n; S * restrict s; L * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdySUBAAs(B * df, B * sf)
{
L n; S * s; L * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdySUBAA(B * df, B * sf)
{
if (serialized) LSdySUBAAs(df,sf);
else LSdySUBAAp(df,sf);
}

static void LSdyMULSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t *= tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LSdyMULAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyMULSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t *= tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LSdyMULAAp(B * df, B * sf)
{
L n; S * restrict s; L * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyMULAAs(B * df, B * sf)
{
L n; S * s; L * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyMULAA(B * df, B * sf)
{
if (serialized) LSdyMULAAs(df,sf);
else LSdyMULAAp(df,sf);
}

static void LSdyDIVSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t /= tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LSdyDIVAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyDIVSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t /= tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LSdyDIVAAp(B * df, B * sf)
{
L n; S * restrict s; L * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyDIVAAs(B * df, B * sf)
{
L n; S * s; L * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyDIVAA(B * df, B * sf)
{
if (serialized) LSdyDIVAAs(df,sf);
else LSdyDIVAAp(df,sf);
}

static void LSdyPWRSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t = pow(t,tt);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LSdyPWRAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyPWRSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t = pow(t,tt);
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LSdyPWRAAp(B * df, B * sf)
{
L n; S * restrict s; L * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyPWRAAs(B * df, B * sf)
{
L n; S * s; L * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyPWRAA(B * df, B * sf)
{
if (serialized) LSdyPWRAAs(df,sf);
else LSdyPWRAAp(df,sf);
}

static void LSdyMODSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t = fmod(t,tt);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LSdyMODAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyMODSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t = fmod(t,tt);
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LSdyMODAAp(B * df, B * sf)
{
L n; S * restrict s; L * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyMODAAs(B * df, B * sf)
{
L n; S * s; L * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyMODAA(B * df, B * sf)
{
if (serialized) LSdyMODAAs(df,sf);
else LSdyMODAAp(df,sf);
}

static void LSdyTHEARCSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
tt = *((S *)NUM_VAL(sf));
t = thearc(t,tt);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LSdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t = thearc(t,tt);
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LSdyTHEARCAAp(B * df, B * sf)
{
L n; S * restrict s; L * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyTHEARCAAs(B * df, B * sf)
{
L n; S * s; L * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LSdyTHEARCAA(B * df, B * sf)
{
if (serialized) LSdyTHEARCAAs(df,sf);
else LSdyTHEARCAAp(df,sf);
}

static void LDdyADDSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t += tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LDdyADDAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyADDSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t += tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LDdyADDAAp(B * df, B * sf)
{
L n; D * restrict s; L * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyADDAAs(B * df, B * sf)
{
L n; D * s; L * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t += tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyADDAA(B * df, B * sf)
{
if (serialized) LDdyADDAAs(df,sf);
else LDdyADDAAp(df,sf);
}

static void LDdySUBSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t -= tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LDdySUBAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdySUBSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t -= tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LDdySUBAAp(B * df, B * sf)
{
L n; D * restrict s; L * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdySUBAAs(B * df, B * sf)
{
L n; D * s; L * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t -= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdySUBAA(B * df, B * sf)
{
if (serialized) LDdySUBAAs(df,sf);
else LDdySUBAAp(df,sf);
}

static void LDdyMULSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t *= tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LDdyMULAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyMULSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t *= tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LDdyMULAAp(B * df, B * sf)
{
L n; D * restrict s; L * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyMULAAs(B * df, B * sf)
{
L n; D * s; L * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t *= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyMULAA(B * df, B * sf)
{
if (serialized) LDdyMULAAs(df,sf);
else LDdyMULAAp(df,sf);
}

static void LDdyDIVSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t /= tt;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LDdyDIVAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyDIVSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t /= tt;
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LDdyDIVAAp(B * df, B * sf)
{
L n; D * restrict s; L * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyDIVAAs(B * df, B * sf)
{
L n; D * s; L * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t /= tt;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyDIVAA(B * df, B * sf)
{
if (serialized) LDdyDIVAAs(df,sf);
else LDdyDIVAAp(df,sf);
}

static void LDdyPWRSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t = pow(t,tt);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LDdyPWRAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyPWRSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t = pow(t,tt);
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LDdyPWRAAp(B * df, B * sf)
{
L n; D * restrict s; L * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyPWRAAs(B * df, B * sf)
{
L n; D * s; L * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = pow(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyPWRAA(B * df, B * sf)
{
if (serialized) LDdyPWRAAs(df,sf);
else LDdyPWRAAp(df,sf);
}

static void LDdyMODSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t = fmod(t,tt);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LDdyMODAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyMODSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t = fmod(t,tt);
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LDdyMODAAp(B * df, B * sf)
{
L n; D * restrict s; L * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyMODAAs(B * df, B * sf)
{
L n; D * s; L * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = fmod(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyMODAA(B * df, B * sf)
{
if (serialized) LDdyMODAAs(df,sf);
else LDdyMODAAp(df,sf);
}

static void LDdyTHEARCSS(B *df, B *sf)
{
D t, tt;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
tt = *((D *)NUM_VAL(sf));
t = thearc(t,tt);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LDdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; L *d;
d = (L *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t = thearc(t,tt);
}
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LDdyTHEARCAAp(B * df, B * sf)
{
L n; D * restrict s; L * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyTHEARCAAs(B * df, B * sf)
{
L n; D * s; L * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
if ((t = *((L *)d)) == LINF) t = DINF;
t = thearc(t,tt);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LDdyTHEARCAA(B * df, B * sf)
{
if (serialized) LDdyTHEARCAAs(df,sf);
else LDdyTHEARCAAp(df,sf);
}

static void SBdyADDSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t += tt;
*((S *)NUM_VAL(df)) = t;
}

static void SBdyADDAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
}

static void SBdyADDSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SBdyADDAAp(B * df, B * sf)
{
L n; B * restrict s; S * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
}

static void SBdyADDAAs(B * df, B * sf)
{
L n; B * s; S * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
}

static void SBdyADDAA(B * df, B * sf)
{
if (serialized) SBdyADDAAs(df,sf);
else SBdyADDAAp(df,sf);
}

static void SBdySUBSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t -= tt;
*((S *)NUM_VAL(df)) = t;
}

static void SBdySUBAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
}

static void SBdySUBSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SBdySUBAAp(B * df, B * sf)
{
L n; B * restrict s; S * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
}

static void SBdySUBAAs(B * df, B * sf)
{
L n; B * s; S * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
}

static void SBdySUBAA(B * df, B * sf)
{
if (serialized) SBdySUBAAs(df,sf);
else SBdySUBAAp(df,sf);
}

static void SBdyMULSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t *= tt;
*((S *)NUM_VAL(df)) = t;
}

static void SBdyMULAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
}

static void SBdyMULSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SBdyMULAAp(B * df, B * sf)
{
L n; B * restrict s; S * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
}

static void SBdyMULAAs(B * df, B * sf)
{
L n; B * s; S * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
}

static void SBdyMULAA(B * df, B * sf)
{
if (serialized) SBdyMULAAs(df,sf);
else SBdyMULAAp(df,sf);
}

static void SBdyDIVSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t /= tt;
*((S *)NUM_VAL(df)) = t;
}

static void SBdyDIVAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
}

static void SBdyDIVSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SBdyDIVAAp(B * df, B * sf)
{
L n; B * restrict s; S * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
}

static void SBdyDIVAAs(B * df, B * sf)
{
L n; B * s; S * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
}

static void SBdyDIVAA(B * df, B * sf)
{
if (serialized) SBdyDIVAAs(df,sf);
else SBdyDIVAAp(df,sf);
}

static void SBdyPWRSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t = pow(t,tt);
*((S *)NUM_VAL(df)) = t;
}

static void SBdyPWRAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
}

static void SBdyPWRSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
}
*((S *)NUM_VAL(df)) = t;
}

static void SBdyPWRAAp(B * df, B * sf)
{
L n; B * restrict s; S * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
}

static void SBdyPWRAAs(B * df, B * sf)
{
L n; B * s; S * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
}

static void SBdyPWRAA(B * df, B * sf)
{
if (serialized) SBdyPWRAAs(df,sf);
else SBdyPWRAAp(df,sf);
}

static void SBdyMODSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t = fmod(t,tt);
*((S *)NUM_VAL(df)) = t;
}

static void SBdyMODAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
}

static void SBdyMODSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
}
*((S *)NUM_VAL(df)) = t;
}

static void SBdyMODAAp(B * df, B * sf)
{
L n; B * restrict s; S * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
}

static void SBdyMODAAs(B * df, B * sf)
{
L n; B * s; S * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
}

static void SBdyMODAA(B * df, B * sf)
{
if (serialized) SBdyMODAAs(df,sf);
else SBdyMODAAp(df,sf);
}

static void SBdyTHEARCSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t = thearc(t,tt);
*((S *)NUM_VAL(df)) = t;
}

static void SBdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
}

static void SBdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
}
*((S *)NUM_VAL(df)) = t;
}

static void SBdyTHEARCAAp(B * df, B * sf)
{
L n; B * restrict s; S * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
}

static void SBdyTHEARCAAs(B * df, B * sf)
{
L n; B * s; S * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
}

static void SBdyTHEARCAA(B * df, B * sf)
{
if (serialized) SBdyTHEARCAAs(df,sf);
else SBdyTHEARCAAp(df,sf);
}

static void SWdyADDSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t += tt;
*((S *)NUM_VAL(df)) = t;
}

static void SWdyADDAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
}

static void SWdyADDSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SWdyADDAAp(B * df, B * sf)
{
L n; W * restrict s; S * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
}

static void SWdyADDAAs(B * df, B * sf)
{
L n; W * s; S * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
}

static void SWdyADDAA(B * df, B * sf)
{
if (serialized) SWdyADDAAs(df,sf);
else SWdyADDAAp(df,sf);
}

static void SWdySUBSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t -= tt;
*((S *)NUM_VAL(df)) = t;
}

static void SWdySUBAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
}

static void SWdySUBSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SWdySUBAAp(B * df, B * sf)
{
L n; W * restrict s; S * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
}

static void SWdySUBAAs(B * df, B * sf)
{
L n; W * s; S * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
}

static void SWdySUBAA(B * df, B * sf)
{
if (serialized) SWdySUBAAs(df,sf);
else SWdySUBAAp(df,sf);
}

static void SWdyMULSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t *= tt;
*((S *)NUM_VAL(df)) = t;
}

static void SWdyMULAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
}

static void SWdyMULSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SWdyMULAAp(B * df, B * sf)
{
L n; W * restrict s; S * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
}

static void SWdyMULAAs(B * df, B * sf)
{
L n; W * s; S * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
}

static void SWdyMULAA(B * df, B * sf)
{
if (serialized) SWdyMULAAs(df,sf);
else SWdyMULAAp(df,sf);
}

static void SWdyDIVSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t /= tt;
*((S *)NUM_VAL(df)) = t;
}

static void SWdyDIVAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
}

static void SWdyDIVSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SWdyDIVAAp(B * df, B * sf)
{
L n; W * restrict s; S * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
}

static void SWdyDIVAAs(B * df, B * sf)
{
L n; W * s; S * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
}

static void SWdyDIVAA(B * df, B * sf)
{
if (serialized) SWdyDIVAAs(df,sf);
else SWdyDIVAAp(df,sf);
}

static void SWdyPWRSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t = pow(t,tt);
*((S *)NUM_VAL(df)) = t;
}

static void SWdyPWRAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
}

static void SWdyPWRSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
}
*((S *)NUM_VAL(df)) = t;
}

static void SWdyPWRAAp(B * df, B * sf)
{
L n; W * restrict s; S * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
}

static void SWdyPWRAAs(B * df, B * sf)
{
L n; W * s; S * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
}

static void SWdyPWRAA(B * df, B * sf)
{
if (serialized) SWdyPWRAAs(df,sf);
else SWdyPWRAAp(df,sf);
}

static void SWdyMODSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t = fmod(t,tt);
*((S *)NUM_VAL(df)) = t;
}

static void SWdyMODAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
}

static void SWdyMODSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
}
*((S *)NUM_VAL(df)) = t;
}

static void SWdyMODAAp(B * df, B * sf)
{
L n; W * restrict s; S * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
}

static void SWdyMODAAs(B * df, B * sf)
{
L n; W * s; S * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
}

static void SWdyMODAA(B * df, B * sf)
{
if (serialized) SWdyMODAAs(df,sf);
else SWdyMODAAp(df,sf);
}

static void SWdyTHEARCSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t = thearc(t,tt);
*((S *)NUM_VAL(df)) = t;
}

static void SWdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
}

static void SWdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
}
*((S *)NUM_VAL(df)) = t;
}

static void SWdyTHEARCAAp(B * df, B * sf)
{
L n; W * restrict s; S * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
}

static void SWdyTHEARCAAs(B * df, B * sf)
{
L n; W * s; S * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
}

static void SWdyTHEARCAA(B * df, B * sf)
{
if (serialized) SWdyTHEARCAAs(df,sf);
else SWdyTHEARCAAp(df,sf);
}

static void SLdyADDSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t += tt;
*((S *)NUM_VAL(df)) = t;
}

static void SLdyADDAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
}

static void SLdyADDSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SLdyADDAAp(B * df, B * sf)
{
L n; L * restrict s; S * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
}

static void SLdyADDAAs(B * df, B * sf)
{
L n; L * s; S * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
}

static void SLdyADDAA(B * df, B * sf)
{
if (serialized) SLdyADDAAs(df,sf);
else SLdyADDAAp(df,sf);
}

static void SLdySUBSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t -= tt;
*((S *)NUM_VAL(df)) = t;
}

static void SLdySUBAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
}

static void SLdySUBSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SLdySUBAAp(B * df, B * sf)
{
L n; L * restrict s; S * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
}

static void SLdySUBAAs(B * df, B * sf)
{
L n; L * s; S * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
}

static void SLdySUBAA(B * df, B * sf)
{
if (serialized) SLdySUBAAs(df,sf);
else SLdySUBAAp(df,sf);
}

static void SLdyMULSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t *= tt;
*((S *)NUM_VAL(df)) = t;
}

static void SLdyMULAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
}

static void SLdyMULSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SLdyMULAAp(B * df, B * sf)
{
L n; L * restrict s; S * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
}

static void SLdyMULAAs(B * df, B * sf)
{
L n; L * s; S * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
}

static void SLdyMULAA(B * df, B * sf)
{
if (serialized) SLdyMULAAs(df,sf);
else SLdyMULAAp(df,sf);
}

static void SLdyDIVSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t /= tt;
*((S *)NUM_VAL(df)) = t;
}

static void SLdyDIVAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
}

static void SLdyDIVSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SLdyDIVAAp(B * df, B * sf)
{
L n; L * restrict s; S * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
}

static void SLdyDIVAAs(B * df, B * sf)
{
L n; L * s; S * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
}

static void SLdyDIVAA(B * df, B * sf)
{
if (serialized) SLdyDIVAAs(df,sf);
else SLdyDIVAAp(df,sf);
}

static void SLdyPWRSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t = pow(t,tt);
*((S *)NUM_VAL(df)) = t;
}

static void SLdyPWRAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
}

static void SLdyPWRSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
}
*((S *)NUM_VAL(df)) = t;
}

static void SLdyPWRAAp(B * df, B * sf)
{
L n; L * restrict s; S * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
}

static void SLdyPWRAAs(B * df, B * sf)
{
L n; L * s; S * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
}

static void SLdyPWRAA(B * df, B * sf)
{
if (serialized) SLdyPWRAAs(df,sf);
else SLdyPWRAAp(df,sf);
}

static void SLdyMODSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t = fmod(t,tt);
*((S *)NUM_VAL(df)) = t;
}

static void SLdyMODAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
}

static void SLdyMODSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
}
*((S *)NUM_VAL(df)) = t;
}

static void SLdyMODAAp(B * df, B * sf)
{
L n; L * restrict s; S * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
}

static void SLdyMODAAs(B * df, B * sf)
{
L n; L * s; S * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
}

static void SLdyMODAA(B * df, B * sf)
{
if (serialized) SLdyMODAAs(df,sf);
else SLdyMODAAp(df,sf);
}

static void SLdyTHEARCSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t = thearc(t,tt);
*((S *)NUM_VAL(df)) = t;
}

static void SLdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
}

static void SLdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
}
*((S *)NUM_VAL(df)) = t;
}

static void SLdyTHEARCAAp(B * df, B * sf)
{
L n; L * restrict s; S * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
}

static void SLdyTHEARCAAs(B * df, B * sf)
{
L n; L * s; S * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
}

static void SLdyTHEARCAA(B * df, B * sf)
{
if (serialized) SLdyTHEARCAAs(df,sf);
else SLdyTHEARCAAp(df,sf);
}

static void SSdyADDSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
tt = *((S *)NUM_VAL(sf));
t += tt;
*((S *)NUM_VAL(df)) = t;
}

static void SSdyADDAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
}

static void SSdyADDSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t += tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SSdyADDAAp(B * df, B * sf)
{
L n; S * restrict s; S * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
}

static void SSdyADDAAs(B * df, B * sf)
{
L n; S * s; S * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
}

static void SSdyADDAA(B * df, B * sf)
{
if (serialized) SSdyADDAAs(df,sf);
else SSdyADDAAp(df,sf);
}

static void SSdySUBSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
tt = *((S *)NUM_VAL(sf));
t -= tt;
*((S *)NUM_VAL(df)) = t;
}

static void SSdySUBAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
}

static void SSdySUBSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t -= tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SSdySUBAAp(B * df, B * sf)
{
L n; S * restrict s; S * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
}

static void SSdySUBAAs(B * df, B * sf)
{
L n; S * s; S * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
}

static void SSdySUBAA(B * df, B * sf)
{
if (serialized) SSdySUBAAs(df,sf);
else SSdySUBAAp(df,sf);
}

static void SSdyMULSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
tt = *((S *)NUM_VAL(sf));
t *= tt;
*((S *)NUM_VAL(df)) = t;
}

static void SSdyMULAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
}

static void SSdyMULSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t *= tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SSdyMULAAp(B * df, B * sf)
{
L n; S * restrict s; S * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
}

static void SSdyMULAAs(B * df, B * sf)
{
L n; S * s; S * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
}

static void SSdyMULAA(B * df, B * sf)
{
if (serialized) SSdyMULAAs(df,sf);
else SSdyMULAAp(df,sf);
}

static void SSdyDIVSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
tt = *((S *)NUM_VAL(sf));
t /= tt;
*((S *)NUM_VAL(df)) = t;
}

static void SSdyDIVAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
}

static void SSdyDIVSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t /= tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SSdyDIVAAp(B * df, B * sf)
{
L n; S * restrict s; S * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
}

static void SSdyDIVAAs(B * df, B * sf)
{
L n; S * s; S * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
}

static void SSdyDIVAA(B * df, B * sf)
{
if (serialized) SSdyDIVAAs(df,sf);
else SSdyDIVAAp(df,sf);
}

static void SSdyPWRSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
tt = *((S *)NUM_VAL(sf));
t = pow(t,tt);
*((S *)NUM_VAL(df)) = t;
}

static void SSdyPWRAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
}

static void SSdyPWRSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t = pow(t,tt);
}
*((S *)NUM_VAL(df)) = t;
}

static void SSdyPWRAAp(B * df, B * sf)
{
L n; S * restrict s; S * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
}

static void SSdyPWRAAs(B * df, B * sf)
{
L n; S * s; S * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
}

static void SSdyPWRAA(B * df, B * sf)
{
if (serialized) SSdyPWRAAs(df,sf);
else SSdyPWRAAp(df,sf);
}

static void SSdyMODSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
tt = *((S *)NUM_VAL(sf));
t = fmod(t,tt);
*((S *)NUM_VAL(df)) = t;
}

static void SSdyMODAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
}

static void SSdyMODSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t = fmod(t,tt);
}
*((S *)NUM_VAL(df)) = t;
}

static void SSdyMODAAp(B * df, B * sf)
{
L n; S * restrict s; S * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
}

static void SSdyMODAAs(B * df, B * sf)
{
L n; S * s; S * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
}

static void SSdyMODAA(B * df, B * sf)
{
if (serialized) SSdyMODAAs(df,sf);
else SSdyMODAAp(df,sf);
}

static void SSdyTHEARCSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
tt = *((S *)NUM_VAL(sf));
t = thearc(t,tt);
*((S *)NUM_VAL(df)) = t;
}

static void SSdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
}

static void SSdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t = thearc(t,tt);
}
*((S *)NUM_VAL(df)) = t;
}

static void SSdyTHEARCAAp(B * df, B * sf)
{
L n; S * restrict s; S * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
}

static void SSdyTHEARCAAs(B * df, B * sf)
{
L n; S * s; S * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
}

static void SSdyTHEARCAA(B * df, B * sf)
{
if (serialized) SSdyTHEARCAAs(df,sf);
else SSdyTHEARCAAp(df,sf);
}

static void SDdyADDSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
tt = *((D *)NUM_VAL(sf));
t += tt;
*((S *)NUM_VAL(df)) = t;
}

static void SDdyADDAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
}

static void SDdyADDSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t += tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SDdyADDAAp(B * df, B * sf)
{
L n; D * restrict s; S * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
}

static void SDdyADDAAs(B * df, B * sf)
{
L n; D * s; S * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t += tt;
*((S *)d++) = t;
}
}

static void SDdyADDAA(B * df, B * sf)
{
if (serialized) SDdyADDAAs(df,sf);
else SDdyADDAAp(df,sf);
}

static void SDdySUBSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
tt = *((D *)NUM_VAL(sf));
t -= tt;
*((S *)NUM_VAL(df)) = t;
}

static void SDdySUBAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
}

static void SDdySUBSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t -= tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SDdySUBAAp(B * df, B * sf)
{
L n; D * restrict s; S * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
}

static void SDdySUBAAs(B * df, B * sf)
{
L n; D * s; S * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t -= tt;
*((S *)d++) = t;
}
}

static void SDdySUBAA(B * df, B * sf)
{
if (serialized) SDdySUBAAs(df,sf);
else SDdySUBAAp(df,sf);
}

static void SDdyMULSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
tt = *((D *)NUM_VAL(sf));
t *= tt;
*((S *)NUM_VAL(df)) = t;
}

static void SDdyMULAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
}

static void SDdyMULSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t *= tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SDdyMULAAp(B * df, B * sf)
{
L n; D * restrict s; S * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
}

static void SDdyMULAAs(B * df, B * sf)
{
L n; D * s; S * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t *= tt;
*((S *)d++) = t;
}
}

static void SDdyMULAA(B * df, B * sf)
{
if (serialized) SDdyMULAAs(df,sf);
else SDdyMULAAp(df,sf);
}

static void SDdyDIVSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
tt = *((D *)NUM_VAL(sf));
t /= tt;
*((S *)NUM_VAL(df)) = t;
}

static void SDdyDIVAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
}

static void SDdyDIVSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t /= tt;
}
*((S *)NUM_VAL(df)) = t;
}

static void SDdyDIVAAp(B * df, B * sf)
{
L n; D * restrict s; S * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
}

static void SDdyDIVAAs(B * df, B * sf)
{
L n; D * s; S * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t /= tt;
*((S *)d++) = t;
}
}

static void SDdyDIVAA(B * df, B * sf)
{
if (serialized) SDdyDIVAAs(df,sf);
else SDdyDIVAAp(df,sf);
}

static void SDdyPWRSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
tt = *((D *)NUM_VAL(sf));
t = pow(t,tt);
*((S *)NUM_VAL(df)) = t;
}

static void SDdyPWRAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
}

static void SDdyPWRSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t = pow(t,tt);
}
*((S *)NUM_VAL(df)) = t;
}

static void SDdyPWRAAp(B * df, B * sf)
{
L n; D * restrict s; S * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
}

static void SDdyPWRAAs(B * df, B * sf)
{
L n; D * s; S * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t = pow(t,tt);
*((S *)d++) = t;
}
}

static void SDdyPWRAA(B * df, B * sf)
{
if (serialized) SDdyPWRAAs(df,sf);
else SDdyPWRAAp(df,sf);
}

static void SDdyMODSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
tt = *((D *)NUM_VAL(sf));
t = fmod(t,tt);
*((S *)NUM_VAL(df)) = t;
}

static void SDdyMODAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
}

static void SDdyMODSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t = fmod(t,tt);
}
*((S *)NUM_VAL(df)) = t;
}

static void SDdyMODAAp(B * df, B * sf)
{
L n; D * restrict s; S * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
}

static void SDdyMODAAs(B * df, B * sf)
{
L n; D * s; S * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t = fmod(t,tt);
*((S *)d++) = t;
}
}

static void SDdyMODAA(B * df, B * sf)
{
if (serialized) SDdyMODAAs(df,sf);
else SDdyMODAAp(df,sf);
}

static void SDdyTHEARCSS(B *df, B *sf)
{
D t, tt;
t = *((S *)NUM_VAL(df));
tt = *((D *)NUM_VAL(sf));
t = thearc(t,tt);
*((S *)NUM_VAL(df)) = t;
}

static void SDdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; S *d;
d = (S *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
}

static void SDdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
t = *((S *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t = thearc(t,tt);
}
*((S *)NUM_VAL(df)) = t;
}

static void SDdyTHEARCAAp(B * df, B * sf)
{
L n; D * restrict s; S * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
}

static void SDdyTHEARCAAs(B * df, B * sf)
{
L n; D * s; S * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((S *)d);
t = thearc(t,tt);
*((S *)d++) = t;
}
}

static void SDdyTHEARCAA(B * df, B * sf)
{
if (serialized) SDdyTHEARCAAs(df,sf);
else SDdyTHEARCAAp(df,sf);
}

static void DBdyADDSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t += tt;
*((D *)NUM_VAL(df)) = t;
}

static void DBdyADDAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
}

static void DBdyADDSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t += tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DBdyADDAAp(B * df, B * sf)
{
L n; B * restrict s; D * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
}

static void DBdyADDAAs(B * df, B * sf)
{
L n; B * s; D * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
}

static void DBdyADDAA(B * df, B * sf)
{
if (serialized) DBdyADDAAs(df,sf);
else DBdyADDAAp(df,sf);
}

static void DBdySUBSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t -= tt;
*((D *)NUM_VAL(df)) = t;
}

static void DBdySUBAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
}

static void DBdySUBSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t -= tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DBdySUBAAp(B * df, B * sf)
{
L n; B * restrict s; D * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
}

static void DBdySUBAAs(B * df, B * sf)
{
L n; B * s; D * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
}

static void DBdySUBAA(B * df, B * sf)
{
if (serialized) DBdySUBAAs(df,sf);
else DBdySUBAAp(df,sf);
}

static void DBdyMULSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t *= tt;
*((D *)NUM_VAL(df)) = t;
}

static void DBdyMULAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
}

static void DBdyMULSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t *= tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DBdyMULAAp(B * df, B * sf)
{
L n; B * restrict s; D * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
}

static void DBdyMULAAs(B * df, B * sf)
{
L n; B * s; D * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
}

static void DBdyMULAA(B * df, B * sf)
{
if (serialized) DBdyMULAAs(df,sf);
else DBdyMULAAp(df,sf);
}

static void DBdyDIVSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t /= tt;
*((D *)NUM_VAL(df)) = t;
}

static void DBdyDIVAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
}

static void DBdyDIVSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t /= tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DBdyDIVAAp(B * df, B * sf)
{
L n; B * restrict s; D * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
}

static void DBdyDIVAAs(B * df, B * sf)
{
L n; B * s; D * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
}

static void DBdyDIVAA(B * df, B * sf)
{
if (serialized) DBdyDIVAAs(df,sf);
else DBdyDIVAAp(df,sf);
}

static void DBdyPWRSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t = pow(t,tt);
*((D *)NUM_VAL(df)) = t;
}

static void DBdyPWRAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
}

static void DBdyPWRSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = pow(t,tt);
}
*((D *)NUM_VAL(df)) = t;
}

static void DBdyPWRAAp(B * df, B * sf)
{
L n; B * restrict s; D * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
}

static void DBdyPWRAAs(B * df, B * sf)
{
L n; B * s; D * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
}

static void DBdyPWRAA(B * df, B * sf)
{
if (serialized) DBdyPWRAAs(df,sf);
else DBdyPWRAAp(df,sf);
}

static void DBdyMODSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t = fmod(t,tt);
*((D *)NUM_VAL(df)) = t;
}

static void DBdyMODAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
}

static void DBdyMODSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = fmod(t,tt);
}
*((D *)NUM_VAL(df)) = t;
}

static void DBdyMODAAp(B * df, B * sf)
{
L n; B * restrict s; D * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
}

static void DBdyMODAAs(B * df, B * sf)
{
L n; B * s; D * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
}

static void DBdyMODAA(B * df, B * sf)
{
if (serialized) DBdyMODAAs(df,sf);
else DBdyMODAAp(df,sf);
}

static void DBdyTHEARCSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
t = thearc(t,tt);
*((D *)NUM_VAL(df)) = t;
}

static void DBdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((B *)NUM_VAL(sf))) == BINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
}

static void DBdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; B *s;
s = (B *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = thearc(t,tt);
}
*((D *)NUM_VAL(df)) = t;
}

static void DBdyTHEARCAAp(B * df, B * sf)
{
L n; B * restrict s; D * restrict d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
}

static void DBdyTHEARCAAs(B * df, B * sf)
{
L n; B * s; D * d;
D t, tt;
s = (B *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((B *)s++)) == BINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
}

static void DBdyTHEARCAA(B * df, B * sf)
{
if (serialized) DBdyTHEARCAAs(df,sf);
else DBdyTHEARCAAp(df,sf);
}

static void DWdyADDSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t += tt;
*((D *)NUM_VAL(df)) = t;
}

static void DWdyADDAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
}

static void DWdyADDSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t += tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DWdyADDAAp(B * df, B * sf)
{
L n; W * restrict s; D * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
}

static void DWdyADDAAs(B * df, B * sf)
{
L n; W * s; D * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
}

static void DWdyADDAA(B * df, B * sf)
{
if (serialized) DWdyADDAAs(df,sf);
else DWdyADDAAp(df,sf);
}

static void DWdySUBSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t -= tt;
*((D *)NUM_VAL(df)) = t;
}

static void DWdySUBAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
}

static void DWdySUBSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t -= tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DWdySUBAAp(B * df, B * sf)
{
L n; W * restrict s; D * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
}

static void DWdySUBAAs(B * df, B * sf)
{
L n; W * s; D * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
}

static void DWdySUBAA(B * df, B * sf)
{
if (serialized) DWdySUBAAs(df,sf);
else DWdySUBAAp(df,sf);
}

static void DWdyMULSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t *= tt;
*((D *)NUM_VAL(df)) = t;
}

static void DWdyMULAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
}

static void DWdyMULSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t *= tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DWdyMULAAp(B * df, B * sf)
{
L n; W * restrict s; D * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
}

static void DWdyMULAAs(B * df, B * sf)
{
L n; W * s; D * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
}

static void DWdyMULAA(B * df, B * sf)
{
if (serialized) DWdyMULAAs(df,sf);
else DWdyMULAAp(df,sf);
}

static void DWdyDIVSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t /= tt;
*((D *)NUM_VAL(df)) = t;
}

static void DWdyDIVAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
}

static void DWdyDIVSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t /= tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DWdyDIVAAp(B * df, B * sf)
{
L n; W * restrict s; D * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
}

static void DWdyDIVAAs(B * df, B * sf)
{
L n; W * s; D * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
}

static void DWdyDIVAA(B * df, B * sf)
{
if (serialized) DWdyDIVAAs(df,sf);
else DWdyDIVAAp(df,sf);
}

static void DWdyPWRSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t = pow(t,tt);
*((D *)NUM_VAL(df)) = t;
}

static void DWdyPWRAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
}

static void DWdyPWRSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = pow(t,tt);
}
*((D *)NUM_VAL(df)) = t;
}

static void DWdyPWRAAp(B * df, B * sf)
{
L n; W * restrict s; D * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
}

static void DWdyPWRAAs(B * df, B * sf)
{
L n; W * s; D * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
}

static void DWdyPWRAA(B * df, B * sf)
{
if (serialized) DWdyPWRAAs(df,sf);
else DWdyPWRAAp(df,sf);
}

static void DWdyMODSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t = fmod(t,tt);
*((D *)NUM_VAL(df)) = t;
}

static void DWdyMODAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
}

static void DWdyMODSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = fmod(t,tt);
}
*((D *)NUM_VAL(df)) = t;
}

static void DWdyMODAAp(B * df, B * sf)
{
L n; W * restrict s; D * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
}

static void DWdyMODAAs(B * df, B * sf)
{
L n; W * s; D * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
}

static void DWdyMODAA(B * df, B * sf)
{
if (serialized) DWdyMODAAs(df,sf);
else DWdyMODAAp(df,sf);
}

static void DWdyTHEARCSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
t = thearc(t,tt);
*((D *)NUM_VAL(df)) = t;
}

static void DWdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((W *)NUM_VAL(sf))) == WINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
}

static void DWdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; W *s;
s = (W *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = thearc(t,tt);
}
*((D *)NUM_VAL(df)) = t;
}

static void DWdyTHEARCAAp(B * df, B * sf)
{
L n; W * restrict s; D * restrict d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
}

static void DWdyTHEARCAAs(B * df, B * sf)
{
L n; W * s; D * d;
D t, tt;
s = (W *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((W *)s++)) == WINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
}

static void DWdyTHEARCAA(B * df, B * sf)
{
if (serialized) DWdyTHEARCAAs(df,sf);
else DWdyTHEARCAAp(df,sf);
}

static void DLdyADDSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t += tt;
*((D *)NUM_VAL(df)) = t;
}

static void DLdyADDAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
}

static void DLdyADDSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t += tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DLdyADDAAp(B * df, B * sf)
{
L n; L * restrict s; D * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
}

static void DLdyADDAAs(B * df, B * sf)
{
L n; L * s; D * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
}

static void DLdyADDAA(B * df, B * sf)
{
if (serialized) DLdyADDAAs(df,sf);
else DLdyADDAAp(df,sf);
}

static void DLdySUBSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t -= tt;
*((D *)NUM_VAL(df)) = t;
}

static void DLdySUBAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
}

static void DLdySUBSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t -= tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DLdySUBAAp(B * df, B * sf)
{
L n; L * restrict s; D * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
}

static void DLdySUBAAs(B * df, B * sf)
{
L n; L * s; D * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
}

static void DLdySUBAA(B * df, B * sf)
{
if (serialized) DLdySUBAAs(df,sf);
else DLdySUBAAp(df,sf);
}

static void DLdyMULSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t *= tt;
*((D *)NUM_VAL(df)) = t;
}

static void DLdyMULAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
}

static void DLdyMULSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t *= tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DLdyMULAAp(B * df, B * sf)
{
L n; L * restrict s; D * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
}

static void DLdyMULAAs(B * df, B * sf)
{
L n; L * s; D * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
}

static void DLdyMULAA(B * df, B * sf)
{
if (serialized) DLdyMULAAs(df,sf);
else DLdyMULAAp(df,sf);
}

static void DLdyDIVSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t /= tt;
*((D *)NUM_VAL(df)) = t;
}

static void DLdyDIVAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
}

static void DLdyDIVSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t /= tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DLdyDIVAAp(B * df, B * sf)
{
L n; L * restrict s; D * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
}

static void DLdyDIVAAs(B * df, B * sf)
{
L n; L * s; D * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
}

static void DLdyDIVAA(B * df, B * sf)
{
if (serialized) DLdyDIVAAs(df,sf);
else DLdyDIVAAp(df,sf);
}

static void DLdyPWRSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t = pow(t,tt);
*((D *)NUM_VAL(df)) = t;
}

static void DLdyPWRAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
}

static void DLdyPWRSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = pow(t,tt);
}
*((D *)NUM_VAL(df)) = t;
}

static void DLdyPWRAAp(B * df, B * sf)
{
L n; L * restrict s; D * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
}

static void DLdyPWRAAs(B * df, B * sf)
{
L n; L * s; D * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
}

static void DLdyPWRAA(B * df, B * sf)
{
if (serialized) DLdyPWRAAs(df,sf);
else DLdyPWRAAp(df,sf);
}

static void DLdyMODSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t = fmod(t,tt);
*((D *)NUM_VAL(df)) = t;
}

static void DLdyMODAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
}

static void DLdyMODSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = fmod(t,tt);
}
*((D *)NUM_VAL(df)) = t;
}

static void DLdyMODAAp(B * df, B * sf)
{
L n; L * restrict s; D * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
}

static void DLdyMODAAs(B * df, B * sf)
{
L n; L * s; D * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
}

static void DLdyMODAA(B * df, B * sf)
{
if (serialized) DLdyMODAAs(df,sf);
else DLdyMODAAp(df,sf);
}

static void DLdyTHEARCSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
t = thearc(t,tt);
*((D *)NUM_VAL(df)) = t;
}

static void DLdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
if ((tt = *((L *)NUM_VAL(sf))) == LINF) tt = DINF;
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
}

static void DLdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; L *s;
s = (L *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = thearc(t,tt);
}
*((D *)NUM_VAL(df)) = t;
}

static void DLdyTHEARCAAp(B * df, B * sf)
{
L n; L * restrict s; D * restrict d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
}

static void DLdyTHEARCAAs(B * df, B * sf)
{
L n; L * s; D * d;
D t, tt;
s = (L *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((tt = *((L *)s++)) == LINF) tt = DINF;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
}

static void DLdyTHEARCAA(B * df, B * sf)
{
if (serialized) DLdyTHEARCAAs(df,sf);
else DLdyTHEARCAAp(df,sf);
}

static void DSdyADDSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
tt = *((S *)NUM_VAL(sf));
t += tt;
*((D *)NUM_VAL(df)) = t;
}

static void DSdyADDAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
}

static void DSdyADDSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
tt = *((S *)s++);
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t += tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DSdyADDAAp(B * df, B * sf)
{
L n; S * restrict s; D * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
}

static void DSdyADDAAs(B * df, B * sf)
{
L n; S * s; D * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
}

static void DSdyADDAA(B * df, B * sf)
{
if (serialized) DSdyADDAAs(df,sf);
else DSdyADDAAp(df,sf);
}

static void DSdySUBSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
tt = *((S *)NUM_VAL(sf));
t -= tt;
*((D *)NUM_VAL(df)) = t;
}

static void DSdySUBAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
}

static void DSdySUBSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
tt = *((S *)s++);
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t -= tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DSdySUBAAp(B * df, B * sf)
{
L n; S * restrict s; D * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
}

static void DSdySUBAAs(B * df, B * sf)
{
L n; S * s; D * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
}

static void DSdySUBAA(B * df, B * sf)
{
if (serialized) DSdySUBAAs(df,sf);
else DSdySUBAAp(df,sf);
}

static void DSdyMULSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
tt = *((S *)NUM_VAL(sf));
t *= tt;
*((D *)NUM_VAL(df)) = t;
}

static void DSdyMULAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
}

static void DSdyMULSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
tt = *((S *)s++);
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t *= tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DSdyMULAAp(B * df, B * sf)
{
L n; S * restrict s; D * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
}

static void DSdyMULAAs(B * df, B * sf)
{
L n; S * s; D * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
}

static void DSdyMULAA(B * df, B * sf)
{
if (serialized) DSdyMULAAs(df,sf);
else DSdyMULAAp(df,sf);
}

static void DSdyDIVSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
tt = *((S *)NUM_VAL(sf));
t /= tt;
*((D *)NUM_VAL(df)) = t;
}

static void DSdyDIVAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
}

static void DSdyDIVSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
tt = *((S *)s++);
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t /= tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DSdyDIVAAp(B * df, B * sf)
{
L n; S * restrict s; D * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
}

static void DSdyDIVAAs(B * df, B * sf)
{
L n; S * s; D * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
}

static void DSdyDIVAA(B * df, B * sf)
{
if (serialized) DSdyDIVAAs(df,sf);
else DSdyDIVAAp(df,sf);
}

static void DSdyPWRSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
tt = *((S *)NUM_VAL(sf));
t = pow(t,tt);
*((D *)NUM_VAL(df)) = t;
}

static void DSdyPWRAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
}

static void DSdyPWRSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
tt = *((S *)s++);
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t = pow(t,tt);
}
*((D *)NUM_VAL(df)) = t;
}

static void DSdyPWRAAp(B * df, B * sf)
{
L n; S * restrict s; D * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
}

static void DSdyPWRAAs(B * df, B * sf)
{
L n; S * s; D * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
}

static void DSdyPWRAA(B * df, B * sf)
{
if (serialized) DSdyPWRAAs(df,sf);
else DSdyPWRAAp(df,sf);
}

static void DSdyMODSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
tt = *((S *)NUM_VAL(sf));
t = fmod(t,tt);
*((D *)NUM_VAL(df)) = t;
}

static void DSdyMODAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
}

static void DSdyMODSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
tt = *((S *)s++);
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t = fmod(t,tt);
}
*((D *)NUM_VAL(df)) = t;
}

static void DSdyMODAAp(B * df, B * sf)
{
L n; S * restrict s; D * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
}

static void DSdyMODAAs(B * df, B * sf)
{
L n; S * s; D * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
}

static void DSdyMODAA(B * df, B * sf)
{
if (serialized) DSdyMODAAs(df,sf);
else DSdyMODAAp(df,sf);
}

static void DSdyTHEARCSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
tt = *((S *)NUM_VAL(sf));
t = thearc(t,tt);
*((D *)NUM_VAL(df)) = t;
}

static void DSdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
tt = *((S *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
}

static void DSdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; S *s;
s = (S *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
tt = *((S *)s++);
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((S *)s++);
t = thearc(t,tt);
}
*((D *)NUM_VAL(df)) = t;
}

static void DSdyTHEARCAAp(B * df, B * sf)
{
L n; S * restrict s; D * restrict d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
}

static void DSdyTHEARCAAs(B * df, B * sf)
{
L n; S * s; D * d;
D t, tt;
s = (S *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((S *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
}

static void DSdyTHEARCAA(B * df, B * sf)
{
if (serialized) DSdyTHEARCAAs(df,sf);
else DSdyTHEARCAAp(df,sf);
}

static void DDdyADDSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
tt = *((D *)NUM_VAL(sf));
t += tt;
*((D *)NUM_VAL(df)) = t;
}

static void DDdyADDAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
}

static void DDdyADDSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
tt = *((D *)s++);
t += tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t += tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DDdyADDAAp(B * df, B * sf)
{
L n; D * restrict s; D * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
}

static void DDdyADDAAs(B * df, B * sf)
{
L n; D * s; D * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t += tt;
*((D *)d++) = t;
}
}

static void DDdyADDAA(B * df, B * sf)
{
if (serialized) DDdyADDAAs(df,sf);
else DDdyADDAAp(df,sf);
}

static void DDdySUBSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
tt = *((D *)NUM_VAL(sf));
t -= tt;
*((D *)NUM_VAL(df)) = t;
}

static void DDdySUBAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
}

static void DDdySUBSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
tt = *((D *)s++);
t -= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t -= tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DDdySUBAAp(B * df, B * sf)
{
L n; D * restrict s; D * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
}

static void DDdySUBAAs(B * df, B * sf)
{
L n; D * s; D * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t -= tt;
*((D *)d++) = t;
}
}

static void DDdySUBAA(B * df, B * sf)
{
if (serialized) DDdySUBAAs(df,sf);
else DDdySUBAAp(df,sf);
}

static void DDdyMULSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
tt = *((D *)NUM_VAL(sf));
t *= tt;
*((D *)NUM_VAL(df)) = t;
}

static void DDdyMULAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
}

static void DDdyMULSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
tt = *((D *)s++);
t *= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t *= tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DDdyMULAAp(B * df, B * sf)
{
L n; D * restrict s; D * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
}

static void DDdyMULAAs(B * df, B * sf)
{
L n; D * s; D * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t *= tt;
*((D *)d++) = t;
}
}

static void DDdyMULAA(B * df, B * sf)
{
if (serialized) DDdyMULAAs(df,sf);
else DDdyMULAAp(df,sf);
}

static void DDdyDIVSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
tt = *((D *)NUM_VAL(sf));
t /= tt;
*((D *)NUM_VAL(df)) = t;
}

static void DDdyDIVAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
}

static void DDdyDIVSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
tt = *((D *)s++);
t /= tt;
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t /= tt;
}
*((D *)NUM_VAL(df)) = t;
}

static void DDdyDIVAAp(B * df, B * sf)
{
L n; D * restrict s; D * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
}

static void DDdyDIVAAs(B * df, B * sf)
{
L n; D * s; D * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t /= tt;
*((D *)d++) = t;
}
}

static void DDdyDIVAA(B * df, B * sf)
{
if (serialized) DDdyDIVAAs(df,sf);
else DDdyDIVAAp(df,sf);
}

static void DDdyPWRSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
tt = *((D *)NUM_VAL(sf));
t = pow(t,tt);
*((D *)NUM_VAL(df)) = t;
}

static void DDdyPWRAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
}

static void DDdyPWRSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
tt = *((D *)s++);
t = pow(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t = pow(t,tt);
}
*((D *)NUM_VAL(df)) = t;
}

static void DDdyPWRAAp(B * df, B * sf)
{
L n; D * restrict s; D * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
}

static void DDdyPWRAAs(B * df, B * sf)
{
L n; D * s; D * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t = pow(t,tt);
*((D *)d++) = t;
}
}

static void DDdyPWRAA(B * df, B * sf)
{
if (serialized) DDdyPWRAAs(df,sf);
else DDdyPWRAAp(df,sf);
}

static void DDdyMODSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
tt = *((D *)NUM_VAL(sf));
t = fmod(t,tt);
*((D *)NUM_VAL(df)) = t;
}

static void DDdyMODAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
}

static void DDdyMODSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
tt = *((D *)s++);
t = fmod(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t = fmod(t,tt);
}
*((D *)NUM_VAL(df)) = t;
}

static void DDdyMODAAp(B * df, B * sf)
{
L n; D * restrict s; D * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
}

static void DDdyMODAAs(B * df, B * sf)
{
L n; D * s; D * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t = fmod(t,tt);
*((D *)d++) = t;
}
}

static void DDdyMODAA(B * df, B * sf)
{
if (serialized) DDdyMODAAs(df,sf);
else DDdyMODAAp(df,sf);
}

static void DDdyTHEARCSS(B *df, B *sf)
{
D t, tt;
t = *((D *)NUM_VAL(df));
tt = *((D *)NUM_VAL(sf));
t = thearc(t,tt);
*((D *)NUM_VAL(df)) = t;
}

static void DDdyTHEARCAS(B *df, B *sf)
{
D t,tt; L n; D *d;
d = (D *)VALUE_BASE(df);
tt = *((D *)NUM_VAL(sf));
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
}

static void DDdyTHEARCSA(B *df, B *sf)
{
D t,tt; L n; D *s;
s = (D *)VALUE_BASE(sf);
t = *((D *)NUM_VAL(df));
for (n = (ARRAY_SIZE(sf)>>4); n>0; n--) {
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
tt = *((D *)s++);
t = thearc(t,tt);
}
for (n = (ARRAY_SIZE(sf)&15); n>0; n--) {
tt = *((D *)s++);
t = thearc(t,tt);
}
*((D *)NUM_VAL(df)) = t;
}

static void DDdyTHEARCAAp(B * df, B * sf)
{
L n; D * restrict s; D * restrict d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
}

static void DDdyTHEARCAAs(B * df, B * sf)
{
L n; D * s; D * d;
D t, tt;
s = (D *)VALUE_BASE(sf);
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
tt = *((D *)s++);
t = *((D *)d);
t = thearc(t,tt);
*((D *)d++) = t;
}
}

static void DDdyTHEARCAA(B * df, B * sf)
{
if (serialized) DDdyTHEARCAAs(df,sf);
else DDdyTHEARCAAp(df,sf);
}

typedef void (*dyadic_fct)(B*,B*);
static dyadic_fct ADDlist[] = {
BBdyADDSS, BBdyADDAS, BBdyADDSA, BBdyADDAA, 
BWdyADDSS, BWdyADDAS, BWdyADDSA, BWdyADDAA, 
BLdyADDSS, BLdyADDAS, BLdyADDSA, BLdyADDAA, 
BSdyADDSS, BSdyADDAS, BSdyADDSA, BSdyADDAA, 
BDdyADDSS, BDdyADDAS, BDdyADDSA, BDdyADDAA, 
WBdyADDSS, WBdyADDAS, WBdyADDSA, WBdyADDAA, 
WWdyADDSS, WWdyADDAS, WWdyADDSA, WWdyADDAA, 
WLdyADDSS, WLdyADDAS, WLdyADDSA, WLdyADDAA, 
WSdyADDSS, WSdyADDAS, WSdyADDSA, WSdyADDAA, 
WDdyADDSS, WDdyADDAS, WDdyADDSA, WDdyADDAA, 
LBdyADDSS, LBdyADDAS, LBdyADDSA, LBdyADDAA, 
LWdyADDSS, LWdyADDAS, LWdyADDSA, LWdyADDAA, 
LLdyADDSS, LLdyADDAS, LLdyADDSA, LLdyADDAA, 
LSdyADDSS, LSdyADDAS, LSdyADDSA, LSdyADDAA, 
LDdyADDSS, LDdyADDAS, LDdyADDSA, LDdyADDAA, 
SBdyADDSS, SBdyADDAS, SBdyADDSA, SBdyADDAA, 
SWdyADDSS, SWdyADDAS, SWdyADDSA, SWdyADDAA, 
SLdyADDSS, SLdyADDAS, SLdyADDSA, SLdyADDAA, 
SSdyADDSS, SSdyADDAS, SSdyADDSA, SSdyADDAA, 
SDdyADDSS, SDdyADDAS, SDdyADDSA, SDdyADDAA, 
DBdyADDSS, DBdyADDAS, DBdyADDSA, DBdyADDAA, 
DWdyADDSS, DWdyADDAS, DWdyADDSA, DWdyADDAA, 
DLdyADDSS, DLdyADDAS, DLdyADDSA, DLdyADDAA, 
DSdyADDSS, DSdyADDAS, DSdyADDSA, DSdyADDAA, 
DDdyADDSS, DDdyADDAS, DDdyADDSA, DDdyADDAA, 

};
static dyadic_fct SUBlist[] = {
BBdySUBSS, BBdySUBAS, BBdySUBSA, BBdySUBAA, 
BWdySUBSS, BWdySUBAS, BWdySUBSA, BWdySUBAA, 
BLdySUBSS, BLdySUBAS, BLdySUBSA, BLdySUBAA, 
BSdySUBSS, BSdySUBAS, BSdySUBSA, BSdySUBAA, 
BDdySUBSS, BDdySUBAS, BDdySUBSA, BDdySUBAA, 
WBdySUBSS, WBdySUBAS, WBdySUBSA, WBdySUBAA, 
WWdySUBSS, WWdySUBAS, WWdySUBSA, WWdySUBAA, 
WLdySUBSS, WLdySUBAS, WLdySUBSA, WLdySUBAA, 
WSdySUBSS, WSdySUBAS, WSdySUBSA, WSdySUBAA, 
WDdySUBSS, WDdySUBAS, WDdySUBSA, WDdySUBAA, 
LBdySUBSS, LBdySUBAS, LBdySUBSA, LBdySUBAA, 
LWdySUBSS, LWdySUBAS, LWdySUBSA, LWdySUBAA, 
LLdySUBSS, LLdySUBAS, LLdySUBSA, LLdySUBAA, 
LSdySUBSS, LSdySUBAS, LSdySUBSA, LSdySUBAA, 
LDdySUBSS, LDdySUBAS, LDdySUBSA, LDdySUBAA, 
SBdySUBSS, SBdySUBAS, SBdySUBSA, SBdySUBAA, 
SWdySUBSS, SWdySUBAS, SWdySUBSA, SWdySUBAA, 
SLdySUBSS, SLdySUBAS, SLdySUBSA, SLdySUBAA, 
SSdySUBSS, SSdySUBAS, SSdySUBSA, SSdySUBAA, 
SDdySUBSS, SDdySUBAS, SDdySUBSA, SDdySUBAA, 
DBdySUBSS, DBdySUBAS, DBdySUBSA, DBdySUBAA, 
DWdySUBSS, DWdySUBAS, DWdySUBSA, DWdySUBAA, 
DLdySUBSS, DLdySUBAS, DLdySUBSA, DLdySUBAA, 
DSdySUBSS, DSdySUBAS, DSdySUBSA, DSdySUBAA, 
DDdySUBSS, DDdySUBAS, DDdySUBSA, DDdySUBAA, 

};
static dyadic_fct MULlist[] = {
BBdyMULSS, BBdyMULAS, BBdyMULSA, BBdyMULAA, 
BWdyMULSS, BWdyMULAS, BWdyMULSA, BWdyMULAA, 
BLdyMULSS, BLdyMULAS, BLdyMULSA, BLdyMULAA, 
BSdyMULSS, BSdyMULAS, BSdyMULSA, BSdyMULAA, 
BDdyMULSS, BDdyMULAS, BDdyMULSA, BDdyMULAA, 
WBdyMULSS, WBdyMULAS, WBdyMULSA, WBdyMULAA, 
WWdyMULSS, WWdyMULAS, WWdyMULSA, WWdyMULAA, 
WLdyMULSS, WLdyMULAS, WLdyMULSA, WLdyMULAA, 
WSdyMULSS, WSdyMULAS, WSdyMULSA, WSdyMULAA, 
WDdyMULSS, WDdyMULAS, WDdyMULSA, WDdyMULAA, 
LBdyMULSS, LBdyMULAS, LBdyMULSA, LBdyMULAA, 
LWdyMULSS, LWdyMULAS, LWdyMULSA, LWdyMULAA, 
LLdyMULSS, LLdyMULAS, LLdyMULSA, LLdyMULAA, 
LSdyMULSS, LSdyMULAS, LSdyMULSA, LSdyMULAA, 
LDdyMULSS, LDdyMULAS, LDdyMULSA, LDdyMULAA, 
SBdyMULSS, SBdyMULAS, SBdyMULSA, SBdyMULAA, 
SWdyMULSS, SWdyMULAS, SWdyMULSA, SWdyMULAA, 
SLdyMULSS, SLdyMULAS, SLdyMULSA, SLdyMULAA, 
SSdyMULSS, SSdyMULAS, SSdyMULSA, SSdyMULAA, 
SDdyMULSS, SDdyMULAS, SDdyMULSA, SDdyMULAA, 
DBdyMULSS, DBdyMULAS, DBdyMULSA, DBdyMULAA, 
DWdyMULSS, DWdyMULAS, DWdyMULSA, DWdyMULAA, 
DLdyMULSS, DLdyMULAS, DLdyMULSA, DLdyMULAA, 
DSdyMULSS, DSdyMULAS, DSdyMULSA, DSdyMULAA, 
DDdyMULSS, DDdyMULAS, DDdyMULSA, DDdyMULAA, 

};
static dyadic_fct DIVlist[] = {
BBdyDIVSS, BBdyDIVAS, BBdyDIVSA, BBdyDIVAA, 
BWdyDIVSS, BWdyDIVAS, BWdyDIVSA, BWdyDIVAA, 
BLdyDIVSS, BLdyDIVAS, BLdyDIVSA, BLdyDIVAA, 
BSdyDIVSS, BSdyDIVAS, BSdyDIVSA, BSdyDIVAA, 
BDdyDIVSS, BDdyDIVAS, BDdyDIVSA, BDdyDIVAA, 
WBdyDIVSS, WBdyDIVAS, WBdyDIVSA, WBdyDIVAA, 
WWdyDIVSS, WWdyDIVAS, WWdyDIVSA, WWdyDIVAA, 
WLdyDIVSS, WLdyDIVAS, WLdyDIVSA, WLdyDIVAA, 
WSdyDIVSS, WSdyDIVAS, WSdyDIVSA, WSdyDIVAA, 
WDdyDIVSS, WDdyDIVAS, WDdyDIVSA, WDdyDIVAA, 
LBdyDIVSS, LBdyDIVAS, LBdyDIVSA, LBdyDIVAA, 
LWdyDIVSS, LWdyDIVAS, LWdyDIVSA, LWdyDIVAA, 
LLdyDIVSS, LLdyDIVAS, LLdyDIVSA, LLdyDIVAA, 
LSdyDIVSS, LSdyDIVAS, LSdyDIVSA, LSdyDIVAA, 
LDdyDIVSS, LDdyDIVAS, LDdyDIVSA, LDdyDIVAA, 
SBdyDIVSS, SBdyDIVAS, SBdyDIVSA, SBdyDIVAA, 
SWdyDIVSS, SWdyDIVAS, SWdyDIVSA, SWdyDIVAA, 
SLdyDIVSS, SLdyDIVAS, SLdyDIVSA, SLdyDIVAA, 
SSdyDIVSS, SSdyDIVAS, SSdyDIVSA, SSdyDIVAA, 
SDdyDIVSS, SDdyDIVAS, SDdyDIVSA, SDdyDIVAA, 
DBdyDIVSS, DBdyDIVAS, DBdyDIVSA, DBdyDIVAA, 
DWdyDIVSS, DWdyDIVAS, DWdyDIVSA, DWdyDIVAA, 
DLdyDIVSS, DLdyDIVAS, DLdyDIVSA, DLdyDIVAA, 
DSdyDIVSS, DSdyDIVAS, DSdyDIVSA, DSdyDIVAA, 
DDdyDIVSS, DDdyDIVAS, DDdyDIVSA, DDdyDIVAA, 

};
static dyadic_fct PWRlist[] = {
BBdyPWRSS, BBdyPWRAS, BBdyPWRSA, BBdyPWRAA, 
BWdyPWRSS, BWdyPWRAS, BWdyPWRSA, BWdyPWRAA, 
BLdyPWRSS, BLdyPWRAS, BLdyPWRSA, BLdyPWRAA, 
BSdyPWRSS, BSdyPWRAS, BSdyPWRSA, BSdyPWRAA, 
BDdyPWRSS, BDdyPWRAS, BDdyPWRSA, BDdyPWRAA, 
WBdyPWRSS, WBdyPWRAS, WBdyPWRSA, WBdyPWRAA, 
WWdyPWRSS, WWdyPWRAS, WWdyPWRSA, WWdyPWRAA, 
WLdyPWRSS, WLdyPWRAS, WLdyPWRSA, WLdyPWRAA, 
WSdyPWRSS, WSdyPWRAS, WSdyPWRSA, WSdyPWRAA, 
WDdyPWRSS, WDdyPWRAS, WDdyPWRSA, WDdyPWRAA, 
LBdyPWRSS, LBdyPWRAS, LBdyPWRSA, LBdyPWRAA, 
LWdyPWRSS, LWdyPWRAS, LWdyPWRSA, LWdyPWRAA, 
LLdyPWRSS, LLdyPWRAS, LLdyPWRSA, LLdyPWRAA, 
LSdyPWRSS, LSdyPWRAS, LSdyPWRSA, LSdyPWRAA, 
LDdyPWRSS, LDdyPWRAS, LDdyPWRSA, LDdyPWRAA, 
SBdyPWRSS, SBdyPWRAS, SBdyPWRSA, SBdyPWRAA, 
SWdyPWRSS, SWdyPWRAS, SWdyPWRSA, SWdyPWRAA, 
SLdyPWRSS, SLdyPWRAS, SLdyPWRSA, SLdyPWRAA, 
SSdyPWRSS, SSdyPWRAS, SSdyPWRSA, SSdyPWRAA, 
SDdyPWRSS, SDdyPWRAS, SDdyPWRSA, SDdyPWRAA, 
DBdyPWRSS, DBdyPWRAS, DBdyPWRSA, DBdyPWRAA, 
DWdyPWRSS, DWdyPWRAS, DWdyPWRSA, DWdyPWRAA, 
DLdyPWRSS, DLdyPWRAS, DLdyPWRSA, DLdyPWRAA, 
DSdyPWRSS, DSdyPWRAS, DSdyPWRSA, DSdyPWRAA, 
DDdyPWRSS, DDdyPWRAS, DDdyPWRSA, DDdyPWRAA, 

};
static dyadic_fct MODlist[] = {
BBdyMODSS, BBdyMODAS, BBdyMODSA, BBdyMODAA, 
BWdyMODSS, BWdyMODAS, BWdyMODSA, BWdyMODAA, 
BLdyMODSS, BLdyMODAS, BLdyMODSA, BLdyMODAA, 
BSdyMODSS, BSdyMODAS, BSdyMODSA, BSdyMODAA, 
BDdyMODSS, BDdyMODAS, BDdyMODSA, BDdyMODAA, 
WBdyMODSS, WBdyMODAS, WBdyMODSA, WBdyMODAA, 
WWdyMODSS, WWdyMODAS, WWdyMODSA, WWdyMODAA, 
WLdyMODSS, WLdyMODAS, WLdyMODSA, WLdyMODAA, 
WSdyMODSS, WSdyMODAS, WSdyMODSA, WSdyMODAA, 
WDdyMODSS, WDdyMODAS, WDdyMODSA, WDdyMODAA, 
LBdyMODSS, LBdyMODAS, LBdyMODSA, LBdyMODAA, 
LWdyMODSS, LWdyMODAS, LWdyMODSA, LWdyMODAA, 
LLdyMODSS, LLdyMODAS, LLdyMODSA, LLdyMODAA, 
LSdyMODSS, LSdyMODAS, LSdyMODSA, LSdyMODAA, 
LDdyMODSS, LDdyMODAS, LDdyMODSA, LDdyMODAA, 
SBdyMODSS, SBdyMODAS, SBdyMODSA, SBdyMODAA, 
SWdyMODSS, SWdyMODAS, SWdyMODSA, SWdyMODAA, 
SLdyMODSS, SLdyMODAS, SLdyMODSA, SLdyMODAA, 
SSdyMODSS, SSdyMODAS, SSdyMODSA, SSdyMODAA, 
SDdyMODSS, SDdyMODAS, SDdyMODSA, SDdyMODAA, 
DBdyMODSS, DBdyMODAS, DBdyMODSA, DBdyMODAA, 
DWdyMODSS, DWdyMODAS, DWdyMODSA, DWdyMODAA, 
DLdyMODSS, DLdyMODAS, DLdyMODSA, DLdyMODAA, 
DSdyMODSS, DSdyMODAS, DSdyMODSA, DSdyMODAA, 
DDdyMODSS, DDdyMODAS, DDdyMODSA, DDdyMODAA, 

};
static dyadic_fct THEARClist[] = {
BBdyTHEARCSS, BBdyTHEARCAS, BBdyTHEARCSA, BBdyTHEARCAA, 
BWdyTHEARCSS, BWdyTHEARCAS, BWdyTHEARCSA, BWdyTHEARCAA, 
BLdyTHEARCSS, BLdyTHEARCAS, BLdyTHEARCSA, BLdyTHEARCAA, 
BSdyTHEARCSS, BSdyTHEARCAS, BSdyTHEARCSA, BSdyTHEARCAA, 
BDdyTHEARCSS, BDdyTHEARCAS, BDdyTHEARCSA, BDdyTHEARCAA, 
WBdyTHEARCSS, WBdyTHEARCAS, WBdyTHEARCSA, WBdyTHEARCAA, 
WWdyTHEARCSS, WWdyTHEARCAS, WWdyTHEARCSA, WWdyTHEARCAA, 
WLdyTHEARCSS, WLdyTHEARCAS, WLdyTHEARCSA, WLdyTHEARCAA, 
WSdyTHEARCSS, WSdyTHEARCAS, WSdyTHEARCSA, WSdyTHEARCAA, 
WDdyTHEARCSS, WDdyTHEARCAS, WDdyTHEARCSA, WDdyTHEARCAA, 
LBdyTHEARCSS, LBdyTHEARCAS, LBdyTHEARCSA, LBdyTHEARCAA, 
LWdyTHEARCSS, LWdyTHEARCAS, LWdyTHEARCSA, LWdyTHEARCAA, 
LLdyTHEARCSS, LLdyTHEARCAS, LLdyTHEARCSA, LLdyTHEARCAA, 
LSdyTHEARCSS, LSdyTHEARCAS, LSdyTHEARCSA, LSdyTHEARCAA, 
LDdyTHEARCSS, LDdyTHEARCAS, LDdyTHEARCSA, LDdyTHEARCAA, 
SBdyTHEARCSS, SBdyTHEARCAS, SBdyTHEARCSA, SBdyTHEARCAA, 
SWdyTHEARCSS, SWdyTHEARCAS, SWdyTHEARCSA, SWdyTHEARCAA, 
SLdyTHEARCSS, SLdyTHEARCAS, SLdyTHEARCSA, SLdyTHEARCAA, 
SSdyTHEARCSS, SSdyTHEARCAS, SSdyTHEARCSA, SSdyTHEARCAA, 
SDdyTHEARCSS, SDdyTHEARCAS, SDdyTHEARCSA, SDdyTHEARCAA, 
DBdyTHEARCSS, DBdyTHEARCAS, DBdyTHEARCSA, DBdyTHEARCAA, 
DWdyTHEARCSS, DWdyTHEARCAS, DWdyTHEARCSA, DWdyTHEARCAA, 
DLdyTHEARCSS, DLdyTHEARCAS, DLdyTHEARCSA, DLdyTHEARCAA, 
DSdyTHEARCSS, DSdyTHEARCAS, DSdyTHEARCSA, DSdyTHEARCAA, 
DDdyTHEARCSS, DDdyTHEARCAS, DDdyTHEARCSA, DDdyTHEARCAA, 

};

static void BmoNEGS(B *df)
{
D t;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
t = -t;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BmoNEGA(B *df)
{
D t; B *d; L n;
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = -t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = -t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = -t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = -t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = -t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = -t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = -t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = -t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = -t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = -t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = -t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = -t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = -t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = -t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = -t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = -t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = -t;
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BmoABSS(B *df)
{
D t;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
t = fabs(t);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BmoABSA(B *df)
{
D t; B *d; L n;
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = fabs(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fabs(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fabs(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fabs(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fabs(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fabs(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fabs(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fabs(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fabs(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fabs(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fabs(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fabs(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fabs(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fabs(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fabs(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = fabs(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = fabs(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BmoSQRTS(B *df)
{
D t;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
t = sqrt(t);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BmoSQRTA(B *df)
{
D t; B *d; L n;
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = sqrt(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sqrt(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sqrt(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sqrt(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sqrt(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sqrt(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sqrt(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sqrt(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sqrt(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sqrt(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sqrt(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sqrt(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sqrt(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sqrt(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sqrt(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sqrt(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = sqrt(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BmoEXPS(B *df)
{
D t;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
t = exp(t);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BmoEXPA(B *df)
{
D t; B *d; L n;
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = exp(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = exp(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = exp(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = exp(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = exp(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = exp(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = exp(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = exp(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = exp(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = exp(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = exp(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = exp(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = exp(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = exp(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = exp(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = exp(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = exp(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BmoLNS(B *df)
{
D t;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
t = log(t);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BmoLNA(B *df)
{
D t; B *d; L n;
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = log(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = log(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BmoLGS(B *df)
{
D t;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
t = log10(t);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BmoLGA(B *df)
{
D t; B *d; L n;
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = log10(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log10(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log10(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log10(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log10(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log10(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log10(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log10(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log10(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log10(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log10(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log10(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log10(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log10(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log10(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = log10(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = log10(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BmoFLOORS(B *df)
{
D t;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
t = floor(t);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BmoFLOORA(B *df)
{
D t; B *d; L n;
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = floor(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = floor(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = floor(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = floor(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = floor(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = floor(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = floor(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = floor(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = floor(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = floor(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = floor(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = floor(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = floor(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = floor(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = floor(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = floor(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = floor(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BmoCEILS(B *df)
{
D t;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
t = ceil(t);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BmoCEILA(B *df)
{
D t; B *d; L n;
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = ceil(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = ceil(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = ceil(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = ceil(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = ceil(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = ceil(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = ceil(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = ceil(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = ceil(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = ceil(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = ceil(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = ceil(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = ceil(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = ceil(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = ceil(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = ceil(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = ceil(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BmoSINS(B *df)
{
D t;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
t = sin(t);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BmoSINA(B *df)
{
D t; B *d; L n;
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = sin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = sin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = sin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BmoCOSS(B *df)
{
D t;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
t = cos(t);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BmoCOSA(B *df)
{
D t; B *d; L n;
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = cos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = cos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = cos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = cos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = cos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = cos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = cos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = cos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = cos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = cos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = cos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = cos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = cos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = cos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = cos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = cos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = cos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BmoTANS(B *df)
{
D t;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
t = tan(t);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BmoTANA(B *df)
{
D t; B *d; L n;
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = tan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = tan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = tan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = tan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = tan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = tan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = tan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = tan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = tan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = tan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = tan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = tan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = tan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = tan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = tan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = tan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = tan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BmoASINS(B *df)
{
D t;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
t = asin(t);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BmoASINA(B *df)
{
D t; B *d; L n;
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = asin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = asin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = asin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = asin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = asin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = asin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = asin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = asin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = asin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = asin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = asin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = asin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = asin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = asin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = asin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = asin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = asin(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BmoACOSS(B *df)
{
D t;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
t = acos(t);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BmoACOSA(B *df)
{
D t; B *d; L n;
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = acos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = acos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = acos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = acos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = acos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = acos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = acos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = acos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = acos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = acos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = acos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = acos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = acos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = acos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = acos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = acos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = acos(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void BmoATANS(B *df)
{
D t;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
t = atan(t);
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void BmoATANA(B *df)
{
D t; B *d; L n;
d = (B *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = atan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = atan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = atan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = atan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = atan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = atan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = atan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = atan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = atan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = atan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = atan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = atan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = atan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = atan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = atan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
if ((t = *((B *)d)) == BINF) t = DINF;
t = atan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((B *)d)) == BINF) t = DINF;
t = atan(t);
*((B *)d++) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}
}

static void WmoNEGS(B *df)
{
D t;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
t = -t;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WmoNEGA(B *df)
{
D t; W *d; L n;
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = -t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = -t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = -t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = -t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = -t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = -t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = -t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = -t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = -t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = -t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = -t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = -t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = -t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = -t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = -t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = -t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = -t;
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WmoABSS(B *df)
{
D t;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
t = fabs(t);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WmoABSA(B *df)
{
D t; W *d; L n;
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = fabs(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fabs(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fabs(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fabs(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fabs(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fabs(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fabs(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fabs(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fabs(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fabs(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fabs(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fabs(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fabs(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fabs(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fabs(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = fabs(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = fabs(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WmoSQRTS(B *df)
{
D t;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
t = sqrt(t);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WmoSQRTA(B *df)
{
D t; W *d; L n;
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = sqrt(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sqrt(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sqrt(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sqrt(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sqrt(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sqrt(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sqrt(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sqrt(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sqrt(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sqrt(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sqrt(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sqrt(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sqrt(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sqrt(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sqrt(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sqrt(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = sqrt(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WmoEXPS(B *df)
{
D t;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
t = exp(t);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WmoEXPA(B *df)
{
D t; W *d; L n;
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = exp(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = exp(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = exp(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = exp(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = exp(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = exp(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = exp(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = exp(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = exp(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = exp(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = exp(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = exp(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = exp(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = exp(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = exp(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = exp(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = exp(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WmoLNS(B *df)
{
D t;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
t = log(t);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WmoLNA(B *df)
{
D t; W *d; L n;
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = log(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = log(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WmoLGS(B *df)
{
D t;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
t = log10(t);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WmoLGA(B *df)
{
D t; W *d; L n;
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = log10(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log10(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log10(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log10(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log10(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log10(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log10(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log10(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log10(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log10(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log10(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log10(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log10(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log10(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log10(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = log10(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = log10(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WmoFLOORS(B *df)
{
D t;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
t = floor(t);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WmoFLOORA(B *df)
{
D t; W *d; L n;
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = floor(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = floor(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = floor(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = floor(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = floor(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = floor(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = floor(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = floor(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = floor(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = floor(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = floor(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = floor(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = floor(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = floor(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = floor(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = floor(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = floor(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WmoCEILS(B *df)
{
D t;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
t = ceil(t);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WmoCEILA(B *df)
{
D t; W *d; L n;
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = ceil(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = ceil(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = ceil(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = ceil(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = ceil(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = ceil(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = ceil(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = ceil(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = ceil(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = ceil(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = ceil(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = ceil(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = ceil(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = ceil(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = ceil(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = ceil(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = ceil(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WmoSINS(B *df)
{
D t;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
t = sin(t);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WmoSINA(B *df)
{
D t; W *d; L n;
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = sin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = sin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = sin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WmoCOSS(B *df)
{
D t;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
t = cos(t);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WmoCOSA(B *df)
{
D t; W *d; L n;
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = cos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = cos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = cos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = cos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = cos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = cos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = cos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = cos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = cos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = cos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = cos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = cos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = cos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = cos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = cos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = cos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = cos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WmoTANS(B *df)
{
D t;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
t = tan(t);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WmoTANA(B *df)
{
D t; W *d; L n;
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = tan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = tan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = tan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = tan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = tan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = tan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = tan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = tan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = tan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = tan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = tan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = tan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = tan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = tan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = tan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = tan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = tan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WmoASINS(B *df)
{
D t;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
t = asin(t);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WmoASINA(B *df)
{
D t; W *d; L n;
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = asin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = asin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = asin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = asin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = asin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = asin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = asin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = asin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = asin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = asin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = asin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = asin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = asin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = asin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = asin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = asin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = asin(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WmoACOSS(B *df)
{
D t;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
t = acos(t);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WmoACOSA(B *df)
{
D t; W *d; L n;
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = acos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = acos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = acos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = acos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = acos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = acos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = acos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = acos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = acos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = acos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = acos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = acos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = acos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = acos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = acos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = acos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = acos(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void WmoATANS(B *df)
{
D t;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
t = atan(t);
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void WmoATANA(B *df)
{
D t; W *d; L n;
d = (W *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = atan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = atan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = atan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = atan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = atan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = atan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = atan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = atan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = atan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = atan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = atan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = atan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = atan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = atan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = atan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
if ((t = *((W *)d)) == WINF) t = DINF;
t = atan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((W *)d)) == WINF) t = DINF;
t = atan(t);
*((W *)d++) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}
}

static void LmoNEGS(B *df)
{
D t;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
t = -t;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LmoNEGA(B *df)
{
D t; L *d; L n;
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = -t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = -t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = -t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = -t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = -t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = -t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = -t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = -t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = -t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = -t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = -t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = -t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = -t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = -t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = -t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = -t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = -t;
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LmoABSS(B *df)
{
D t;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
t = fabs(t);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LmoABSA(B *df)
{
D t; L *d; L n;
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = fabs(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fabs(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fabs(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fabs(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fabs(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fabs(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fabs(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fabs(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fabs(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fabs(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fabs(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fabs(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fabs(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fabs(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fabs(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = fabs(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = fabs(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LmoSQRTS(B *df)
{
D t;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
t = sqrt(t);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LmoSQRTA(B *df)
{
D t; L *d; L n;
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = sqrt(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sqrt(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sqrt(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sqrt(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sqrt(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sqrt(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sqrt(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sqrt(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sqrt(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sqrt(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sqrt(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sqrt(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sqrt(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sqrt(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sqrt(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sqrt(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = sqrt(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LmoEXPS(B *df)
{
D t;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
t = exp(t);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LmoEXPA(B *df)
{
D t; L *d; L n;
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = exp(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = exp(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = exp(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = exp(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = exp(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = exp(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = exp(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = exp(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = exp(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = exp(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = exp(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = exp(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = exp(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = exp(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = exp(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = exp(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = exp(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LmoLNS(B *df)
{
D t;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
t = log(t);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LmoLNA(B *df)
{
D t; L *d; L n;
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = log(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = log(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LmoLGS(B *df)
{
D t;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
t = log10(t);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LmoLGA(B *df)
{
D t; L *d; L n;
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = log10(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log10(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log10(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log10(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log10(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log10(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log10(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log10(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log10(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log10(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log10(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log10(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log10(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log10(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log10(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = log10(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = log10(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LmoFLOORS(B *df)
{
D t;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
t = floor(t);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LmoFLOORA(B *df)
{
D t; L *d; L n;
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = floor(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = floor(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = floor(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = floor(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = floor(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = floor(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = floor(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = floor(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = floor(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = floor(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = floor(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = floor(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = floor(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = floor(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = floor(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = floor(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = floor(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LmoCEILS(B *df)
{
D t;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
t = ceil(t);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LmoCEILA(B *df)
{
D t; L *d; L n;
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = ceil(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = ceil(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = ceil(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = ceil(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = ceil(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = ceil(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = ceil(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = ceil(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = ceil(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = ceil(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = ceil(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = ceil(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = ceil(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = ceil(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = ceil(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = ceil(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = ceil(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LmoSINS(B *df)
{
D t;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
t = sin(t);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LmoSINA(B *df)
{
D t; L *d; L n;
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = sin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = sin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = sin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LmoCOSS(B *df)
{
D t;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
t = cos(t);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LmoCOSA(B *df)
{
D t; L *d; L n;
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = cos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = cos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = cos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = cos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = cos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = cos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = cos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = cos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = cos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = cos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = cos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = cos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = cos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = cos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = cos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = cos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = cos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LmoTANS(B *df)
{
D t;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
t = tan(t);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LmoTANA(B *df)
{
D t; L *d; L n;
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = tan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = tan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = tan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = tan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = tan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = tan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = tan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = tan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = tan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = tan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = tan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = tan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = tan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = tan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = tan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = tan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = tan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LmoASINS(B *df)
{
D t;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
t = asin(t);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LmoASINA(B *df)
{
D t; L *d; L n;
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = asin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = asin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = asin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = asin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = asin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = asin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = asin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = asin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = asin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = asin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = asin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = asin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = asin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = asin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = asin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = asin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = asin(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LmoACOSS(B *df)
{
D t;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
t = acos(t);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LmoACOSA(B *df)
{
D t; L *d; L n;
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = acos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = acos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = acos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = acos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = acos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = acos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = acos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = acos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = acos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = acos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = acos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = acos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = acos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = acos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = acos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = acos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = acos(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void LmoATANS(B *df)
{
D t;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
t = atan(t);
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void LmoATANA(B *df)
{
D t; L *d; L n;
d = (L *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = atan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = atan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = atan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = atan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = atan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = atan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = atan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = atan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = atan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = atan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = atan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = atan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = atan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = atan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = atan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
if ((t = *((L *)d)) == LINF) t = DINF;
t = atan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
if ((t = *((L *)d)) == LINF) t = DINF;
t = atan(t);
*((L *)d++) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}
}

static void SmoNEGS(B *df)
{
D t;
t = *((S *)NUM_VAL(df));
t = -t;
*((S *)NUM_VAL(df)) = t;
}

static void SmoNEGA(B *df)
{
D t; S *d; L n;
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = -t;
*((S *)d++) = t;
t = *((S *)d);
t = -t;
*((S *)d++) = t;
t = *((S *)d);
t = -t;
*((S *)d++) = t;
t = *((S *)d);
t = -t;
*((S *)d++) = t;
t = *((S *)d);
t = -t;
*((S *)d++) = t;
t = *((S *)d);
t = -t;
*((S *)d++) = t;
t = *((S *)d);
t = -t;
*((S *)d++) = t;
t = *((S *)d);
t = -t;
*((S *)d++) = t;
t = *((S *)d);
t = -t;
*((S *)d++) = t;
t = *((S *)d);
t = -t;
*((S *)d++) = t;
t = *((S *)d);
t = -t;
*((S *)d++) = t;
t = *((S *)d);
t = -t;
*((S *)d++) = t;
t = *((S *)d);
t = -t;
*((S *)d++) = t;
t = *((S *)d);
t = -t;
*((S *)d++) = t;
t = *((S *)d);
t = -t;
*((S *)d++) = t;
t = *((S *)d);
t = -t;
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = -t;
*((S *)d++) = t;
}
}

static void SmoABSS(B *df)
{
D t;
t = *((S *)NUM_VAL(df));
t = fabs(t);
*((S *)NUM_VAL(df)) = t;
}

static void SmoABSA(B *df)
{
D t; S *d; L n;
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = fabs(t);
*((S *)d++) = t;
t = *((S *)d);
t = fabs(t);
*((S *)d++) = t;
t = *((S *)d);
t = fabs(t);
*((S *)d++) = t;
t = *((S *)d);
t = fabs(t);
*((S *)d++) = t;
t = *((S *)d);
t = fabs(t);
*((S *)d++) = t;
t = *((S *)d);
t = fabs(t);
*((S *)d++) = t;
t = *((S *)d);
t = fabs(t);
*((S *)d++) = t;
t = *((S *)d);
t = fabs(t);
*((S *)d++) = t;
t = *((S *)d);
t = fabs(t);
*((S *)d++) = t;
t = *((S *)d);
t = fabs(t);
*((S *)d++) = t;
t = *((S *)d);
t = fabs(t);
*((S *)d++) = t;
t = *((S *)d);
t = fabs(t);
*((S *)d++) = t;
t = *((S *)d);
t = fabs(t);
*((S *)d++) = t;
t = *((S *)d);
t = fabs(t);
*((S *)d++) = t;
t = *((S *)d);
t = fabs(t);
*((S *)d++) = t;
t = *((S *)d);
t = fabs(t);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = fabs(t);
*((S *)d++) = t;
}
}

static void SmoSQRTS(B *df)
{
D t;
t = *((S *)NUM_VAL(df));
t = sqrt(t);
*((S *)NUM_VAL(df)) = t;
}

static void SmoSQRTA(B *df)
{
D t; S *d; L n;
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = sqrt(t);
*((S *)d++) = t;
t = *((S *)d);
t = sqrt(t);
*((S *)d++) = t;
t = *((S *)d);
t = sqrt(t);
*((S *)d++) = t;
t = *((S *)d);
t = sqrt(t);
*((S *)d++) = t;
t = *((S *)d);
t = sqrt(t);
*((S *)d++) = t;
t = *((S *)d);
t = sqrt(t);
*((S *)d++) = t;
t = *((S *)d);
t = sqrt(t);
*((S *)d++) = t;
t = *((S *)d);
t = sqrt(t);
*((S *)d++) = t;
t = *((S *)d);
t = sqrt(t);
*((S *)d++) = t;
t = *((S *)d);
t = sqrt(t);
*((S *)d++) = t;
t = *((S *)d);
t = sqrt(t);
*((S *)d++) = t;
t = *((S *)d);
t = sqrt(t);
*((S *)d++) = t;
t = *((S *)d);
t = sqrt(t);
*((S *)d++) = t;
t = *((S *)d);
t = sqrt(t);
*((S *)d++) = t;
t = *((S *)d);
t = sqrt(t);
*((S *)d++) = t;
t = *((S *)d);
t = sqrt(t);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = sqrt(t);
*((S *)d++) = t;
}
}

static void SmoEXPS(B *df)
{
D t;
t = *((S *)NUM_VAL(df));
t = exp(t);
*((S *)NUM_VAL(df)) = t;
}

static void SmoEXPA(B *df)
{
D t; S *d; L n;
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = exp(t);
*((S *)d++) = t;
t = *((S *)d);
t = exp(t);
*((S *)d++) = t;
t = *((S *)d);
t = exp(t);
*((S *)d++) = t;
t = *((S *)d);
t = exp(t);
*((S *)d++) = t;
t = *((S *)d);
t = exp(t);
*((S *)d++) = t;
t = *((S *)d);
t = exp(t);
*((S *)d++) = t;
t = *((S *)d);
t = exp(t);
*((S *)d++) = t;
t = *((S *)d);
t = exp(t);
*((S *)d++) = t;
t = *((S *)d);
t = exp(t);
*((S *)d++) = t;
t = *((S *)d);
t = exp(t);
*((S *)d++) = t;
t = *((S *)d);
t = exp(t);
*((S *)d++) = t;
t = *((S *)d);
t = exp(t);
*((S *)d++) = t;
t = *((S *)d);
t = exp(t);
*((S *)d++) = t;
t = *((S *)d);
t = exp(t);
*((S *)d++) = t;
t = *((S *)d);
t = exp(t);
*((S *)d++) = t;
t = *((S *)d);
t = exp(t);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = exp(t);
*((S *)d++) = t;
}
}

static void SmoLNS(B *df)
{
D t;
t = *((S *)NUM_VAL(df));
t = log(t);
*((S *)NUM_VAL(df)) = t;
}

static void SmoLNA(B *df)
{
D t; S *d; L n;
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = log(t);
*((S *)d++) = t;
t = *((S *)d);
t = log(t);
*((S *)d++) = t;
t = *((S *)d);
t = log(t);
*((S *)d++) = t;
t = *((S *)d);
t = log(t);
*((S *)d++) = t;
t = *((S *)d);
t = log(t);
*((S *)d++) = t;
t = *((S *)d);
t = log(t);
*((S *)d++) = t;
t = *((S *)d);
t = log(t);
*((S *)d++) = t;
t = *((S *)d);
t = log(t);
*((S *)d++) = t;
t = *((S *)d);
t = log(t);
*((S *)d++) = t;
t = *((S *)d);
t = log(t);
*((S *)d++) = t;
t = *((S *)d);
t = log(t);
*((S *)d++) = t;
t = *((S *)d);
t = log(t);
*((S *)d++) = t;
t = *((S *)d);
t = log(t);
*((S *)d++) = t;
t = *((S *)d);
t = log(t);
*((S *)d++) = t;
t = *((S *)d);
t = log(t);
*((S *)d++) = t;
t = *((S *)d);
t = log(t);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = log(t);
*((S *)d++) = t;
}
}

static void SmoLGS(B *df)
{
D t;
t = *((S *)NUM_VAL(df));
t = log10(t);
*((S *)NUM_VAL(df)) = t;
}

static void SmoLGA(B *df)
{
D t; S *d; L n;
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = log10(t);
*((S *)d++) = t;
t = *((S *)d);
t = log10(t);
*((S *)d++) = t;
t = *((S *)d);
t = log10(t);
*((S *)d++) = t;
t = *((S *)d);
t = log10(t);
*((S *)d++) = t;
t = *((S *)d);
t = log10(t);
*((S *)d++) = t;
t = *((S *)d);
t = log10(t);
*((S *)d++) = t;
t = *((S *)d);
t = log10(t);
*((S *)d++) = t;
t = *((S *)d);
t = log10(t);
*((S *)d++) = t;
t = *((S *)d);
t = log10(t);
*((S *)d++) = t;
t = *((S *)d);
t = log10(t);
*((S *)d++) = t;
t = *((S *)d);
t = log10(t);
*((S *)d++) = t;
t = *((S *)d);
t = log10(t);
*((S *)d++) = t;
t = *((S *)d);
t = log10(t);
*((S *)d++) = t;
t = *((S *)d);
t = log10(t);
*((S *)d++) = t;
t = *((S *)d);
t = log10(t);
*((S *)d++) = t;
t = *((S *)d);
t = log10(t);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = log10(t);
*((S *)d++) = t;
}
}

static void SmoFLOORS(B *df)
{
D t;
t = *((S *)NUM_VAL(df));
t = floor(t);
*((S *)NUM_VAL(df)) = t;
}

static void SmoFLOORA(B *df)
{
D t; S *d; L n;
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = floor(t);
*((S *)d++) = t;
t = *((S *)d);
t = floor(t);
*((S *)d++) = t;
t = *((S *)d);
t = floor(t);
*((S *)d++) = t;
t = *((S *)d);
t = floor(t);
*((S *)d++) = t;
t = *((S *)d);
t = floor(t);
*((S *)d++) = t;
t = *((S *)d);
t = floor(t);
*((S *)d++) = t;
t = *((S *)d);
t = floor(t);
*((S *)d++) = t;
t = *((S *)d);
t = floor(t);
*((S *)d++) = t;
t = *((S *)d);
t = floor(t);
*((S *)d++) = t;
t = *((S *)d);
t = floor(t);
*((S *)d++) = t;
t = *((S *)d);
t = floor(t);
*((S *)d++) = t;
t = *((S *)d);
t = floor(t);
*((S *)d++) = t;
t = *((S *)d);
t = floor(t);
*((S *)d++) = t;
t = *((S *)d);
t = floor(t);
*((S *)d++) = t;
t = *((S *)d);
t = floor(t);
*((S *)d++) = t;
t = *((S *)d);
t = floor(t);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = floor(t);
*((S *)d++) = t;
}
}

static void SmoCEILS(B *df)
{
D t;
t = *((S *)NUM_VAL(df));
t = ceil(t);
*((S *)NUM_VAL(df)) = t;
}

static void SmoCEILA(B *df)
{
D t; S *d; L n;
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = ceil(t);
*((S *)d++) = t;
t = *((S *)d);
t = ceil(t);
*((S *)d++) = t;
t = *((S *)d);
t = ceil(t);
*((S *)d++) = t;
t = *((S *)d);
t = ceil(t);
*((S *)d++) = t;
t = *((S *)d);
t = ceil(t);
*((S *)d++) = t;
t = *((S *)d);
t = ceil(t);
*((S *)d++) = t;
t = *((S *)d);
t = ceil(t);
*((S *)d++) = t;
t = *((S *)d);
t = ceil(t);
*((S *)d++) = t;
t = *((S *)d);
t = ceil(t);
*((S *)d++) = t;
t = *((S *)d);
t = ceil(t);
*((S *)d++) = t;
t = *((S *)d);
t = ceil(t);
*((S *)d++) = t;
t = *((S *)d);
t = ceil(t);
*((S *)d++) = t;
t = *((S *)d);
t = ceil(t);
*((S *)d++) = t;
t = *((S *)d);
t = ceil(t);
*((S *)d++) = t;
t = *((S *)d);
t = ceil(t);
*((S *)d++) = t;
t = *((S *)d);
t = ceil(t);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = ceil(t);
*((S *)d++) = t;
}
}

static void SmoSINS(B *df)
{
D t;
t = *((S *)NUM_VAL(df));
t = sin(t);
*((S *)NUM_VAL(df)) = t;
}

static void SmoSINA(B *df)
{
D t; S *d; L n;
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = sin(t);
*((S *)d++) = t;
t = *((S *)d);
t = sin(t);
*((S *)d++) = t;
t = *((S *)d);
t = sin(t);
*((S *)d++) = t;
t = *((S *)d);
t = sin(t);
*((S *)d++) = t;
t = *((S *)d);
t = sin(t);
*((S *)d++) = t;
t = *((S *)d);
t = sin(t);
*((S *)d++) = t;
t = *((S *)d);
t = sin(t);
*((S *)d++) = t;
t = *((S *)d);
t = sin(t);
*((S *)d++) = t;
t = *((S *)d);
t = sin(t);
*((S *)d++) = t;
t = *((S *)d);
t = sin(t);
*((S *)d++) = t;
t = *((S *)d);
t = sin(t);
*((S *)d++) = t;
t = *((S *)d);
t = sin(t);
*((S *)d++) = t;
t = *((S *)d);
t = sin(t);
*((S *)d++) = t;
t = *((S *)d);
t = sin(t);
*((S *)d++) = t;
t = *((S *)d);
t = sin(t);
*((S *)d++) = t;
t = *((S *)d);
t = sin(t);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = sin(t);
*((S *)d++) = t;
}
}

static void SmoCOSS(B *df)
{
D t;
t = *((S *)NUM_VAL(df));
t = cos(t);
*((S *)NUM_VAL(df)) = t;
}

static void SmoCOSA(B *df)
{
D t; S *d; L n;
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = cos(t);
*((S *)d++) = t;
t = *((S *)d);
t = cos(t);
*((S *)d++) = t;
t = *((S *)d);
t = cos(t);
*((S *)d++) = t;
t = *((S *)d);
t = cos(t);
*((S *)d++) = t;
t = *((S *)d);
t = cos(t);
*((S *)d++) = t;
t = *((S *)d);
t = cos(t);
*((S *)d++) = t;
t = *((S *)d);
t = cos(t);
*((S *)d++) = t;
t = *((S *)d);
t = cos(t);
*((S *)d++) = t;
t = *((S *)d);
t = cos(t);
*((S *)d++) = t;
t = *((S *)d);
t = cos(t);
*((S *)d++) = t;
t = *((S *)d);
t = cos(t);
*((S *)d++) = t;
t = *((S *)d);
t = cos(t);
*((S *)d++) = t;
t = *((S *)d);
t = cos(t);
*((S *)d++) = t;
t = *((S *)d);
t = cos(t);
*((S *)d++) = t;
t = *((S *)d);
t = cos(t);
*((S *)d++) = t;
t = *((S *)d);
t = cos(t);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = cos(t);
*((S *)d++) = t;
}
}

static void SmoTANS(B *df)
{
D t;
t = *((S *)NUM_VAL(df));
t = tan(t);
*((S *)NUM_VAL(df)) = t;
}

static void SmoTANA(B *df)
{
D t; S *d; L n;
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = tan(t);
*((S *)d++) = t;
t = *((S *)d);
t = tan(t);
*((S *)d++) = t;
t = *((S *)d);
t = tan(t);
*((S *)d++) = t;
t = *((S *)d);
t = tan(t);
*((S *)d++) = t;
t = *((S *)d);
t = tan(t);
*((S *)d++) = t;
t = *((S *)d);
t = tan(t);
*((S *)d++) = t;
t = *((S *)d);
t = tan(t);
*((S *)d++) = t;
t = *((S *)d);
t = tan(t);
*((S *)d++) = t;
t = *((S *)d);
t = tan(t);
*((S *)d++) = t;
t = *((S *)d);
t = tan(t);
*((S *)d++) = t;
t = *((S *)d);
t = tan(t);
*((S *)d++) = t;
t = *((S *)d);
t = tan(t);
*((S *)d++) = t;
t = *((S *)d);
t = tan(t);
*((S *)d++) = t;
t = *((S *)d);
t = tan(t);
*((S *)d++) = t;
t = *((S *)d);
t = tan(t);
*((S *)d++) = t;
t = *((S *)d);
t = tan(t);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = tan(t);
*((S *)d++) = t;
}
}

static void SmoASINS(B *df)
{
D t;
t = *((S *)NUM_VAL(df));
t = asin(t);
*((S *)NUM_VAL(df)) = t;
}

static void SmoASINA(B *df)
{
D t; S *d; L n;
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = asin(t);
*((S *)d++) = t;
t = *((S *)d);
t = asin(t);
*((S *)d++) = t;
t = *((S *)d);
t = asin(t);
*((S *)d++) = t;
t = *((S *)d);
t = asin(t);
*((S *)d++) = t;
t = *((S *)d);
t = asin(t);
*((S *)d++) = t;
t = *((S *)d);
t = asin(t);
*((S *)d++) = t;
t = *((S *)d);
t = asin(t);
*((S *)d++) = t;
t = *((S *)d);
t = asin(t);
*((S *)d++) = t;
t = *((S *)d);
t = asin(t);
*((S *)d++) = t;
t = *((S *)d);
t = asin(t);
*((S *)d++) = t;
t = *((S *)d);
t = asin(t);
*((S *)d++) = t;
t = *((S *)d);
t = asin(t);
*((S *)d++) = t;
t = *((S *)d);
t = asin(t);
*((S *)d++) = t;
t = *((S *)d);
t = asin(t);
*((S *)d++) = t;
t = *((S *)d);
t = asin(t);
*((S *)d++) = t;
t = *((S *)d);
t = asin(t);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = asin(t);
*((S *)d++) = t;
}
}

static void SmoACOSS(B *df)
{
D t;
t = *((S *)NUM_VAL(df));
t = acos(t);
*((S *)NUM_VAL(df)) = t;
}

static void SmoACOSA(B *df)
{
D t; S *d; L n;
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = acos(t);
*((S *)d++) = t;
t = *((S *)d);
t = acos(t);
*((S *)d++) = t;
t = *((S *)d);
t = acos(t);
*((S *)d++) = t;
t = *((S *)d);
t = acos(t);
*((S *)d++) = t;
t = *((S *)d);
t = acos(t);
*((S *)d++) = t;
t = *((S *)d);
t = acos(t);
*((S *)d++) = t;
t = *((S *)d);
t = acos(t);
*((S *)d++) = t;
t = *((S *)d);
t = acos(t);
*((S *)d++) = t;
t = *((S *)d);
t = acos(t);
*((S *)d++) = t;
t = *((S *)d);
t = acos(t);
*((S *)d++) = t;
t = *((S *)d);
t = acos(t);
*((S *)d++) = t;
t = *((S *)d);
t = acos(t);
*((S *)d++) = t;
t = *((S *)d);
t = acos(t);
*((S *)d++) = t;
t = *((S *)d);
t = acos(t);
*((S *)d++) = t;
t = *((S *)d);
t = acos(t);
*((S *)d++) = t;
t = *((S *)d);
t = acos(t);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = acos(t);
*((S *)d++) = t;
}
}

static void SmoATANS(B *df)
{
D t;
t = *((S *)NUM_VAL(df));
t = atan(t);
*((S *)NUM_VAL(df)) = t;
}

static void SmoATANA(B *df)
{
D t; S *d; L n;
d = (S *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((S *)d);
t = atan(t);
*((S *)d++) = t;
t = *((S *)d);
t = atan(t);
*((S *)d++) = t;
t = *((S *)d);
t = atan(t);
*((S *)d++) = t;
t = *((S *)d);
t = atan(t);
*((S *)d++) = t;
t = *((S *)d);
t = atan(t);
*((S *)d++) = t;
t = *((S *)d);
t = atan(t);
*((S *)d++) = t;
t = *((S *)d);
t = atan(t);
*((S *)d++) = t;
t = *((S *)d);
t = atan(t);
*((S *)d++) = t;
t = *((S *)d);
t = atan(t);
*((S *)d++) = t;
t = *((S *)d);
t = atan(t);
*((S *)d++) = t;
t = *((S *)d);
t = atan(t);
*((S *)d++) = t;
t = *((S *)d);
t = atan(t);
*((S *)d++) = t;
t = *((S *)d);
t = atan(t);
*((S *)d++) = t;
t = *((S *)d);
t = atan(t);
*((S *)d++) = t;
t = *((S *)d);
t = atan(t);
*((S *)d++) = t;
t = *((S *)d);
t = atan(t);
*((S *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((S *)d);
t = atan(t);
*((S *)d++) = t;
}
}

static void DmoNEGS(B *df)
{
D t;
t = *((D *)NUM_VAL(df));
t = -t;
*((D *)NUM_VAL(df)) = t;
}

static void DmoNEGA(B *df)
{
D t; D *d; L n;
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = -t;
*((D *)d++) = t;
t = *((D *)d);
t = -t;
*((D *)d++) = t;
t = *((D *)d);
t = -t;
*((D *)d++) = t;
t = *((D *)d);
t = -t;
*((D *)d++) = t;
t = *((D *)d);
t = -t;
*((D *)d++) = t;
t = *((D *)d);
t = -t;
*((D *)d++) = t;
t = *((D *)d);
t = -t;
*((D *)d++) = t;
t = *((D *)d);
t = -t;
*((D *)d++) = t;
t = *((D *)d);
t = -t;
*((D *)d++) = t;
t = *((D *)d);
t = -t;
*((D *)d++) = t;
t = *((D *)d);
t = -t;
*((D *)d++) = t;
t = *((D *)d);
t = -t;
*((D *)d++) = t;
t = *((D *)d);
t = -t;
*((D *)d++) = t;
t = *((D *)d);
t = -t;
*((D *)d++) = t;
t = *((D *)d);
t = -t;
*((D *)d++) = t;
t = *((D *)d);
t = -t;
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = -t;
*((D *)d++) = t;
}
}

static void DmoABSS(B *df)
{
D t;
t = *((D *)NUM_VAL(df));
t = fabs(t);
*((D *)NUM_VAL(df)) = t;
}

static void DmoABSA(B *df)
{
D t; D *d; L n;
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = fabs(t);
*((D *)d++) = t;
t = *((D *)d);
t = fabs(t);
*((D *)d++) = t;
t = *((D *)d);
t = fabs(t);
*((D *)d++) = t;
t = *((D *)d);
t = fabs(t);
*((D *)d++) = t;
t = *((D *)d);
t = fabs(t);
*((D *)d++) = t;
t = *((D *)d);
t = fabs(t);
*((D *)d++) = t;
t = *((D *)d);
t = fabs(t);
*((D *)d++) = t;
t = *((D *)d);
t = fabs(t);
*((D *)d++) = t;
t = *((D *)d);
t = fabs(t);
*((D *)d++) = t;
t = *((D *)d);
t = fabs(t);
*((D *)d++) = t;
t = *((D *)d);
t = fabs(t);
*((D *)d++) = t;
t = *((D *)d);
t = fabs(t);
*((D *)d++) = t;
t = *((D *)d);
t = fabs(t);
*((D *)d++) = t;
t = *((D *)d);
t = fabs(t);
*((D *)d++) = t;
t = *((D *)d);
t = fabs(t);
*((D *)d++) = t;
t = *((D *)d);
t = fabs(t);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = fabs(t);
*((D *)d++) = t;
}
}

static void DmoSQRTS(B *df)
{
D t;
t = *((D *)NUM_VAL(df));
t = sqrt(t);
*((D *)NUM_VAL(df)) = t;
}

static void DmoSQRTA(B *df)
{
D t; D *d; L n;
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = sqrt(t);
*((D *)d++) = t;
t = *((D *)d);
t = sqrt(t);
*((D *)d++) = t;
t = *((D *)d);
t = sqrt(t);
*((D *)d++) = t;
t = *((D *)d);
t = sqrt(t);
*((D *)d++) = t;
t = *((D *)d);
t = sqrt(t);
*((D *)d++) = t;
t = *((D *)d);
t = sqrt(t);
*((D *)d++) = t;
t = *((D *)d);
t = sqrt(t);
*((D *)d++) = t;
t = *((D *)d);
t = sqrt(t);
*((D *)d++) = t;
t = *((D *)d);
t = sqrt(t);
*((D *)d++) = t;
t = *((D *)d);
t = sqrt(t);
*((D *)d++) = t;
t = *((D *)d);
t = sqrt(t);
*((D *)d++) = t;
t = *((D *)d);
t = sqrt(t);
*((D *)d++) = t;
t = *((D *)d);
t = sqrt(t);
*((D *)d++) = t;
t = *((D *)d);
t = sqrt(t);
*((D *)d++) = t;
t = *((D *)d);
t = sqrt(t);
*((D *)d++) = t;
t = *((D *)d);
t = sqrt(t);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = sqrt(t);
*((D *)d++) = t;
}
}

static void DmoEXPS(B *df)
{
D t;
t = *((D *)NUM_VAL(df));
t = exp(t);
*((D *)NUM_VAL(df)) = t;
}

static void DmoEXPA(B *df)
{
D t; D *d; L n;
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = exp(t);
*((D *)d++) = t;
t = *((D *)d);
t = exp(t);
*((D *)d++) = t;
t = *((D *)d);
t = exp(t);
*((D *)d++) = t;
t = *((D *)d);
t = exp(t);
*((D *)d++) = t;
t = *((D *)d);
t = exp(t);
*((D *)d++) = t;
t = *((D *)d);
t = exp(t);
*((D *)d++) = t;
t = *((D *)d);
t = exp(t);
*((D *)d++) = t;
t = *((D *)d);
t = exp(t);
*((D *)d++) = t;
t = *((D *)d);
t = exp(t);
*((D *)d++) = t;
t = *((D *)d);
t = exp(t);
*((D *)d++) = t;
t = *((D *)d);
t = exp(t);
*((D *)d++) = t;
t = *((D *)d);
t = exp(t);
*((D *)d++) = t;
t = *((D *)d);
t = exp(t);
*((D *)d++) = t;
t = *((D *)d);
t = exp(t);
*((D *)d++) = t;
t = *((D *)d);
t = exp(t);
*((D *)d++) = t;
t = *((D *)d);
t = exp(t);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = exp(t);
*((D *)d++) = t;
}
}

static void DmoLNS(B *df)
{
D t;
t = *((D *)NUM_VAL(df));
t = log(t);
*((D *)NUM_VAL(df)) = t;
}

static void DmoLNA(B *df)
{
D t; D *d; L n;
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = log(t);
*((D *)d++) = t;
t = *((D *)d);
t = log(t);
*((D *)d++) = t;
t = *((D *)d);
t = log(t);
*((D *)d++) = t;
t = *((D *)d);
t = log(t);
*((D *)d++) = t;
t = *((D *)d);
t = log(t);
*((D *)d++) = t;
t = *((D *)d);
t = log(t);
*((D *)d++) = t;
t = *((D *)d);
t = log(t);
*((D *)d++) = t;
t = *((D *)d);
t = log(t);
*((D *)d++) = t;
t = *((D *)d);
t = log(t);
*((D *)d++) = t;
t = *((D *)d);
t = log(t);
*((D *)d++) = t;
t = *((D *)d);
t = log(t);
*((D *)d++) = t;
t = *((D *)d);
t = log(t);
*((D *)d++) = t;
t = *((D *)d);
t = log(t);
*((D *)d++) = t;
t = *((D *)d);
t = log(t);
*((D *)d++) = t;
t = *((D *)d);
t = log(t);
*((D *)d++) = t;
t = *((D *)d);
t = log(t);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = log(t);
*((D *)d++) = t;
}
}

static void DmoLGS(B *df)
{
D t;
t = *((D *)NUM_VAL(df));
t = log10(t);
*((D *)NUM_VAL(df)) = t;
}

static void DmoLGA(B *df)
{
D t; D *d; L n;
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = log10(t);
*((D *)d++) = t;
t = *((D *)d);
t = log10(t);
*((D *)d++) = t;
t = *((D *)d);
t = log10(t);
*((D *)d++) = t;
t = *((D *)d);
t = log10(t);
*((D *)d++) = t;
t = *((D *)d);
t = log10(t);
*((D *)d++) = t;
t = *((D *)d);
t = log10(t);
*((D *)d++) = t;
t = *((D *)d);
t = log10(t);
*((D *)d++) = t;
t = *((D *)d);
t = log10(t);
*((D *)d++) = t;
t = *((D *)d);
t = log10(t);
*((D *)d++) = t;
t = *((D *)d);
t = log10(t);
*((D *)d++) = t;
t = *((D *)d);
t = log10(t);
*((D *)d++) = t;
t = *((D *)d);
t = log10(t);
*((D *)d++) = t;
t = *((D *)d);
t = log10(t);
*((D *)d++) = t;
t = *((D *)d);
t = log10(t);
*((D *)d++) = t;
t = *((D *)d);
t = log10(t);
*((D *)d++) = t;
t = *((D *)d);
t = log10(t);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = log10(t);
*((D *)d++) = t;
}
}

static void DmoFLOORS(B *df)
{
D t;
t = *((D *)NUM_VAL(df));
t = floor(t);
*((D *)NUM_VAL(df)) = t;
}

static void DmoFLOORA(B *df)
{
D t; D *d; L n;
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = floor(t);
*((D *)d++) = t;
t = *((D *)d);
t = floor(t);
*((D *)d++) = t;
t = *((D *)d);
t = floor(t);
*((D *)d++) = t;
t = *((D *)d);
t = floor(t);
*((D *)d++) = t;
t = *((D *)d);
t = floor(t);
*((D *)d++) = t;
t = *((D *)d);
t = floor(t);
*((D *)d++) = t;
t = *((D *)d);
t = floor(t);
*((D *)d++) = t;
t = *((D *)d);
t = floor(t);
*((D *)d++) = t;
t = *((D *)d);
t = floor(t);
*((D *)d++) = t;
t = *((D *)d);
t = floor(t);
*((D *)d++) = t;
t = *((D *)d);
t = floor(t);
*((D *)d++) = t;
t = *((D *)d);
t = floor(t);
*((D *)d++) = t;
t = *((D *)d);
t = floor(t);
*((D *)d++) = t;
t = *((D *)d);
t = floor(t);
*((D *)d++) = t;
t = *((D *)d);
t = floor(t);
*((D *)d++) = t;
t = *((D *)d);
t = floor(t);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = floor(t);
*((D *)d++) = t;
}
}

static void DmoCEILS(B *df)
{
D t;
t = *((D *)NUM_VAL(df));
t = ceil(t);
*((D *)NUM_VAL(df)) = t;
}

static void DmoCEILA(B *df)
{
D t; D *d; L n;
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = ceil(t);
*((D *)d++) = t;
t = *((D *)d);
t = ceil(t);
*((D *)d++) = t;
t = *((D *)d);
t = ceil(t);
*((D *)d++) = t;
t = *((D *)d);
t = ceil(t);
*((D *)d++) = t;
t = *((D *)d);
t = ceil(t);
*((D *)d++) = t;
t = *((D *)d);
t = ceil(t);
*((D *)d++) = t;
t = *((D *)d);
t = ceil(t);
*((D *)d++) = t;
t = *((D *)d);
t = ceil(t);
*((D *)d++) = t;
t = *((D *)d);
t = ceil(t);
*((D *)d++) = t;
t = *((D *)d);
t = ceil(t);
*((D *)d++) = t;
t = *((D *)d);
t = ceil(t);
*((D *)d++) = t;
t = *((D *)d);
t = ceil(t);
*((D *)d++) = t;
t = *((D *)d);
t = ceil(t);
*((D *)d++) = t;
t = *((D *)d);
t = ceil(t);
*((D *)d++) = t;
t = *((D *)d);
t = ceil(t);
*((D *)d++) = t;
t = *((D *)d);
t = ceil(t);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = ceil(t);
*((D *)d++) = t;
}
}

static void DmoSINS(B *df)
{
D t;
t = *((D *)NUM_VAL(df));
t = sin(t);
*((D *)NUM_VAL(df)) = t;
}

static void DmoSINA(B *df)
{
D t; D *d; L n;
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = sin(t);
*((D *)d++) = t;
t = *((D *)d);
t = sin(t);
*((D *)d++) = t;
t = *((D *)d);
t = sin(t);
*((D *)d++) = t;
t = *((D *)d);
t = sin(t);
*((D *)d++) = t;
t = *((D *)d);
t = sin(t);
*((D *)d++) = t;
t = *((D *)d);
t = sin(t);
*((D *)d++) = t;
t = *((D *)d);
t = sin(t);
*((D *)d++) = t;
t = *((D *)d);
t = sin(t);
*((D *)d++) = t;
t = *((D *)d);
t = sin(t);
*((D *)d++) = t;
t = *((D *)d);
t = sin(t);
*((D *)d++) = t;
t = *((D *)d);
t = sin(t);
*((D *)d++) = t;
t = *((D *)d);
t = sin(t);
*((D *)d++) = t;
t = *((D *)d);
t = sin(t);
*((D *)d++) = t;
t = *((D *)d);
t = sin(t);
*((D *)d++) = t;
t = *((D *)d);
t = sin(t);
*((D *)d++) = t;
t = *((D *)d);
t = sin(t);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = sin(t);
*((D *)d++) = t;
}
}

static void DmoCOSS(B *df)
{
D t;
t = *((D *)NUM_VAL(df));
t = cos(t);
*((D *)NUM_VAL(df)) = t;
}

static void DmoCOSA(B *df)
{
D t; D *d; L n;
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = cos(t);
*((D *)d++) = t;
t = *((D *)d);
t = cos(t);
*((D *)d++) = t;
t = *((D *)d);
t = cos(t);
*((D *)d++) = t;
t = *((D *)d);
t = cos(t);
*((D *)d++) = t;
t = *((D *)d);
t = cos(t);
*((D *)d++) = t;
t = *((D *)d);
t = cos(t);
*((D *)d++) = t;
t = *((D *)d);
t = cos(t);
*((D *)d++) = t;
t = *((D *)d);
t = cos(t);
*((D *)d++) = t;
t = *((D *)d);
t = cos(t);
*((D *)d++) = t;
t = *((D *)d);
t = cos(t);
*((D *)d++) = t;
t = *((D *)d);
t = cos(t);
*((D *)d++) = t;
t = *((D *)d);
t = cos(t);
*((D *)d++) = t;
t = *((D *)d);
t = cos(t);
*((D *)d++) = t;
t = *((D *)d);
t = cos(t);
*((D *)d++) = t;
t = *((D *)d);
t = cos(t);
*((D *)d++) = t;
t = *((D *)d);
t = cos(t);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = cos(t);
*((D *)d++) = t;
}
}

static void DmoTANS(B *df)
{
D t;
t = *((D *)NUM_VAL(df));
t = tan(t);
*((D *)NUM_VAL(df)) = t;
}

static void DmoTANA(B *df)
{
D t; D *d; L n;
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = tan(t);
*((D *)d++) = t;
t = *((D *)d);
t = tan(t);
*((D *)d++) = t;
t = *((D *)d);
t = tan(t);
*((D *)d++) = t;
t = *((D *)d);
t = tan(t);
*((D *)d++) = t;
t = *((D *)d);
t = tan(t);
*((D *)d++) = t;
t = *((D *)d);
t = tan(t);
*((D *)d++) = t;
t = *((D *)d);
t = tan(t);
*((D *)d++) = t;
t = *((D *)d);
t = tan(t);
*((D *)d++) = t;
t = *((D *)d);
t = tan(t);
*((D *)d++) = t;
t = *((D *)d);
t = tan(t);
*((D *)d++) = t;
t = *((D *)d);
t = tan(t);
*((D *)d++) = t;
t = *((D *)d);
t = tan(t);
*((D *)d++) = t;
t = *((D *)d);
t = tan(t);
*((D *)d++) = t;
t = *((D *)d);
t = tan(t);
*((D *)d++) = t;
t = *((D *)d);
t = tan(t);
*((D *)d++) = t;
t = *((D *)d);
t = tan(t);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = tan(t);
*((D *)d++) = t;
}
}

static void DmoASINS(B *df)
{
D t;
t = *((D *)NUM_VAL(df));
t = asin(t);
*((D *)NUM_VAL(df)) = t;
}

static void DmoASINA(B *df)
{
D t; D *d; L n;
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = asin(t);
*((D *)d++) = t;
t = *((D *)d);
t = asin(t);
*((D *)d++) = t;
t = *((D *)d);
t = asin(t);
*((D *)d++) = t;
t = *((D *)d);
t = asin(t);
*((D *)d++) = t;
t = *((D *)d);
t = asin(t);
*((D *)d++) = t;
t = *((D *)d);
t = asin(t);
*((D *)d++) = t;
t = *((D *)d);
t = asin(t);
*((D *)d++) = t;
t = *((D *)d);
t = asin(t);
*((D *)d++) = t;
t = *((D *)d);
t = asin(t);
*((D *)d++) = t;
t = *((D *)d);
t = asin(t);
*((D *)d++) = t;
t = *((D *)d);
t = asin(t);
*((D *)d++) = t;
t = *((D *)d);
t = asin(t);
*((D *)d++) = t;
t = *((D *)d);
t = asin(t);
*((D *)d++) = t;
t = *((D *)d);
t = asin(t);
*((D *)d++) = t;
t = *((D *)d);
t = asin(t);
*((D *)d++) = t;
t = *((D *)d);
t = asin(t);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = asin(t);
*((D *)d++) = t;
}
}

static void DmoACOSS(B *df)
{
D t;
t = *((D *)NUM_VAL(df));
t = acos(t);
*((D *)NUM_VAL(df)) = t;
}

static void DmoACOSA(B *df)
{
D t; D *d; L n;
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = acos(t);
*((D *)d++) = t;
t = *((D *)d);
t = acos(t);
*((D *)d++) = t;
t = *((D *)d);
t = acos(t);
*((D *)d++) = t;
t = *((D *)d);
t = acos(t);
*((D *)d++) = t;
t = *((D *)d);
t = acos(t);
*((D *)d++) = t;
t = *((D *)d);
t = acos(t);
*((D *)d++) = t;
t = *((D *)d);
t = acos(t);
*((D *)d++) = t;
t = *((D *)d);
t = acos(t);
*((D *)d++) = t;
t = *((D *)d);
t = acos(t);
*((D *)d++) = t;
t = *((D *)d);
t = acos(t);
*((D *)d++) = t;
t = *((D *)d);
t = acos(t);
*((D *)d++) = t;
t = *((D *)d);
t = acos(t);
*((D *)d++) = t;
t = *((D *)d);
t = acos(t);
*((D *)d++) = t;
t = *((D *)d);
t = acos(t);
*((D *)d++) = t;
t = *((D *)d);
t = acos(t);
*((D *)d++) = t;
t = *((D *)d);
t = acos(t);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = acos(t);
*((D *)d++) = t;
}
}

static void DmoATANS(B *df)
{
D t;
t = *((D *)NUM_VAL(df));
t = atan(t);
*((D *)NUM_VAL(df)) = t;
}

static void DmoATANA(B *df)
{
D t; D *d; L n;
d = (D *)VALUE_BASE(df);
for (n = (ARRAY_SIZE(df)>>4); n>0; n--) {
t = *((D *)d);
t = atan(t);
*((D *)d++) = t;
t = *((D *)d);
t = atan(t);
*((D *)d++) = t;
t = *((D *)d);
t = atan(t);
*((D *)d++) = t;
t = *((D *)d);
t = atan(t);
*((D *)d++) = t;
t = *((D *)d);
t = atan(t);
*((D *)d++) = t;
t = *((D *)d);
t = atan(t);
*((D *)d++) = t;
t = *((D *)d);
t = atan(t);
*((D *)d++) = t;
t = *((D *)d);
t = atan(t);
*((D *)d++) = t;
t = *((D *)d);
t = atan(t);
*((D *)d++) = t;
t = *((D *)d);
t = atan(t);
*((D *)d++) = t;
t = *((D *)d);
t = atan(t);
*((D *)d++) = t;
t = *((D *)d);
t = atan(t);
*((D *)d++) = t;
t = *((D *)d);
t = atan(t);
*((D *)d++) = t;
t = *((D *)d);
t = atan(t);
*((D *)d++) = t;
t = *((D *)d);
t = atan(t);
*((D *)d++) = t;
t = *((D *)d);
t = atan(t);
*((D *)d++) = t;
}
for (n = (ARRAY_SIZE(df)&15); n>0; n--) {
t = *((D *)d);
t = atan(t);
*((D *)d++) = t;
}
}

typedef void (*monadic_fct)(B*);
static monadic_fct NEGlist[] = {
BmoNEGS, BmoNEGA, 
WmoNEGS, WmoNEGA, 
LmoNEGS, LmoNEGA, 
SmoNEGS, SmoNEGA, 
DmoNEGS, DmoNEGA, 

};
static monadic_fct ABSlist[] = {
BmoABSS, BmoABSA, 
WmoABSS, WmoABSA, 
LmoABSS, LmoABSA, 
SmoABSS, SmoABSA, 
DmoABSS, DmoABSA, 

};
static monadic_fct SQRTlist[] = {
BmoSQRTS, BmoSQRTA, 
WmoSQRTS, WmoSQRTA, 
LmoSQRTS, LmoSQRTA, 
SmoSQRTS, SmoSQRTA, 
DmoSQRTS, DmoSQRTA, 

};
static monadic_fct EXPlist[] = {
BmoEXPS, BmoEXPA, 
WmoEXPS, WmoEXPA, 
LmoEXPS, LmoEXPA, 
SmoEXPS, SmoEXPA, 
DmoEXPS, DmoEXPA, 

};
static monadic_fct LNlist[] = {
BmoLNS, BmoLNA, 
WmoLNS, WmoLNA, 
LmoLNS, LmoLNA, 
SmoLNS, SmoLNA, 
DmoLNS, DmoLNA, 

};
static monadic_fct LGlist[] = {
BmoLGS, BmoLGA, 
WmoLGS, WmoLGA, 
LmoLGS, LmoLGA, 
SmoLGS, SmoLGA, 
DmoLGS, DmoLGA, 

};
static monadic_fct FLOORlist[] = {
BmoFLOORS, BmoFLOORA, 
WmoFLOORS, WmoFLOORA, 
LmoFLOORS, LmoFLOORA, 
SmoFLOORS, SmoFLOORA, 
DmoFLOORS, DmoFLOORA, 

};
static monadic_fct CEILlist[] = {
BmoCEILS, BmoCEILA, 
WmoCEILS, WmoCEILA, 
LmoCEILS, LmoCEILA, 
SmoCEILS, SmoCEILA, 
DmoCEILS, DmoCEILA, 

};
static monadic_fct SINlist[] = {
BmoSINS, BmoSINA, 
WmoSINS, WmoSINA, 
LmoSINS, LmoSINA, 
SmoSINS, SmoSINA, 
DmoSINS, DmoSINA, 

};
static monadic_fct COSlist[] = {
BmoCOSS, BmoCOSA, 
WmoCOSS, WmoCOSA, 
LmoCOSS, LmoCOSA, 
SmoCOSS, SmoCOSA, 
DmoCOSS, DmoCOSA, 

};
static monadic_fct TANlist[] = {
BmoTANS, BmoTANA, 
WmoTANS, WmoTANA, 
LmoTANS, LmoTANA, 
SmoTANS, SmoTANA, 
DmoTANS, DmoTANA, 

};
static monadic_fct ASINlist[] = {
BmoASINS, BmoASINA, 
WmoASINS, WmoASINA, 
LmoASINS, LmoASINA, 
SmoASINS, SmoASINA, 
DmoASINS, DmoASINA, 

};
static monadic_fct ACOSlist[] = {
BmoACOSS, BmoACOSA, 
WmoACOSS, WmoACOSA, 
LmoACOSS, LmoACOSA, 
SmoACOSS, SmoACOSA, 
DmoACOSS, DmoACOSA, 

};
static monadic_fct ATANlist[] = {
BmoATANS, BmoATANA, 
WmoATANS, WmoATANA, 
LmoATANS, LmoATANA, 
SmoATANS, SmoATANA, 
DmoATANS, DmoATANA, 

};
static void Bdecr(B *df)
{
D t;
if ((t = *((B *)NUM_VAL(df))) == BINF) t = DINF;
t -= 1.0;
*((B *)NUM_VAL(df)) = (((t) > BMAX) || ((-t) < -BMAX) || (t == DINF))? BINF : t;
}

static void Wdecr(B *df)
{
D t;
if ((t = *((W *)NUM_VAL(df))) == WINF) t = DINF;
t -= 1.0;
*((W *)NUM_VAL(df)) = (((t) > WMAX) || ((-t) < -WMAX) || (t == DINF))? WINF : t;
}

static void Ldecr(B *df)
{
D t;
if ((t = *((L *)NUM_VAL(df))) == LINF) t = DINF;
t -= 1.0;
*((L *)NUM_VAL(df)) = (((t) > LMAX) || ((-t) < -LMAX) || (t == DINF))? LINF : t;
}

static void Sdecr(B *df)
{
D t;
t = *((S *)NUM_VAL(df));
t -= 1.0;
*((S *)NUM_VAL(df)) = t;
}

static void Ddecr(B *df)
{
D t;
t = *((D *)NUM_VAL(df));
t -= 1.0;
*((D *)NUM_VAL(df)) = t;
}

typedef void (*DECR_fct)(B*);
static DECR_fct DECRlist[] = {
Bdecr, Wdecr, Ldecr, Sdecr, Ddecr, 
};
