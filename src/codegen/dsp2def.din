| -*- mode: d; -*-
| Copyright 2011 Alexander Peyser & Wolfgang Nonner
|
| This file is part of Deuterostome.
|
| This program is free software: you can redistribute it and/or modify
| it under the terms of the GNU General Public License as published by
| the Free Software Foundation, either version 2 of the License, or
| (at your option) any later version.
|
| This program is distributed in the hope that it will be useful,
| but WITHOUT ANY WARRANTY; without even the implied warranty of
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
| GNU General Public License for more details.
|
| You should have received a copy of the GNU General Public License
| along with this program.  If not, see <http://www.gnu.org/licenses/>.

/dsp2def module 100 dict dup begin

/ROLLBITS @ROLLBITS@ def
/UNROLLS 1 ROLLBITS bitshift def

/all { /filename name /dirname name
  1024 100 mul /b array 0
(// Automatically generated by src/codegen/dsp2def.din
// DO NOT EDIT HERE!

#ifndef DSP2DEF_H
#define DSP2DEF_h

) fax (
#define MATMUL_INNER\(cols, ap, bp, cp\) do { \\
  UP k_;\\
  UP k = 0;\\
  D sum = 0;\\
  for \(k_ = cols >> ) fax * ROLLBITS * number (; k_; k_--\) {) fax
  UNROLLS {(\\
    sum += ap[i][k] * bp[k][j]; k++;) fax
  } repeat (\\
  }\\
  for \(k_ = \(cols & ) fax * UNROLLS 1 sub * number (\); k_; k_--\) {\\
    sum += ap[i][k] * bp[k][j]; k++;\\
  }\\
  cp[i][j] = sum;\\
} while \(0\)
) fax (
#define MATTRANSPOSE_INNER\(cols, ap, bp\) do { \\
  UP j_;\\
  UP j = 0;\\
  for \(j_ = cols >> ) fax * ROLLBITS * number (; j_; j_--\) {) fax
  UNROLLS {(\\
    bp[j][i] = ap[i][j]; j++;) fax
  } repeat (\\
  }\\
  for \(j_ = \(cols & ) fax * UNROLLS 1 sub * number (\); j_; j_--\) {\\
    bp[j][i] = ap[i][j]; j++;\\
  }\\
} while \(0\)
) fax (
#define MATVECMUL_INNER\(cols, ap, bp, cp\) do { \\
  UP k_;\\
  UP k = 0;\\
  D sum = 0;\\
  for \(k_ = cols >> ) fax * ROLLBITS * number (; k_; k_--\) {) fax
  UNROLLS {(\\
    sum += ap[i][k] * bp[k]; k++;) fax
  } repeat (\\
  }\\
  for \(k_ = \(cols & ) fax * UNROLLS 1 sub * number (\); k_; k_--\) {\\
    sum += ap[i][k] * bp[k]; k++;\\
  }\\
  cp[i] = sum;\\
} while \(0\)
) fax (
#endif //DSP2DEF_H
) fax  
  0 exch getinterval dirname filename writefile
} bind def

end _module
