#line 2 "@srcdir@/dqueen.c.in"

#include <signal.h>
#include <sys/wait.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <fcntl.h>
#include <errno.h>
#include <unistd.h>
#include <stdlib.h>
#include <mpi.h>
#include <string.h>

#include "dm.h"
#include "error-local.h"
#include "dm3.h"
#include "dm-nextevent.h"
#include "dm2.h"
#include "dqueen.h"
#include "dm-vm.h"
#include "dm-signals.h"

#define SOCKET_TIMEOUT (60)

#if HAVE_PTHREAD
#define dmqueen_sigmask pthread_sigmask
#else
#defime dmqueen_sigmask sigprocmask
#endif

DM_INLINE_STATIC void setalarm(int secs) {
  sigset_t alm;
  sigemptyset(&alm);
  sigaddset(&alm, SIGALRM);
  
  dmqueen_sigmask(SIG_BLOCK, &alm, NULL);
  timeout = FALSE;
  alarm(secs);
  dmqueen_sigmask(SIG_UNBLOCK, &alm, NULL);
}

static UL32 mpin = 0;
static P socketfd = -1;
static P sigfd = -1;
static pid_t pid = -1;
static P dest;

static P wrap_writebox(B* buffer, P size) {
  VALUE_BASE(buffer) = (dest == PINF) ? PINF : dest+1;
  return writefd(socketfd, buffer, size, SOCKET_TIMEOUT);
}

static P wrap_writebody(B* buffer, P size) {
  return writefd(socketfd, buffer, size, SOCKET_TIMEOUT);
}

static P torsocket(B* rootf) {
  return tosource(rootf, TRUE, wrap_writebox, wrap_writebody);
}

// sig | --
P op_rsendsig(void) {
  B sig;
  P sig_;
  
  if (socketfd == -1) return RTHREADS_UNSET;
  if (o_1 < FLOORopds) return OPDS_UNF;
  if (CLASS(o_1) != NUM) return OPD_CLA;
  if (! PVALUE(o_1, &sig_)) return UNDF_VAL;
  if (sig_ < 0 || sig_ >= 256) return RNG_CHK;
  
  sig = (B) sig_;
  while (send(sigfd, &sig, 1, 0) == -1) {
    if (errno != EINTR) return -errno;
    if (abortflag) return ABORT;
  };

  FREEopds = o_1;
  return OK;
}

// n active/(string) | --
P op_rsend(void) {
  static B rootf[FRAMEBYTES];
  P retc;

  if (socketfd == -1) return RTHREADS_UNSET;
  if (o_2 < FLOORopds) return OPDS_UNF;
  if (CLASS(o_2) != NUM) return OPD_CLA;
  if (PVALUE(o_2, &dest) && (dest < 0 || dest >= mpin)) return RNG_CHK;

  switch (CLASS(o_1)) {
    case ARRAY:
      if (TYPE(o_1) == BYTETYPE) {
	if (dest != -1) return RNG_CHK;
	dest = PINF;
	ATTR(o_1) |= ACTIVE;
      }
      // fall through intentional
    case DICT: case LIST: case NULLOBJ: case NUM: case NAME: case OP:
    case BOOL:
      moveframe(o_1, rootf);
      break;
      
    default:
      return OPD_CLA;
  }

  if (! (ATTR(rootf) & ACTIVE)) return OPD_ATR;
  
  if ((retc = torsocket(rootf)))
    return makesocketdead(retc, socketfd, "rsend");

  FREEopds = o_2;
  return OK;
}

/////////////////////////// rthreads
// -- | n
// returns the number of created threads (0...)
// Does not check whether the threads are actually
//   alive - for that call checkrthreads.
P op_rthreads(void) {
  if (o1 >= CEILopds) return OPDS_OVF;
  TAG(o1) = (NUM | LONGBIGTYPE);
  ATTR(o1) = 0;
  LONGBIG_VAL(o1) = mpin;
  FREEopds = o2;

  return OK;
}


///////////////////////////// checkrthreads
// -- | bool
// returns true if the mpi threads are active.
// This is true if makerthreads has been called with n>0
//   and the rook thread has not died.
// If the rook has died, resets the state of threads to uninitialized
//   (0 rthreads available)
P op_checkrthreads(void) {
  BOOLEAN r = FALSE;
  if (o1 >= CEILopds) return OPDS_OVF;
  if (mpin) {
    pid_t pid_ = waitpid(pid, NULL, WNOHANG);
    if (! pid_) r = TRUE;
    else {
      if (pid_ == -1) return -errno;
      pid = -1;
      mpin = 0;
    }
  }

  TAG(o1) = BOOL;
  ATTR(o1) = 0;
  BOOL_VAL(o1) = r;
  FREEopds = o2;
  return OK;
}

P killrthreads(void) {
  P r = OK;

  if (socketfd != -1) {
    if (close(socketfd)) r = -errno;
    delsocket(socketfd);
    socketfd = -1;
  }

  if (sigfd != -1) {
    B sig = SIGMAP_QUIT;
    send(sigfd, &sig, 1, 0);
    sleep(5);
    sig = SIGMAP_KILL;
    send(sigfd, &sig, 1, 0);
    if (close(sigfd) && ! r) r = -errno;
    sigfd = -1;
  }

  if (pid != -1) {
    if (kill(pid, SIGTERM)) {
      if (! r) r = -errno;
      kill(pid, SIGKILL);
    }

    setalarm(10);
    while (waitpid(pid, NULL, 0) == -1 && ! timeout) {
      if (errno != EINTR) {
	if (! r) r = -errno;
	kill(pid, SIGKILL);
	break;
      };
    };

    if (timeout) {
      kill(pid, SIGKILL);
      if (! r) r = TIMER;
    }

    pid = -1;
  }

  mpin = 0;
  return r;
}

static void killrthreads_exit(void) {
  killrthreads();
}

void rthreads_init(void) {
  if (atexit(killrthreads_exit)) 
    error(1, errno, "Unable to add rthread exit handler");
}

///////////////////// makerthreads
// [n1 dict1 n2 dict2..] | socket
//  null  | --
//
// Kills any current threads, then creates n mpi threads.
// If null is passed, just kills current threads.
// If [dict..], return a socket to broadcast to threads,
//  where each dict defines an MPI_Info for one thread
// registers the socket as a listener for next-event.
P op_makerthreads(void) {
  UL32 mpin_, ok;
  int sockets[2];
  int sigs[2];
  int rookfd;
  int rooksigfd;
  P retc = OK;

  if (o_1 < FLOORopds) return OPDS_UNF;
  if ((retc = killrthreads())) return retc;
  
  switch (TAG(o_1)) {
    case NULLOBJ:
      FREEopds = o_1;
      return OK;
    case LIST: break;
    default: return OPD_CLA;
  };
  if (ATTR(o_1) & ACTIVE) return OPD_ATR;

  do {
    B* oldfreevm = FREEvm;
    static B dlistf[FRAMEBYTES];
    B* dlist;
    P frames = (LIST_CEIL_PTR(o_1)-VALUE_PTR(o_1))/FRAMEBYTES;

    if (! frames || (frames % 2)) return RNG_CHK;
    mpin_ = 0;
    
    for (dlist = VALUE_PTR(o_1);
	 dlist < LIST_CEIL_PTR(o_1); 
	 dlist += 2*FRAMEBYTES) {
      B* e;
      B* dict;
      P n;
      if (CLASS(dlist) != NUM) return RTHREADS_NUMTYPE;
      if (! PVALUE(dlist, &n)) return RTHREADS_NUMUNDF;
      if (n <= 0 || n >= L32MAX) return RTHREADS_NUMRNG;
      mpin_ += n;
      
      if (TAG(dlist+FRAMEBYTES) != DICT) return RTHREADS_DICTTYPE;
      dict = VALUE_PTR(dlist+FRAMEBYTES);
      for (e = (B*)DICT_ENTRIES(dict); 
	   e < (B*)DICT_FREE(dict); 
	   e += ENTRYBYTES) {
	static B name[NAMEBYTES+1];
	B* namef = ASSOC_NAME(e);
	B* valf = ASSOC_FRAME(e);
	if (TAG(valf) != (ARRAY|BYTETYPE)) return RTHREADS_VALTYPE;
	if (ATTR(valf) & ACTIVE) return RTHREADS_VALATR;
	if (ARRAY_SIZE(valf) >= MPI_MAX_INFO_VAL) return RTHREADS_VALSIZE;
	if (! ARRAY_SIZE(valf)) return RTHREADS_VALEMPTY;
	pullname(namef, name);
	if (strlen(name) >= MPI_MAX_INFO_KEY) return RTHREADS_KEYSIZE;
      }
    }

    TAG(FREEvm) = BOX;
    ATTR(FREEvm) = 0;
    VALUE_PTR(FREEvm) = NULL;
    FREEvm += FRAMEBYTES;
    moveframe(o_1, dlistf);
    if ((retc = foldobj(dlistf))) {
      FREEvm = oldfreevm;
      return retc;
    }
    BOX_NB(oldfreevm) = FREEvm - oldfreevm - FRAMEBYTES*2;
    FREEvm = oldfreevm;
  } while (0);

  if (socketpair(AF_UNIX, SOCK_STREAM, 0, sockets))
    return -errno;

  if (socketpair(AF_UNIX, SOCK_DGRAM, 0, sigs)) {
    int errno_ = errno;
    close(sockets[0]);
    close(sockets[1]);
    killrthreads();
    return -errno_;
  }    

  if ((retc = dm_setsockopts(sockets[0], PACKET_SIZE))
      || (retc = dm_setsockopts(sockets[1], PACKET_SIZE))
      || (retc = dm_setsockopts(sigs[0], 1))
      || (retc = dm_setsockopts(sigs[1], 1))) {
    close(sockets[0]);
    close(sockets[1]);
    close(sigs[0]);
    close(sigs[1]);
    return retc;
  }

  socketfd = sockets[0];
  rookfd = sockets[1];
  if ((retc = closeonexec(socketfd)) || (retc = closeonexec(rookfd))) {
    close(rookfd);
    close(sigs[0]);
    close(sigs[1]);
    killrthreads();
    return retc;
  }

  sigfd = sigs[0];
  rooksigfd = sigs[1];
  if ((retc = closeonexec(sigfd)) || (retc = closeonexec(rooksigfd))) {
    close(rookfd);
    close(rooksigfd);
    killrthreads();
    return retc;
  }

  if ((pid = fork()) == -1) {
    retc = -errno;
    close(rookfd);
    close(rooksigfd);
    killrthreads();
    return retc;
  }

  if (! pid) {
    int stdin;
    if (dup2(rookfd, 3) == -1)
      error(1, errno, "Error duping %i to %i", (int) rookfd, 3);
    if ((retc = nocloseonexec(3)))
      error(1, -retc, "Error setting no close on exec for fd 3");
    if (dup2(rooksigfd, 4) == -1)
      error(1, errno, "Error duping %i to %i", (int) rooksigfd, 4);
    if ((retc = nocloseonexec(4)))
      error(1, -retc, "Error setting no close on exec for fd 4");

    if ((stdin = open("/dev/null", O_RDONLY)) == -1)
      error(1, errno, "Unable to open /dev/null for reading");
    if (dup2(stdin, 0) == -1)
      error(1, errno, "Error redirecting 0 from /dev/null");
    if (stdin != 0 && close(stdin))
      error(1, errno, "Unable to close fd %i", stdin);
    if ((retc = nocloseonexec(0)))
      error(1, -retc, "Error setting no close on exec for fd 0");

    execl("@drook@", "@drook@", NULL);
    error(1, errno, "Error starting `%s'", "@drook@");
  }
   
  if (close(rookfd)) {
    retc = -errno;
    close(rooksigfd);
    killrthreads();
    return retc;
  }

  if (close(rooksigfd)) {
    retc = -errno;
    close(rookfd);
    killrthreads();
    return retc;
  }

  if ((retc = writefd(socketfd, FREEvm, FRAMEBYTES*2, SOCKET_TIMEOUT))
      || (retc = writefd(socketfd, FREEvm+FRAMEBYTES*2, BOX_NB(FREEvm), 
			 SOCKET_TIMEOUT))
      || (retc = readfd(socketfd, (B*) &ok, sizeof(ok), SOCKET_TIMEOUT))) {
    killrthreads();
    return retc;
  }
  
  mpin = mpin_;
  if ((retc = addsocket(socketfd, 0, FALSE, TRUE, sigfd))) {
    killrthreads();
    return retc;
  }

  TAG(o_1) = (NULLOBJ | SOCKETTYPE);
  ATTR(o_1) = 0;
  SOCKET_VAL(o_1) = socketfd;
  DGRAM_VAL(o_1) = sigfd;

  return OK;
}
