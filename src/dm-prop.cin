#line 2 "@srcdir@/dm-prop.cin"

#define DEBUG_ACTIVE 0
#include "dm.h"

#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <errno.h>
#include <netinet/in.h>
#include <sys/un.h>
#include <sys/wait.h>
#include <sys/time.h>
#include <netdb.h>

#include "dm-prop.h"
#include "dm-signals.h"
#include "paths.h"
#include "error-local.h"

/****************** signal redirector ********************/

DM_UNUSED static P serverport = 0;

DM_NORETURN
static void redirector_quit(int sig, 
			    siginfo_t* info, 
			    void* ucon DM_UNUSED) {
  fprintf(stderr, "Redirector %li: quitting, signal %i from %li\n",
	  (long) getpid(), sig, info ? (long) info->si_pid : 0);
  exit(0);
}

#ifndef KILL_TIME
#define KILL_TIME (60)
#endif

#if DM_PROP_MAIN
static pid_t myppid;
static void redirect_sig(int sig) {
  if (kill(myppid, sig))
    error_local(EXIT_FAILURE, errno, 
		"redirector %li unable to "
		"signal parent %li",
		(long) getpid(), (long) getppid());
}

static void redirector_exit(void) {
  struct sockaddr_un name;
#if ENABLE_UNIX_SOCKETS
  if (serverport >= 0 && init_unix_sockaddr(&name, serverport, FALSE))
    unlink(name.sun_path);
#endif //ENABLE_UNIX_SOCKETS
}

static fd_set rin;
static int nfds;

static void handle_connect(void) {
  int fd;
  if ((fd = accept(0, NULL, NULL)) == -1)
    error_local(1, errno, "redirector accept error");

  if (fd >= nfds) nfds = fd+1;
  FD_SET(fd, &rin);
}

static void handle_redirect(P fd) {
  B sig;

 repeat:
  switch (recv(fd, &sig, 1, 0)) {
    case 0:
      if (fd == 1) error_local(1, 0, "redirector received close on recv");

      close(fd);
      FD_CLR(fd, &rin);
      if (fd == nfds-1) for (nfds--; ! FD_ISSET(nfds-1, &rin); nfds--);
      return;

    case -1:
      if (errno == EINTR) goto repeat;
      error_local(1, errno, "redirector recv");
  };

  DEBUG("Received sig %i", (int) sig);
  propagate_sig(sig, redirect_sig);
}

static void redirector_alarm(void) {
  if (kill(myppid, 0))
    error_local(1, errno, "%li: parent %li dead", 
		(long) getpid(), (long) getppid());
}

int main(int argc, char* argv[]) {
  fd_set rout, eout;
  enum SIGMAP quitsigs[] = {SIGMAP_QUIT, SIGMAP_TERM, SIGMAP_HUP, SIGMAP_LEN};
  enum SIGMAP* i;
  int fd;
  const struct timeval timerin = {.tv_sec = KILL_TIME, .tv_usec = 0};
  struct timeval timer;
  int zero, one;

  serverport = (P) atoll(argv[1]);
  zero = atoi(argv[2]);
  one = atoi(argv[3]);
  myppid = getppid();

  if (atexit(redirector_exit))
    error_local(1, errno, "atexit for redirector");

  for (i = quitsigs; *i != SIGMAP_LEN; i++) sethandler(*i, redirector_quit);
  clearhandler(SIGMAP_INT);

  FD_ZERO(&rin);
  nfds = 0;
  if (zero) {FD_SET(0, &rin); nfds = 1;}
  if (one)  {FD_SET(1, &rin); nfds = 2;}

  if (DEBUG_ACTIVE) {
    struct sockaddr_in s;
    socklen_t sl = sizeof(s);
    getsockname(1, (struct sockaddr*) &s, &sl);
    if (one) {
      DEBUG("%i, %i, (%i, %i), (%li, %li)", 
	    1, (int) s.sin_family, s.sin_port, ntohs(s.sin_port),
	    (long) s.sin_addr.s_addr,(long)  ntohl(s.sin_addr.s_addr));
    }
    if (zero) {
      getsockname(0, (struct sockaddr*) &s, &sl);
      DEBUG("%i, %i, (%i, %i), (%li, %li)", 
	    0, (int) s.sin_family, s.sin_port, ntohs(s.sin_port),
	    (long) s.sin_addr.s_addr, (long) ntohl(s.sin_addr.s_addr));
    }
  }

  while (1) {
    eout = rout = rin;
    timer = timerin;
    switch (select(nfds, &rout, NULL, &eout, &timer)) {
      case -1:
	if (errno == EINTR) break;
	error_local(1, errno, "select failed in redirector");
	break;

      case 0:  
	redirector_alarm();
	break;

      default: 
	if (zero && (FD_ISSET(0, &rout) || FD_ISSET(0, &eout))) {
	  handle_connect();
	  break;
	}
	
	for (fd = zero ? 1 : 0; fd < nfds; fd++)
	  if (FD_ISSET(fd, &rout) || FD_ISSET(fd, &eout)) {
	    handle_redirect(fd);
	    break;
	  }
	break;
    }
  }
  return 1;
}
#else

DM_NORETURN
static void execsighandler(P sigsocket, P tcp_sigsocket, P serverport, 
			   P (*closesockets_func)(void)) {
  int sigsocket_ = -1, tcp_sigsocket_ = -1;
  P retc;
  char* _serverport;

  if (sigsocket != -1 && (sigsocket_ = dup(sigsocket)) == -1)
    error_local(1, errno, "Unable to dup sigsocket %li", (long) sigsocket);
  if (tcp_sigsocket != -1 && (tcp_sigsocket_ = dup(tcp_sigsocket)) == -1)
    error_local(1, errno, "Unable to dup tcp_sigsocket %li", 
		(long) tcp_sigsocket);

  if ((retc = closesockets_func()))
    error_local(1, retc < 0 ? -retc : 0, 
	  "Unable to close sockets: %li", (long) getpid());

  if (sigsocket_ != -1 
      && (dup2(sigsocket_, 1) == -1 || close(sigsocket_))) 
    error_local(1, errno, "Unable to dup sigsocket %li to stdout", 
	  (long) sigsocket);

  if (tcp_sigsocket_ != -1 
      && (dup2(tcp_sigsocket_, 0) == -1 || close(tcp_sigsocket_)))
    error_local(1, errno, "Unable to dup tcp_sigsocket %li to stdin", 
	  (long) tcp_sigsocket);

  if (asprintf(&_serverport, "%li", (long) serverport) == -1)
    error_local(1, 0, "Unable to asprintf serverport");
  
  DEBUG("exec: @dmprop@ %s %i %i", _serverport, 
	tcp_sigsocket != -1 ? 1 : 0, sigsocket != -1 ? 1 : 0);

  execl("@dmprop@", "@dmprop@",
	_serverport, 
	tcp_sigsocket != -1 ? "1" : "0",
	sigsocket != -1 ? "1" : "0",
	NULL);

  error_local(1, errno, 
	      "Unable to exec: @dmprop@ %s %i", _serverport,
	      tcp_sigsocket != -1 ? 1 : 0);
  exit(1);
}
  
/****************** signal redirector ********************/

P spawnsighandler(P sigsocket, P tcp_sigsocket, P serverport,
		  P (*closesockets_func)(void),
		  P* pid) {
  P retc = OK;
  switch ((*pid = fork())) {
    case -1:
     retc = -errno;
     error_local(0, errno, "forking for signal redirector");
     break;

    case 0:
      *pid = -1;
      execsighandler(sigsocket, tcp_sigsocket, serverport, closesockets_func);
      //never return from here

    default:
      if (sigsocket != -1 && close(sigsocket)) {
	retc = -errno;
	if (tcp_sigsocket != -1) close(tcp_sigsocket);
	error_local(0, -retc, "closing sigsocket");
      }
      if (tcp_sigsocket != -1 && close(tcp_sigsocket)) {
	retc = -errno;
	error_local(0, -retc, "closing tcp_sigsocket");
      }
      break;
  }
  return retc;
}
#endif //DM_PROP_MAIN

#if ENABLE_UNIX_SOCKETS
P init_unix_sockaddr(struct sockaddr_un *name, UW port, BOOLEAN isseq) {
  char* sock_path = getenv("DMSOCKDIR");
  memset(name, 0, sizeof(struct sockaddr_un));
  if (! sock_path || ! *sock_path) sock_path = DMSOCKDIR;
  if (sock_path[strlen(sock_path)-1] == '/')
    sock_path[strlen(sock_path)-1] = '\0';

  name->sun_family = AF_UNIX;
  snprintf(name->sun_path, sizeof(name->sun_path)-1, "%s/dnode-%i-%s",
           sock_path, port - getportoffset(), isseq ? "seq" : "dgram");

  return OK;
}
#endif //ENABLE_UNIX_SOCKETS

static UW portoffset = 0;
static BOOLEAN portoffset_ = FALSE;
UW getportoffset(void) {
    if (! portoffset_) {
      struct servent* sv;
      portoffset_ = TRUE;
      if ((sv = getservbyname("dnode", "tcp")))
	portoffset = ntohs(sv->s_port);
      else {
	if (DM_IPPORT_USERRESERVED != DM_IPPORT_USERRESERVED_STANDARD)
	  fprintf(stderr, 
		  "Unusual value for IPPORT_USERRESERVED: %i instead of %i\n",
		  DM_IPPORT_USERRESERVED, DM_IPPORT_USERRESERVED_STANDARD);
	portoffset = DM_IPPORT_USERRESERVED;
      }
    };
    return portoffset;
}

  
// Local Variables:
// mode: c
// End:
