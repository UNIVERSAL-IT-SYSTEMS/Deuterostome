#line 2 "@srcdir@/dm-prop.c.in"

#include "dm.h"

#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <errno.h>
#include <netinet/in.h>
#include <sys/un.h>
#include <sys/wait.h>
#include <sys/time.h>
#include <netdb.h>

#include "dm-prop.h"
#include "dm-signals.h"
#include "paths.h"
#include "error-local.h"

/****************** signal redirector ********************/

static P serverport = 0;

__attribute__ ((__noreturn__))
static void redirector_quit(int sig, 
			    siginfo_t* info, 
			    void* ucon __attribute__ ((__unused__))) {
  fprintf(stderr, "Redirector %li: quitting, signal %i from %li\n",
	  (long) getpid(), sig, info ? (long) info->si_pid : 0);
  exit(0);
}

#ifndef KILL_TIME
#define KILL_TIME (60)
#endif

#if DM_PROP_MAIN
static pid_t myppid;
static void redirect_sig(int sig) {
  if (kill(myppid, sig))
    error_local(EXIT_FAILURE, errno, "redirector %li unable to signal parent %li",
	  (long) getpid(), (long) getppid());
}

static void redirector_exit(void) {
  struct sockaddr_un name;
  if (serverport && init_unix_sockaddr(&name, serverport, FALSE))
    unlink(name.sun_path);
}

static void handle_redirect(void) {
  B sig;

 repeat:
  switch (recv(0, &sig, 1, 0)) {
    case 0:
      error_local(1, 0, "redirector received close on recv");
    case -1:
      if (errno == EINTR) goto repeat;
      error_local(EXIT_FAILURE, errno, "redirector recv");
  };

/*   fprintf(stderr, "%li: received signal %i\n",  */
/* 	  (long) getpid(), (int) sig); */
  propagate_sig(sig, redirect_sig);
}

static void redirector_alarm(void) {
/*   fprintf(stderr, "redirector timeout %li of %li\n", */
/* 	  (long) getpid(), (long) getppid()); */
  if (kill(myppid, 0))
    error_local(1, errno, "%li: parent %li dead", 
	  (long) getpid(), (long) getppid());
}

int main(void) {
  fd_set rin, rout, eout;
  int nfds = 1;
  int quitsigs[] = {SIGQUIT, SIGTERM, SIGHUP, 0};
  int *i;
  const struct timeval timerin = {.tv_sec = KILL_TIME, .tv_usec = 0};
  struct timeval timer;
  myppid = getppid();

  if (atexit(redirector_exit))
    error_local(1, errno, "atexit for redirector");

  for (i = quitsigs; *i; i++) sethandler(*i, redirector_quit);
  clearhandler(SIGINT);

  FD_ZERO(&rin);
  FD_SET(0, &rin);
  while (1) {
    eout = rout = rin;
    timer = timerin;
    switch (select(nfds, &rout, NULL, &eout, &timer)) {
      case -1:
	if (errno == EINTR) break;
	error_local(1, errno, "select failed in redirector");
	break;

      case 0:  break;
      default: handle_redirect(); break;
    }
    redirector_alarm();
  }
  return 1;
}
#else

__attribute__ ((__noreturn__))
static void execsighandler(P sigsocket, P serverport_, 
			   P (*closesockets_func)(void)) {
  int sigsocket_;
  P retc;
  serverport = serverport_;
  if ((sigsocket_ = dup(sigsocket)) == -1)
    error_local(1, errno, "Unable to dup sigsocket %li", (long) sigsocket);
  if ((retc = closesockets_func()))
    error_local(1, retc < 0 ? -retc : 0, 
	  "Unable to close sockets: %li", (long) getpid());
  if (dup2(sigsocket_, 0) == -1) 
    error_local(1, errno, "Unable to dup sigsocket %li to stdin", 
	  (long) sigsocket);

  execl("@dmprop@", "@dmprop@", NULL);
  error_local(1, errno, "Unable to exec: @dmprop@");
  exit(1);
}
  
/****************** signal redirector ********************/

#if HAVE_PTHREAD
#define dmsigmask sigprocmask
#else
#define dmsigmask pthread_sigmask
#endif //HAVE_PTHREAD

P spawnsighandler(P sigsocket, P serverport,
		  P (*closesockets_func)(void),
		  P* pid) {
  P retc = OK;
  switch ((*pid = fork())) {
    case -1:
     retc = -errno;
     error_local(0, errno, "forking for signal redirector");
     break;

    case 0:
      *pid = -1;
/*       fprintf(stderr, "spawning sig handler: %li of %li\n",  */
/* 	      (long) getpid(), (long) getppid()); */
      execsighandler(sigsocket, serverport, closesockets_func);
      //never return from here

    default:
      if (close(sigsocket)) {
	retc = -errno;
	error_local(0, errno, "closing sigsocket");
      }
      break;
  }
  return retc;
}
#endif //DM_PROP_MAIN

#if ENABLE_UNIX_SOCKETS
P init_unix_sockaddr(struct sockaddr_un *name, UW port, BOOLEAN isseq) {
  char* sock_path = getenv("DMSOCKDIR");
  memset(name, 0, sizeof(struct sockaddr_un));
  if (! sock_path || ! *sock_path) sock_path = DMSOCKDIR;
  if (sock_path[strlen(sock_path)-1] == '/')
    sock_path[strlen(sock_path)-1] = '\0';

  name->sun_family = AF_UNIX;
  snprintf(name->sun_path, sizeof(name->sun_path)-1, "%s/dnode-%i-%s",
           sock_path, port - getportoffset(), isseq ? "seq" : "dgram");

  return OK;
}
#endif //ENABLE_UNIX_SOCKETS

static UW portoffset = 0;
static BOOLEAN portoffset_ = FALSE;
UW getportoffset(void) {
    if (! portoffset_) {
      struct servent* sv;
      portoffset_ = TRUE;
      if ((sv = getservbyname("dnode", "tcp")))
	portoffset = ntohs(sv->s_port);
      else {
	if (DM_IPPORT_USERRESERVED != DM_IPPORT_USERRESERVED_STANDARD)
	  fprintf(stderr, 
		  "Unusual value for IPPORT_USERRESERVED: %i instead of %i\n",
		  DM_IPPORT_USERRESERVED, DM_IPPORT_USERRESERVED_STANDARD);
	portoffset = DM_IPPORT_USERRESERVED;
      }
    };
    return portoffset;
}
